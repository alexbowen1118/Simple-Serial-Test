
c:/Users/alexb/OneDrive/Desktop/Orbit/MagnetometerProject/Boron/Simple-Serial-Test/target/4.1.0/boron/Simple-Serial-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001f50  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5f70  000b5f70  00005f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5f94  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e5f4  000b5f98  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000018c  2003e664  2003e664  0002e664  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6008  000b6008  00026008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6030  000b6030  00026030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001101f9  00000000  00000000  00026034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000120a5  00000000  00000000  0013622d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00031b10  00000000  00000000  001482d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002738  00000000  00000000  00179de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009200  00000000  00000000  0017c51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038bbd  00000000  00000000  0018571a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b68c  00000000  00000000  001be2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012eb03  00000000  00000000  001f9963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006cf0  00000000  00000000  00328468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f001 fd6f 	bl	b5b14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fd77 	bl	b5b30 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5f4 	.word	0x2003e5f4
   b404c:	000b5f98 	.word	0x000b5f98
   b4050:	2003e664 	.word	0x2003e664
   b4054:	2003e664 	.word	0x2003e664
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fd75 	bl	b4b50 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b5f44 	.word	0x000b5f44
   b4080:	000b5f68 	.word	0x000b5f68

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8e2 	b.w	b424c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8ed 	bl	b4268 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bd15 	b.w	b4ac0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 baff 	b.w	b4698 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bafd 	b.w	b4698 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bb03 	b.w	b46a8 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN9MagSensorD1Ev>:

MagSensor::MagSensor() {
}

MagSensor::~MagSensor() {
}
   b40b2:	4770      	bx	lr

000b40b4 <_ZN9MagSensorD0Ev>:
MagSensor::~MagSensor() {
   b40b4:	b510      	push	{r4, lr}
}
   b40b6:	2104      	movs	r1, #4
MagSensor::~MagSensor() {
   b40b8:	4604      	mov	r4, r0
}
   b40ba:	f7ff fff0 	bl	b409e <_ZdlPvj>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}

000b40c2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c2:	b40e      	push	{r1, r2, r3}
   b40c4:	b503      	push	{r0, r1, lr}
   b40c6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40c8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ca:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ce:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40d0:	f000 fbcb 	bl	b486a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d4:	b002      	add	sp, #8
   b40d6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40da:	b003      	add	sp, #12
   b40dc:	4770      	bx	lr
	...

000b40e0 <_ZN9MagSensor8instanceEv>:
MagSensor &MagSensor::instance() {
   b40e0:	b510      	push	{r4, lr}
  if (!_instance) {
   b40e2:	4c06      	ldr	r4, [pc, #24]	; (b40fc <_ZN9MagSensor8instanceEv+0x1c>)
   b40e4:	6823      	ldr	r3, [r4, #0]
   b40e6:	b933      	cbnz	r3, b40f6 <_ZN9MagSensor8instanceEv+0x16>
      _instance = new MagSensor();
   b40e8:	2004      	movs	r0, #4
   b40ea:	f7ff ffd4 	bl	b4096 <_Znwj>
   b40ee:	b108      	cbz	r0, b40f4 <_ZN9MagSensor8instanceEv+0x14>
MagSensor::MagSensor() {
   b40f0:	4b03      	ldr	r3, [pc, #12]	; (b4100 <_ZN9MagSensor8instanceEv+0x20>)
   b40f2:	6003      	str	r3, [r0, #0]
      _instance = new MagSensor();
   b40f4:	6020      	str	r0, [r4, #0]
}
   b40f6:	6820      	ldr	r0, [r4, #0]
   b40f8:	bd10      	pop	{r4, pc}
   b40fa:	bf00      	nop
   b40fc:	2003e670 	.word	0x2003e670
   b4100:	000b5cd4 	.word	0x000b5cd4

000b4104 <_ZN9MagSensor5setupEv>:

/**
 * Serial data format coming from magnetometer:
 * [(float)baseline],[(int)vehicle_sensed]/n
 */
int MagSensor::setup(){
   b4104:	b538      	push	{r3, r4, r5, lr}

    Serial.begin(115200);   //  Open serial communications and wait for port to open:
   b4106:	f000 fe2f 	bl	b4d68 <_Z16_fetch_usbserialv>
   b410a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b410e:	f000 fe1b 	bl	b4d48 <_ZN9USBSerial5beginEl>
    Serial1.begin(115200);  //  Open serial1 communications and wait for port to open:
   b4112:	f001 f875 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b4116:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b411a:	f000 feed 	bl	b4ef8 <_ZN11USARTSerial5beginEm>

    waitUntil(Serial.isConnected);
   b411e:	f000 fe23 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4122:	f000 fe15 	bl	b4d50 <_ZN9USBSerial11isConnectedEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4126:	b910      	cbnz	r0, b412e <_ZN9MagSensor5setupEv+0x2a>
            spark_process();
   b4128:	f000 faa6 	bl	b4678 <spark_process>
        while (_while() && !_condition()) {
   b412c:	e7f7      	b.n	b411e <_ZN9MagSensor5setupEv+0x1a>
   b412e:	f000 fe1b 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4132:	f000 fe0d 	bl	b4d50 <_ZN9USBSerial11isConnectedEv>

    Serial.println("Serial is connected");
   b4136:	f000 fe17 	bl	b4d68 <_Z16_fetch_usbserialv>
   b413a:	4913      	ldr	r1, [pc, #76]	; (b4188 <_ZN9MagSensor5setupEv+0x84>)
   b413c:	f000 fb6d 	bl	b481a <_ZN5Print7printlnEPKc>

    // wait until baseline comes in
    while (!Serial1.available()){
   b4140:	f001 f85e 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b4144:	6803      	ldr	r3, [r0, #0]
   b4146:	691b      	ldr	r3, [r3, #16]
   b4148:	4798      	blx	r3
   b414a:	b918      	cbnz	r0, b4154 <_ZN9MagSensor5setupEv+0x50>
        delay(10);
   b414c:	200a      	movs	r0, #10
   b414e:	f000 fc8b 	bl	b4a68 <delay>
    while (!Serial1.available()){
   b4152:	e7f5      	b.n	b4140 <_ZN9MagSensor5setupEv+0x3c>
    }  
    baseline = Serial1.parseFloat();
   b4154:	f001 f854 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b4158:	f000 fc70 	bl	b4a3c <_ZN6Stream10parseFloatEv>
   b415c:	4d0b      	ldr	r5, [pc, #44]	; (b418c <_ZN9MagSensor5setupEv+0x88>)
   b415e:	ed85 0a00 	vstr	s0, [r5]
    Serial.printlnf("Baseline value is: %f", baseline);
   b4162:	f000 fe01 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4166:	4604      	mov	r4, r0
   b4168:	6828      	ldr	r0, [r5, #0]
   b416a:	f001 fa13 	bl	b5594 <__aeabi_f2d>
   b416e:	4602      	mov	r2, r0
   b4170:	460b      	mov	r3, r1
   b4172:	4620      	mov	r0, r4
   b4174:	4906      	ldr	r1, [pc, #24]	; (b4190 <_ZN9MagSensor5setupEv+0x8c>)
   b4176:	f7ff ffa4 	bl	b40c2 <_ZN5Print8printlnfEPKcz>

    pinMode(Light, OUTPUT);
   b417a:	4b06      	ldr	r3, [pc, #24]	; (b4194 <_ZN9MagSensor5setupEv+0x90>)
   b417c:	2101      	movs	r1, #1
   b417e:	8818      	ldrh	r0, [r3, #0]
   b4180:	f000 fff8 	bl	b5174 <pinMode>

    return 1;
}
   b4184:	2001      	movs	r0, #1
   b4186:	bd38      	pop	{r3, r4, r5, pc}
   b4188:	000b5c8c 	.word	0x000b5c8c
   b418c:	2003e66c 	.word	0x2003e66c
   b4190:	000b5ca0 	.word	0x000b5ca0
   b4194:	2003e5f4 	.word	0x2003e5f4

000b4198 <_ZN9MagSensor4loopEv>:

int MagSensor::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b4198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    
    // Simple FSM for vehicle_sensed state
    switch(state){
   b419c:	4e25      	ldr	r6, [pc, #148]	; (b4234 <_ZN9MagSensor4loopEv+0x9c>)
   b419e:	6834      	ldr	r4, [r6, #0]
   b41a0:	2c01      	cmp	r4, #1
   b41a2:	d026      	beq.n	b41f2 <_ZN9MagSensor4loopEv+0x5a>
   b41a4:	2c02      	cmp	r4, #2
   b41a6:	d039      	beq.n	b421c <_ZN9MagSensor4loopEv+0x84>
   b41a8:	b9ac      	cbnz	r4, b41d6 <_ZN9MagSensor4loopEv+0x3e>
        
        // WAITING
        case 0:
            vehicle_sensed = Serial1.parseInt();
   b41aa:	f001 f829 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b41ae:	f000 fbe1 	bl	b4974 <_ZN6Stream8parseIntEv>
   b41b2:	4f21      	ldr	r7, [pc, #132]	; (b4238 <_ZN9MagSensor4loopEv+0xa0>)
   b41b4:	6038      	str	r0, [r7, #0]
            Serial.print(vehicle_sensed);
   b41b6:	f000 fdd7 	bl	b4d68 <_Z16_fetch_usbserialv>
   b41ba:	683d      	ldr	r5, [r7, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41bc:	2d00      	cmp	r5, #0
   b41be:	4680      	mov	r8, r0
   b41c0:	da0b      	bge.n	b41da <_ZN9MagSensor4loopEv+0x42>
            t = print('-');
   b41c2:	212d      	movs	r1, #45	; 0x2d
   b41c4:	f000 fb1a 	bl	b47fc <_ZN5Print5printEc>
            val = -n;
   b41c8:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41ca:	220a      	movs	r2, #10
   b41cc:	4640      	mov	r0, r8
   b41ce:	f000 fb2e 	bl	b482e <_ZN5Print11printNumberEmh>
            if(vehicle_sensed){
   b41d2:	683b      	ldr	r3, [r7, #0]
   b41d4:	b91b      	cbnz	r3, b41de <_ZN9MagSensor4loopEv+0x46>
    switch(state){
   b41d6:	2400      	movs	r4, #0
   b41d8:	e008      	b.n	b41ec <_ZN9MagSensor4loopEv+0x54>
            val = n;
   b41da:	4629      	mov	r1, r5
   b41dc:	e7f5      	b.n	b41ca <_ZN9MagSensor4loopEv+0x32>
                Serial.println("WAITING");
   b41de:	f000 fdc3 	bl	b4d68 <_Z16_fetch_usbserialv>
   b41e2:	4916      	ldr	r1, [pc, #88]	; (b423c <_ZN9MagSensor4loopEv+0xa4>)
   b41e4:	f000 fb19 	bl	b481a <_ZN5Print7printlnEPKc>
                state = 1;
   b41e8:	2301      	movs	r3, #1
        case 1:
            vehicle_sensed = Serial1.parseInt();
            if(!vehicle_sensed){
                Serial.printlnf("SENSING");
                digitalWrite(Light, HIGH);
                state = 2;
   b41ea:	6033      	str	r3, [r6, #0]
            digitalWrite(Light, LOW);
            return 1;  
    }

    return 0;
}
   b41ec:	4620      	mov	r0, r4
   b41ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            vehicle_sensed = Serial1.parseInt();
   b41f2:	f001 f805 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b41f6:	f000 fbbd 	bl	b4974 <_ZN6Stream8parseIntEv>
   b41fa:	4b0f      	ldr	r3, [pc, #60]	; (b4238 <_ZN9MagSensor4loopEv+0xa0>)
   b41fc:	4604      	mov	r4, r0
   b41fe:	6018      	str	r0, [r3, #0]
            if(!vehicle_sensed){
   b4200:	2800      	cmp	r0, #0
   b4202:	d1e8      	bne.n	b41d6 <_ZN9MagSensor4loopEv+0x3e>
                Serial.printlnf("SENSING");
   b4204:	f000 fdb0 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4208:	490d      	ldr	r1, [pc, #52]	; (b4240 <_ZN9MagSensor4loopEv+0xa8>)
   b420a:	f7ff ff5a 	bl	b40c2 <_ZN5Print8printlnfEPKcz>
                digitalWrite(Light, HIGH);
   b420e:	4b0d      	ldr	r3, [pc, #52]	; (b4244 <_ZN9MagSensor4loopEv+0xac>)
   b4210:	2101      	movs	r1, #1
   b4212:	8818      	ldrh	r0, [r3, #0]
   b4214:	f000 ffbf 	bl	b5196 <digitalWrite>
                state = 2;
   b4218:	2302      	movs	r3, #2
   b421a:	e7e6      	b.n	b41ea <_ZN9MagSensor4loopEv+0x52>
            Serial.println("DONE");
   b421c:	f000 fda4 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4220:	4909      	ldr	r1, [pc, #36]	; (b4248 <_ZN9MagSensor4loopEv+0xb0>)
   b4222:	f000 fafa 	bl	b481a <_ZN5Print7printlnEPKc>
            digitalWrite(Light, LOW);
   b4226:	4b07      	ldr	r3, [pc, #28]	; (b4244 <_ZN9MagSensor4loopEv+0xac>)
   b4228:	2100      	movs	r1, #0
   b422a:	8818      	ldrh	r0, [r3, #0]
   b422c:	f000 ffb3 	bl	b5196 <digitalWrite>
            return 1;  
   b4230:	2401      	movs	r4, #1
   b4232:	e7db      	b.n	b41ec <_ZN9MagSensor4loopEv+0x54>
   b4234:	2003e668 	.word	0x2003e668
   b4238:	2003e664 	.word	0x2003e664
   b423c:	000b5cb6 	.word	0x000b5cb6
   b4240:	000b5cbe 	.word	0x000b5cbe
   b4244:	2003e5f4 	.word	0x2003e5f4
   b4248:	000b5cc6 	.word	0x000b5cc6

000b424c <setup>:
int count = 0; 

SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

void setup() {  
   b424c:	b508      	push	{r3, lr}
  //initiate vehicleCounter and start loop
  VehicleCounter::instance().setup();
   b424e:	f000 f83b 	bl	b42c8 <_ZN14VehicleCounter8instanceEv>
   b4252:	f000 f84b 	bl	b42ec <_ZN14VehicleCounter5setupEv>
  Serial.println("Vehicle Counter Initiated");
   b4256:	f000 fd87 	bl	b4d68 <_Z16_fetch_usbserialv>
}
   b425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Vehicle Counter Initiated");
   b425e:	4901      	ldr	r1, [pc, #4]	; (b4264 <setup+0x18>)
   b4260:	f000 badb 	b.w	b481a <_ZN5Print7printlnEPKc>
   b4264:	000b5cdc 	.word	0x000b5cdc

000b4268 <loop>:

void loop() {
   b4268:	b510      	push	{r4, lr}
  count = VehicleCounter::instance().loop(); // if vehicle count has been updated
   b426a:	f000 f82d 	bl	b42c8 <_ZN14VehicleCounter8instanceEv>
   b426e:	f000 f84b 	bl	b4308 <_ZN14VehicleCounter4loopEv>
   b4272:	4c05      	ldr	r4, [pc, #20]	; (b4288 <loop+0x20>)
  if(count > 0){
   b4274:	2800      	cmp	r0, #0
  count = VehicleCounter::instance().loop(); // if vehicle count has been updated
   b4276:	6020      	str	r0, [r4, #0]
  if(count > 0){
   b4278:	dd05      	ble.n	b4286 <loop+0x1e>
    Serial.printlnf("%d Vehicles Detected", count); // output vehicle count
   b427a:	f000 fd75 	bl	b4d68 <_Z16_fetch_usbserialv>
   b427e:	6822      	ldr	r2, [r4, #0]
   b4280:	4902      	ldr	r1, [pc, #8]	; (b428c <loop+0x24>)
   b4282:	f7ff ff1e 	bl	b40c2 <_ZN5Print8printlnfEPKcz>
  }
   b4286:	bd10      	pop	{r4, pc}
   b4288:	2003e680 	.word	0x2003e680
   b428c:	000b5cf6 	.word	0x000b5cf6

000b4290 <_GLOBAL__sub_I_count>:
   b4290:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4292:	4b07      	ldr	r3, [pc, #28]	; (b42b0 <_GLOBAL__sub_I_count+0x20>)
    SleepResult() {}
   b4294:	4a07      	ldr	r2, [pc, #28]	; (b42b4 <_GLOBAL__sub_I_count+0x24>)
   b4296:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4298:	2400      	movs	r4, #0
   b429a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b429e:	2003      	movs	r0, #3
   b42a0:	f000 f95e 	bl	b4560 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b42a4:	4621      	mov	r1, r4
   b42a6:	2001      	movs	r0, #1
   b42a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b42ac:	f000 b968 	b.w	b4580 <system_thread_set_state>
   b42b0:	2003e674 	.word	0x2003e674
   b42b4:	ffff0000 	.word	0xffff0000

000b42b8 <_ZN14VehicleCounterD1Ev>:

VehicleCounter::VehicleCounter() {
}

VehicleCounter::~VehicleCounter() {
}
   b42b8:	4770      	bx	lr

000b42ba <_ZN14VehicleCounterD0Ev>:
VehicleCounter::~VehicleCounter() {
   b42ba:	b510      	push	{r4, lr}
}
   b42bc:	2104      	movs	r1, #4
VehicleCounter::~VehicleCounter() {
   b42be:	4604      	mov	r4, r0
}
   b42c0:	f7ff feed 	bl	b409e <_ZdlPvj>
   b42c4:	4620      	mov	r0, r4
   b42c6:	bd10      	pop	{r4, pc}

000b42c8 <_ZN14VehicleCounter8instanceEv>:
VehicleCounter &VehicleCounter::instance() {
   b42c8:	b510      	push	{r4, lr}
    if (!_instance) {
   b42ca:	4c06      	ldr	r4, [pc, #24]	; (b42e4 <_ZN14VehicleCounter8instanceEv+0x1c>)
   b42cc:	6823      	ldr	r3, [r4, #0]
   b42ce:	b933      	cbnz	r3, b42de <_ZN14VehicleCounter8instanceEv+0x16>
        _instance = new VehicleCounter();
   b42d0:	2004      	movs	r0, #4
   b42d2:	f7ff fee0 	bl	b4096 <_Znwj>
   b42d6:	b108      	cbz	r0, b42dc <_ZN14VehicleCounter8instanceEv+0x14>
VehicleCounter::VehicleCounter() {
   b42d8:	4b03      	ldr	r3, [pc, #12]	; (b42e8 <_ZN14VehicleCounter8instanceEv+0x20>)
   b42da:	6003      	str	r3, [r0, #0]
        _instance = new VehicleCounter();
   b42dc:	6020      	str	r0, [r4, #0]
}
   b42de:	6820      	ldr	r0, [r4, #0]
   b42e0:	bd10      	pop	{r4, pc}
   b42e2:	bf00      	nop
   b42e4:	2003e68c 	.word	0x2003e68c
   b42e8:	000b5d34 	.word	0x000b5d34

000b42ec <_ZN14VehicleCounter5setupEv>:


void VehicleCounter::setup(){
   b42ec:	b508      	push	{r3, lr}
    
    MagSensor::instance().setup();
   b42ee:	f7ff fef7 	bl	b40e0 <_ZN9MagSensor8instanceEv>
   b42f2:	f7ff ff07 	bl	b4104 <_ZN9MagSensor5setupEv>
    
    Serial.println("MagSensor instance initialized.");
   b42f6:	f000 fd37 	bl	b4d68 <_Z16_fetch_usbserialv>

}
   b42fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("MagSensor instance initialized.");
   b42fe:	4901      	ldr	r1, [pc, #4]	; (b4304 <_ZN14VehicleCounter5setupEv+0x18>)
   b4300:	f000 ba8b 	b.w	b481a <_ZN5Print7printlnEPKc>
   b4304:	000b5d0b 	.word	0x000b5d0b

000b4308 <_ZN14VehicleCounter4loopEv>:


int VehicleCounter::loop(){     // updates vehicle count using MagSensor
   b4308:	b508      	push	{r3, lr}
    if (MagSensor::instance().loop()) { 
   b430a:	f7ff fee9 	bl	b40e0 <_ZN9MagSensor8instanceEv>
   b430e:	f7ff ff43 	bl	b4198 <_ZN9MagSensor4loopEv>
   b4312:	b138      	cbz	r0, b4324 <_ZN14VehicleCounter4loopEv+0x1c>
        ++vehicleCount;
   b4314:	4a04      	ldr	r2, [pc, #16]	; (b4328 <_ZN14VehicleCounter4loopEv+0x20>)
   b4316:	6813      	ldr	r3, [r2, #0]
   b4318:	3301      	adds	r3, #1
   b431a:	6013      	str	r3, [r2, #0]
        ++totalVehicleCount;
   b431c:	4b03      	ldr	r3, [pc, #12]	; (b432c <_ZN14VehicleCounter4loopEv+0x24>)
   b431e:	6818      	ldr	r0, [r3, #0]
   b4320:	3001      	adds	r0, #1
   b4322:	6018      	str	r0, [r3, #0]
        return totalVehicleCount;
    }
    return 0;
}
   b4324:	bd08      	pop	{r3, pc}
   b4326:	bf00      	nop
   b4328:	2003e684 	.word	0x2003e684
   b432c:	2003e688 	.word	0x2003e688

000b4330 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <netdb_freeaddrinfo+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	689b      	ldr	r3, [r3, #8]
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	00030268 	.word	0x00030268

000b4340 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <netdb_getaddrinfo+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	68db      	ldr	r3, [r3, #12]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	00030268 	.word	0x00030268

000b4350 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <HAL_Pin_Mode+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	689b      	ldr	r3, [r3, #8]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	0003022c 	.word	0x0003022c

000b4360 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <HAL_Get_Pin_Mode+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	68db      	ldr	r3, [r3, #12]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	0003022c 	.word	0x0003022c

000b4370 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <HAL_GPIO_Write+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	691b      	ldr	r3, [r3, #16]
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	0003022c 	.word	0x0003022c

000b4380 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <HAL_RNG_GetRandomNumber+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	685b      	ldr	r3, [r3, #4]
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030218 	.word	0x00030218

000b4390 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	695b      	ldr	r3, [r3, #20]
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030218 	.word	0x00030218

000b43a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <os_mutex_recursive_create+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030248 	.word	0x00030248

000b43b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <inet_inet_ntop+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	695b      	ldr	r3, [r3, #20]
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030264 	.word	0x00030264

000b43c0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <hal_usart_write+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	68db      	ldr	r3, [r3, #12]
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	0003023c 	.word	0x0003023c

000b43d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <hal_usart_available+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	691b      	ldr	r3, [r3, #16]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	0003023c 	.word	0x0003023c

000b43e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <hal_usart_read+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	695b      	ldr	r3, [r3, #20]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	0003023c 	.word	0x0003023c

000b43f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <hal_usart_peek+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	699b      	ldr	r3, [r3, #24]
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	0003023c 	.word	0x0003023c

000b4400 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <hal_usart_flush+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	69db      	ldr	r3, [r3, #28]
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	0003023c 	.word	0x0003023c

000b4410 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <hal_usart_is_enabled+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	6a1b      	ldr	r3, [r3, #32]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	0003023c 	.word	0x0003023c

000b4420 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <hal_usart_available_data_for_write+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	0003023c 	.word	0x0003023c

000b4430 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <hal_usart_begin_config+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003023c 	.word	0x0003023c

000b4440 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <hal_usart_init_ex+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003023c 	.word	0x0003023c

000b4450 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <hal_i2c_write+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	6a1b      	ldr	r3, [r3, #32]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	00030228 	.word	0x00030228

000b4460 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <hal_i2c_available+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	00030228 	.word	0x00030228

000b4470 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <hal_i2c_read+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	00030228 	.word	0x00030228

000b4480 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <hal_i2c_peek+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	00030228 	.word	0x00030228

000b4490 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <hal_i2c_flush+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	00030228 	.word	0x00030228

000b44a0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <hal_i2c_is_enabled+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	00030228 	.word	0x00030228

000b44b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <hal_i2c_init+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	00030228 	.word	0x00030228

000b44c0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <hal_spi_init+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	69db      	ldr	r3, [r3, #28]
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	00030230 	.word	0x00030230

000b44d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <hal_spi_is_enabled+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	6a1b      	ldr	r3, [r3, #32]
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	00030230 	.word	0x00030230

000b44e0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b02      	ldr	r3, [pc, #8]	; (b44ec <HAL_USB_USART_Init+0xc>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	681b      	ldr	r3, [r3, #0]
   b44e8:	9301      	str	r3, [sp, #4]
   b44ea:	bd08      	pop	{r3, pc}
   b44ec:	0003024c 	.word	0x0003024c

000b44f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b02      	ldr	r3, [pc, #8]	; (b44fc <HAL_USB_USART_Begin+0xc>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	685b      	ldr	r3, [r3, #4]
   b44f8:	9301      	str	r3, [sp, #4]
   b44fa:	bd08      	pop	{r3, pc}
   b44fc:	0003024c 	.word	0x0003024c

000b4500 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4500:	b508      	push	{r3, lr}
   b4502:	4b02      	ldr	r3, [pc, #8]	; (b450c <HAL_USB_USART_Available_Data+0xc>)
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	691b      	ldr	r3, [r3, #16]
   b4508:	9301      	str	r3, [sp, #4]
   b450a:	bd08      	pop	{r3, pc}
   b450c:	0003024c 	.word	0x0003024c

000b4510 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4510:	b508      	push	{r3, lr}
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4514:	681b      	ldr	r3, [r3, #0]
   b4516:	695b      	ldr	r3, [r3, #20]
   b4518:	9301      	str	r3, [sp, #4]
   b451a:	bd08      	pop	{r3, pc}
   b451c:	0003024c 	.word	0x0003024c

000b4520 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b02      	ldr	r3, [pc, #8]	; (b452c <HAL_USB_USART_Receive_Data+0xc>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	699b      	ldr	r3, [r3, #24]
   b4528:	9301      	str	r3, [sp, #4]
   b452a:	bd08      	pop	{r3, pc}
   b452c:	0003024c 	.word	0x0003024c

000b4530 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4530:	b508      	push	{r3, lr}
   b4532:	4b02      	ldr	r3, [pc, #8]	; (b453c <HAL_USB_USART_Send_Data+0xc>)
   b4534:	681b      	ldr	r3, [r3, #0]
   b4536:	69db      	ldr	r3, [r3, #28]
   b4538:	9301      	str	r3, [sp, #4]
   b453a:	bd08      	pop	{r3, pc}
   b453c:	0003024c 	.word	0x0003024c

000b4540 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b02      	ldr	r3, [pc, #8]	; (b454c <HAL_USB_USART_Flush_Data+0xc>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	6a1b      	ldr	r3, [r3, #32]
   b4548:	9301      	str	r3, [sp, #4]
   b454a:	bd08      	pop	{r3, pc}
   b454c:	0003024c 	.word	0x0003024c

000b4550 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4550:	b508      	push	{r3, lr}
   b4552:	4b02      	ldr	r3, [pc, #8]	; (b455c <HAL_USB_USART_Is_Connected+0xc>)
   b4554:	681b      	ldr	r3, [r3, #0]
   b4556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	bd08      	pop	{r3, pc}
   b455c:	0003024c 	.word	0x0003024c

000b4560 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <set_system_mode+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	685b      	ldr	r3, [r3, #4]
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	00030220 	.word	0x00030220

000b4570 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <system_delay_ms+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	695b      	ldr	r3, [r3, #20]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030220 	.word	0x00030220

000b4580 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <system_thread_set_state+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030220 	.word	0x00030220

000b4590 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b03      	ldr	r3, [pc, #12]	; (b45a0 <system_ctrl_set_app_request_handler+0x10>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b459a:	9301      	str	r3, [sp, #4]
   b459c:	bd08      	pop	{r3, pc}
   b459e:	0000      	.short	0x0000
   b45a0:	00030220 	.word	0x00030220

000b45a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b03      	ldr	r3, [pc, #12]	; (b45b4 <system_ctrl_set_result+0x10>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45ae:	9301      	str	r3, [sp, #4]
   b45b0:	bd08      	pop	{r3, pc}
   b45b2:	0000      	.short	0x0000
   b45b4:	00030220 	.word	0x00030220

000b45b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <network_connect+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	685b      	ldr	r3, [r3, #4]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	00030240 	.word	0x00030240

000b45c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <network_connecting+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	689b      	ldr	r3, [r3, #8]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030240 	.word	0x00030240

000b45d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <network_disconnect+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	68db      	ldr	r3, [r3, #12]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030240 	.word	0x00030240

000b45e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <network_ready+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	691b      	ldr	r3, [r3, #16]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030240 	.word	0x00030240

000b45f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <network_on+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	695b      	ldr	r3, [r3, #20]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030240 	.word	0x00030240

000b4608 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <network_off+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	699b      	ldr	r3, [r3, #24]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030240 	.word	0x00030240

000b4618 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <network_listen+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	69db      	ldr	r3, [r3, #28]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030240 	.word	0x00030240

000b4628 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <network_listening+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	6a1b      	ldr	r3, [r3, #32]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030240 	.word	0x00030240

000b4638 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <network_set_listen_timeout+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030240 	.word	0x00030240

000b4648 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <network_get_listen_timeout+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030240 	.word	0x00030240

000b4658 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <network_is_on+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030240 	.word	0x00030240

000b4668 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <network_is_off+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030240 	.word	0x00030240

000b4678 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <spark_process+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	689b      	ldr	r3, [r3, #8]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	00030244 	.word	0x00030244

000b4688 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <spark_set_random_seed_from_cloud_handler+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030244 	.word	0x00030244

000b4698 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <malloc+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	681b      	ldr	r3, [r3, #0]
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	0003021c 	.word	0x0003021c

000b46a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <free+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	685b      	ldr	r3, [r3, #4]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	0003021c 	.word	0x0003021c

000b46b8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <vsnprintf+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	0003021c 	.word	0x0003021c

000b46c8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <__assert_func+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	0003021c 	.word	0x0003021c

000b46d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <newlib_impure_ptr_callback+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	0003021c 	.word	0x0003021c

000b46e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b46e8:	2200      	movs	r2, #0
   b46ea:	6840      	ldr	r0, [r0, #4]
   b46ec:	4611      	mov	r1, r2
   b46ee:	f7ff bf9b 	b.w	b4628 <network_listening>

000b46f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46f2:	2200      	movs	r2, #0
   b46f4:	6840      	ldr	r0, [r0, #4]
   b46f6:	4611      	mov	r1, r2
   b46f8:	f7ff bfa6 	b.w	b4648 <network_get_listen_timeout>

000b46fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46fc:	6840      	ldr	r0, [r0, #4]
   b46fe:	2200      	movs	r2, #0
   b4700:	f7ff bf9a 	b.w	b4638 <network_set_listen_timeout>

000b4704 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4704:	6840      	ldr	r0, [r0, #4]
   b4706:	2200      	movs	r2, #0
   b4708:	f081 0101 	eor.w	r1, r1, #1
   b470c:	f7ff bf84 	b.w	b4618 <network_listen>

000b4710 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4710:	2300      	movs	r3, #0
   b4712:	6840      	ldr	r0, [r0, #4]
   b4714:	461a      	mov	r2, r3
   b4716:	4619      	mov	r1, r3
   b4718:	f7ff bf76 	b.w	b4608 <network_off>

000b471c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b471c:	2300      	movs	r3, #0
   b471e:	6840      	ldr	r0, [r0, #4]
   b4720:	461a      	mov	r2, r3
   b4722:	4619      	mov	r1, r3
   b4724:	f7ff bf68 	b.w	b45f8 <network_on>

000b4728 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4728:	2200      	movs	r2, #0
   b472a:	6840      	ldr	r0, [r0, #4]
   b472c:	4611      	mov	r1, r2
   b472e:	f7ff bf5b 	b.w	b45e8 <network_ready>

000b4732 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4732:	2200      	movs	r2, #0
   b4734:	6840      	ldr	r0, [r0, #4]
   b4736:	4611      	mov	r1, r2
   b4738:	f7ff bf46 	b.w	b45c8 <network_connecting>

000b473c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b473c:	6840      	ldr	r0, [r0, #4]
   b473e:	2200      	movs	r2, #0
   b4740:	2102      	movs	r1, #2
   b4742:	f7ff bf49 	b.w	b45d8 <network_disconnect>

000b4746 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4746:	2300      	movs	r3, #0
   b4748:	6840      	ldr	r0, [r0, #4]
   b474a:	461a      	mov	r2, r3
   b474c:	f7ff bf34 	b.w	b45b8 <network_connect>

000b4750 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4750:	4b02      	ldr	r3, [pc, #8]	; (b475c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4752:	2203      	movs	r2, #3
   b4754:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4756:	4a02      	ldr	r2, [pc, #8]	; (b4760 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4758:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b475a:	4770      	bx	lr
   b475c:	2003e690 	.word	0x2003e690
   b4760:	000b5d44 	.word	0x000b5d44

000b4764 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4764:	b510      	push	{r4, lr}
   b4766:	4604      	mov	r4, r0
   b4768:	4608      	mov	r0, r1
{
    _spi = spi;
   b476a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b476c:	f7ff fea8 	bl	b44c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4770:	2300      	movs	r3, #0
   b4772:	6063      	str	r3, [r4, #4]
}
   b4774:	4620      	mov	r0, r4
   b4776:	bd10      	pop	{r4, pc}

000b4778 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4778:	4b05      	ldr	r3, [pc, #20]	; (b4790 <_GLOBAL__sub_I_System+0x18>)
   b477a:	2202      	movs	r2, #2
   b477c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b477e:	4b05      	ldr	r3, [pc, #20]	; (b4794 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4780:	4a05      	ldr	r2, [pc, #20]	; (b4798 <_GLOBAL__sub_I_System+0x20>)
   b4782:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4784:	2000      	movs	r0, #0
   b4786:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b478a:	f7ff bee9 	b.w	b4560 <set_system_mode>
   b478e:	bf00      	nop
   b4790:	2003e6a4 	.word	0x2003e6a4
   b4794:	2003e698 	.word	0x2003e698
   b4798:	ffff0000 	.word	0xffff0000

000b479c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b479c:	4802      	ldr	r0, [pc, #8]	; (b47a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b479e:	2300      	movs	r3, #0
   b47a0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b47a2:	f7ff bdfd 	b.w	b43a0 <os_mutex_recursive_create>
   b47a6:	bf00      	nop
   b47a8:	2003e6a8 	.word	0x2003e6a8

000b47ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b47ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47ae:	4606      	mov	r6, r0
   b47b0:	460d      	mov	r5, r1
  size_t n = 0;
   b47b2:	188f      	adds	r7, r1, r2
   b47b4:	2400      	movs	r4, #0
  while (size--) {
   b47b6:	42bd      	cmp	r5, r7
   b47b8:	d00c      	beq.n	b47d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b47ba:	6833      	ldr	r3, [r6, #0]
   b47bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b47c0:	689b      	ldr	r3, [r3, #8]
   b47c2:	4630      	mov	r0, r6
   b47c4:	4798      	blx	r3
     if (chunk>=0)
   b47c6:	1e03      	subs	r3, r0, #0
   b47c8:	db01      	blt.n	b47ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b47ca:	441c      	add	r4, r3
  while (size--) {
   b47cc:	e7f3      	b.n	b47b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b47ce:	2c00      	cmp	r4, #0
   b47d0:	bf08      	it	eq
   b47d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b47d4:	4620      	mov	r0, r4
   b47d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b47d8:	b513      	push	{r0, r1, r4, lr}
   b47da:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b47dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b47de:	b159      	cbz	r1, b47f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b47e0:	9101      	str	r1, [sp, #4]
   b47e2:	f001 f9db 	bl	b5b9c <strlen>
   b47e6:	6823      	ldr	r3, [r4, #0]
   b47e8:	9901      	ldr	r1, [sp, #4]
   b47ea:	68db      	ldr	r3, [r3, #12]
   b47ec:	4602      	mov	r2, r0
   b47ee:	4620      	mov	r0, r4
    }
   b47f0:	b002      	add	sp, #8
   b47f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b47f6:	4718      	bx	r3
    }
   b47f8:	b002      	add	sp, #8
   b47fa:	bd10      	pop	{r4, pc}

000b47fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b47fc:	6803      	ldr	r3, [r0, #0]
   b47fe:	689b      	ldr	r3, [r3, #8]
   b4800:	4718      	bx	r3

000b4802 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4802:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4804:	210d      	movs	r1, #13
{
   b4806:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4808:	f7ff fff8 	bl	b47fc <_ZN5Print5printEc>
  n += print('\n');
   b480c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b480e:	4604      	mov	r4, r0
  n += print('\n');
   b4810:	4628      	mov	r0, r5
   b4812:	f7ff fff3 	bl	b47fc <_ZN5Print5printEc>
  return n;
}
   b4816:	4420      	add	r0, r4
   b4818:	bd38      	pop	{r3, r4, r5, pc}

000b481a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b481a:	b538      	push	{r3, r4, r5, lr}
   b481c:	4605      	mov	r5, r0
  return write(str);
   b481e:	f7ff ffdb 	bl	b47d8 <_ZN5Print5writeEPKc>
   b4822:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4824:	4628      	mov	r0, r5
   b4826:	f7ff ffec 	bl	b4802 <_ZN5Print7printlnEv>
  return n;
}
   b482a:	4420      	add	r0, r4
   b482c:	bd38      	pop	{r3, r4, r5, pc}

000b482e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b482e:	b530      	push	{r4, r5, lr}
   b4830:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4832:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4834:	2a01      	cmp	r2, #1
  *str = '\0';
   b4836:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b483a:	bf98      	it	ls
   b483c:	220a      	movls	r2, #10
   b483e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4840:	460d      	mov	r5, r1
   b4842:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4846:	fb01 5312 	mls	r3, r1, r2, r5
   b484a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b484e:	2b09      	cmp	r3, #9
   b4850:	bf94      	ite	ls
   b4852:	3330      	addls	r3, #48	; 0x30
   b4854:	3337      	addhi	r3, #55	; 0x37
   b4856:	b2db      	uxtb	r3, r3
  } while(n);
   b4858:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b485a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b485e:	d9ef      	bls.n	b4840 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4860:	4621      	mov	r1, r4
   b4862:	f7ff ffb9 	bl	b47d8 <_ZN5Print5writeEPKc>
}
   b4866:	b00b      	add	sp, #44	; 0x2c
   b4868:	bd30      	pop	{r4, r5, pc}

000b486a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b486a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b486e:	b086      	sub	sp, #24
   b4870:	af00      	add	r7, sp, #0
   b4872:	4605      	mov	r5, r0
   b4874:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4876:	1d38      	adds	r0, r7, #4
   b4878:	2114      	movs	r1, #20
{
   b487a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b487c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b487e:	f7ff ff1b 	bl	b46b8 <vsnprintf>

    if (n<bufsize)
   b4882:	2813      	cmp	r0, #19
   b4884:	d80e      	bhi.n	b48a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4886:	1d39      	adds	r1, r7, #4
   b4888:	4628      	mov	r0, r5
   b488a:	f7ff ffa5 	bl	b47d8 <_ZN5Print5writeEPKc>
   b488e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4890:	b11e      	cbz	r6, b489a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4892:	4628      	mov	r0, r5
   b4894:	f7ff ffb5 	bl	b4802 <_ZN5Print7printlnEv>
   b4898:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b489a:	4620      	mov	r0, r4
   b489c:	3718      	adds	r7, #24
   b489e:	46bd      	mov	sp, r7
   b48a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b48a4:	f100 0308 	add.w	r3, r0, #8
   b48a8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b48ac:	46e8      	mov	r8, sp
        char bigger[n+1];
   b48ae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b48b2:	4622      	mov	r2, r4
   b48b4:	1c41      	adds	r1, r0, #1
   b48b6:	683b      	ldr	r3, [r7, #0]
   b48b8:	4668      	mov	r0, sp
   b48ba:	f7ff fefd 	bl	b46b8 <vsnprintf>
  return write(str);
   b48be:	4669      	mov	r1, sp
   b48c0:	4628      	mov	r0, r5
   b48c2:	f7ff ff89 	bl	b47d8 <_ZN5Print5writeEPKc>
   b48c6:	4604      	mov	r4, r0
   b48c8:	46c5      	mov	sp, r8
   b48ca:	e7e1      	b.n	b4890 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b48cc <_ZN6Stream9timedPeekEv>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
   b48cc:	b510      	push	{r4, lr}
   b48ce:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b48d0:	f7ff fd5e 	bl	b4390 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b48d4:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   b48d6:	6823      	ldr	r3, [r4, #0]
   b48d8:	4620      	mov	r0, r4
   b48da:	699b      	ldr	r3, [r3, #24]
   b48dc:	4798      	blx	r3
    if (c >= 0) return c;
   b48de:	2800      	cmp	r0, #0
   b48e0:	da08      	bge.n	b48f4 <_ZN6Stream9timedPeekEv+0x28>
   b48e2:	f7ff fd55 	bl	b4390 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b48e6:	68e3      	ldr	r3, [r4, #12]
   b48e8:	1ac0      	subs	r0, r0, r3
   b48ea:	68a3      	ldr	r3, [r4, #8]
   b48ec:	4298      	cmp	r0, r3
   b48ee:	d3f2      	bcc.n	b48d6 <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   b48f0:	f04f 30ff 	mov.w	r0, #4294967295
}
   b48f4:	bd10      	pop	{r4, pc}

000b48f6 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   b48f6:	b510      	push	{r4, lr}
   b48f8:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   b48fa:	4620      	mov	r0, r4
   b48fc:	f7ff ffe6 	bl	b48cc <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   b4900:	2800      	cmp	r0, #0
   b4902:	db0a      	blt.n	b491a <_ZN6Stream13peekNextDigitEv+0x24>
   b4904:	282d      	cmp	r0, #45	; 0x2d
   b4906:	d008      	beq.n	b491a <_ZN6Stream13peekNextDigitEv+0x24>
   b4908:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b490c:	2b09      	cmp	r3, #9
   b490e:	d904      	bls.n	b491a <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   b4910:	6823      	ldr	r3, [r4, #0]
   b4912:	4620      	mov	r0, r4
   b4914:	695b      	ldr	r3, [r3, #20]
   b4916:	4798      	blx	r3
    c = timedPeek();
   b4918:	e7ef      	b.n	b48fa <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   b491a:	bd10      	pop	{r4, pc}

000b491c <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   b491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4920:	4605      	mov	r5, r0
   b4922:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   b4924:	f7ff ffe7 	bl	b48f6 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4928:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   b492a:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   b492e:	db1c      	blt.n	b496a <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   b4930:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   b4932:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   b4936:	4286      	cmp	r6, r0
   b4938:	d008      	beq.n	b494c <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   b493a:	282d      	cmp	r0, #45	; 0x2d
   b493c:	d018      	beq.n	b4970 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   b493e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4942:	2b09      	cmp	r3, #9
   b4944:	d802      	bhi.n	b494c <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   b4946:	fb08 0404 	mla	r4, r8, r4, r0
   b494a:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   b494c:	682b      	ldr	r3, [r5, #0]
   b494e:	4628      	mov	r0, r5
   b4950:	695b      	ldr	r3, [r3, #20]
   b4952:	4798      	blx	r3
    c = timedPeek();
   b4954:	4628      	mov	r0, r5
   b4956:	f7ff ffb9 	bl	b48cc <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   b495a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b495e:	2b09      	cmp	r3, #9
   b4960:	d9e9      	bls.n	b4936 <_ZN6Stream8parseIntEc+0x1a>
   b4962:	4286      	cmp	r6, r0
   b4964:	d0f2      	beq.n	b494c <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   b4966:	b107      	cbz	r7, b496a <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   b4968:	4264      	negs	r4, r4
  return value;
}
   b496a:	4620      	mov	r0, r4
   b496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   b4970:	2701      	movs	r7, #1
   b4972:	e7eb      	b.n	b494c <_ZN6Stream8parseIntEc+0x30>

000b4974 <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   b4974:	2101      	movs	r1, #1
   b4976:	f7ff bfd1 	b.w	b491c <_ZN6Stream8parseIntEc>
   b497a:	0000      	movs	r0, r0
   b497c:	0000      	movs	r0, r0
	...

000b4980 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   b4980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4984:	ed2d 8b02 	vpush	{d8}
   b4988:	4605      	mov	r5, r0
   b498a:	460e      	mov	r6, r1
  bool isNegative = false;
  bool isFraction = false;
  long value = 0;
  float fraction = 1.0;

  int c = peekNextDigit();
   b498c:	f7ff ffb3 	bl	b48f6 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4990:	2800      	cmp	r0, #0
   b4992:	db47      	blt.n	b4a24 <_ZN6Stream10parseFloatEc+0xa4>
    } else if (c == '.') {
      isFraction = true;
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
   b4994:	f20f 099c 	addw	r9, pc, #156	; 0x9c
   b4998:	e9d9 8900 	ldrd	r8, r9, [r9]
  long value = 0;
   b499c:	2400      	movs	r4, #0
  float fraction = 1.0;
   b499e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  bool isFraction = false;
   b49a2:	4627      	mov	r7, r4
  bool isNegative = false;
   b49a4:	46a2      	mov	sl, r4
      value = value * 10 + c - '0';
   b49a6:	f04f 0b0a 	mov.w	fp, #10
    if(c == skipChar) {
   b49aa:	4286      	cmp	r6, r0
   b49ac:	d017      	beq.n	b49de <_ZN6Stream10parseFloatEc+0x5e>
    } else if(c == '-') {
   b49ae:	282d      	cmp	r0, #45	; 0x2d
   b49b0:	d033      	beq.n	b4a1a <_ZN6Stream10parseFloatEc+0x9a>
    } else if (c == '.') {
   b49b2:	282e      	cmp	r0, #46	; 0x2e
   b49b4:	d034      	beq.n	b4a20 <_ZN6Stream10parseFloatEc+0xa0>
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
   b49b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b49ba:	2b09      	cmp	r3, #9
   b49bc:	d80f      	bhi.n	b49de <_ZN6Stream10parseFloatEc+0x5e>
      value = value * 10 + c - '0';
   b49be:	fb0b 0404 	mla	r4, fp, r4, r0
   b49c2:	3c30      	subs	r4, #48	; 0x30
      if(isFraction)
   b49c4:	b15f      	cbz	r7, b49de <_ZN6Stream10parseFloatEc+0x5e>
         fraction *= 0.1;
   b49c6:	ee18 0a10 	vmov	r0, s16
   b49ca:	f000 fde3 	bl	b5594 <__aeabi_f2d>
   b49ce:	4642      	mov	r2, r8
   b49d0:	464b      	mov	r3, r9
   b49d2:	f000 fe37 	bl	b5644 <__aeabi_dmul>
   b49d6:	f001 f847 	bl	b5a68 <__aeabi_d2f>
   b49da:	ee08 0a10 	vmov	s16, r0
    }
    read();  // consume the character we got with peek
   b49de:	682b      	ldr	r3, [r5, #0]
   b49e0:	4628      	mov	r0, r5
   b49e2:	695b      	ldr	r3, [r3, #20]
   b49e4:	4798      	blx	r3
    c = timedPeek();
   b49e6:	4628      	mov	r0, r5
   b49e8:	f7ff ff70 	bl	b48cc <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
   b49ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b49f0:	2b09      	cmp	r3, #9
   b49f2:	d9da      	bls.n	b49aa <_ZN6Stream10parseFloatEc+0x2a>
   b49f4:	282e      	cmp	r0, #46	; 0x2e
   b49f6:	d0d8      	beq.n	b49aa <_ZN6Stream10parseFloatEc+0x2a>
   b49f8:	4286      	cmp	r6, r0
   b49fa:	d0f0      	beq.n	b49de <_ZN6Stream10parseFloatEc+0x5e>

  if(isNegative)
   b49fc:	f1ba 0f00 	cmp.w	sl, #0
   b4a00:	d000      	beq.n	b4a04 <_ZN6Stream10parseFloatEc+0x84>
    value = -value;
   b4a02:	4264      	negs	r4, r4
  if(isFraction)
    return value * fraction;
   b4a04:	ee07 4a90 	vmov	s15, r4
   b4a08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  if(isFraction)
   b4a0c:	b10f      	cbz	r7, b4a12 <_ZN6Stream10parseFloatEc+0x92>
    return value * fraction;
   b4a0e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
   b4a12:	ecbd 8b02 	vpop	{d8}
   b4a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      isNegative = true;
   b4a1a:	f04f 0a01 	mov.w	sl, #1
   b4a1e:	e7de      	b.n	b49de <_ZN6Stream10parseFloatEc+0x5e>
      isFraction = true;
   b4a20:	2701      	movs	r7, #1
   b4a22:	e7dc      	b.n	b49de <_ZN6Stream10parseFloatEc+0x5e>
    return 0; // zero returned if timeout
   b4a24:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4a30 <_ZN6Stream10parseFloatEc+0xb0>
   b4a28:	e7f3      	b.n	b4a12 <_ZN6Stream10parseFloatEc+0x92>
   b4a2a:	bf00      	nop
   b4a2c:	f3af 8000 	nop.w
   b4a30:	00000000 	.word	0x00000000
   b4a34:	9999999a 	.word	0x9999999a
   b4a38:	3fb99999 	.word	0x3fb99999

000b4a3c <_ZN6Stream10parseFloatEv>:
  return parseFloat(NO_SKIP_CHAR);
   b4a3c:	2101      	movs	r1, #1
   b4a3e:	f7ff bf9f 	b.w	b4980 <_ZN6Stream10parseFloatEc>
	...

000b4a44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4a44:	4b01      	ldr	r3, [pc, #4]	; (b4a4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4a46:	4a02      	ldr	r2, [pc, #8]	; (b4a50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4a48:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4a4a:	4770      	bx	lr
   b4a4c:	2003e6ac 	.word	0x2003e6ac
   b4a50:	000b5d78 	.word	0x000b5d78

000b4a54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4a54:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4a56:	681a      	ldr	r2, [r3, #0]
   b4a58:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4a5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4a5c:	4770      	bx	lr
   b4a5e:	bf00      	nop
   b4a60:	2003e5f8 	.word	0x2003e5f8
   b4a64:	2003e6b0 	.word	0x2003e6b0

000b4a68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4a68:	2100      	movs	r1, #0
   b4a6a:	f7ff bd81 	b.w	b4570 <system_delay_ms>
	...

000b4a70 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4a70:	4b01      	ldr	r3, [pc, #4]	; (b4a78 <_GLOBAL__sub_I_RGB+0x8>)
   b4a72:	2200      	movs	r2, #0
   b4a74:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4a76:	4770      	bx	lr
   b4a78:	2003e6b4 	.word	0x2003e6b4

000b4a7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4a7c:	4b01      	ldr	r3, [pc, #4]	; (b4a84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4a7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4a80:	4770      	bx	lr
   b4a82:	bf00      	nop
   b4a84:	2003e5fc 	.word	0x2003e5fc

000b4a88 <serialEventRun>:
{
   b4a88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4a8a:	4b0b      	ldr	r3, [pc, #44]	; (b4ab8 <serialEventRun+0x30>)
   b4a8c:	b143      	cbz	r3, b4aa0 <serialEventRun+0x18>
   b4a8e:	f000 f96b 	bl	b4d68 <_Z16_fetch_usbserialv>
   b4a92:	6803      	ldr	r3, [r0, #0]
   b4a94:	691b      	ldr	r3, [r3, #16]
   b4a96:	4798      	blx	r3
   b4a98:	2800      	cmp	r0, #0
   b4a9a:	dd01      	ble.n	b4aa0 <serialEventRun+0x18>
        serialEvent();
   b4a9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4aa0:	4b06      	ldr	r3, [pc, #24]	; (b4abc <serialEventRun+0x34>)
   b4aa2:	b143      	cbz	r3, b4ab6 <serialEventRun+0x2e>
   b4aa4:	f000 fbac 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b4aa8:	6803      	ldr	r3, [r0, #0]
   b4aaa:	691b      	ldr	r3, [r3, #16]
   b4aac:	4798      	blx	r3
   b4aae:	2800      	cmp	r0, #0
   b4ab0:	dd01      	ble.n	b4ab6 <serialEventRun+0x2e>
        serialEvent1();
   b4ab2:	f3af 8000 	nop.w
}
   b4ab6:	bd08      	pop	{r3, pc}
	...

000b4ac0 <_post_loop>:
{
   b4ac0:	b508      	push	{r3, lr}
	serialEventRun();
   b4ac2:	f7ff ffe1 	bl	b4a88 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4ac6:	f7ff fc63 	bl	b4390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4aca:	4b01      	ldr	r3, [pc, #4]	; (b4ad0 <_post_loop+0x10>)
   b4acc:	6018      	str	r0, [r3, #0]
}
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	2003e740 	.word	0x2003e740

000b4ad4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ad4:	4805      	ldr	r0, [pc, #20]	; (b4aec <_Z33system_initialize_user_backup_ramv+0x18>)
   b4ad6:	4a06      	ldr	r2, [pc, #24]	; (b4af0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4ad8:	4906      	ldr	r1, [pc, #24]	; (b4af4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4ada:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4adc:	1a12      	subs	r2, r2, r0
   b4ade:	f001 f819 	bl	b5b14 <memcpy>
    __backup_sram_signature = signature;
   b4ae2:	4b05      	ldr	r3, [pc, #20]	; (b4af8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4ae4:	4a05      	ldr	r2, [pc, #20]	; (b4afc <_Z33system_initialize_user_backup_ramv+0x28>)
   b4ae6:	601a      	str	r2, [r3, #0]
}
   b4ae8:	bd08      	pop	{r3, pc}
   b4aea:	bf00      	nop
   b4aec:	2003f400 	.word	0x2003f400
   b4af0:	2003f404 	.word	0x2003f404
   b4af4:	000b5f94 	.word	0x000b5f94
   b4af8:	2003f400 	.word	0x2003f400
   b4afc:	9a271c1e 	.word	0x9a271c1e

000b4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4b00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4b02:	2300      	movs	r3, #0
   b4b04:	9300      	str	r3, [sp, #0]
   b4b06:	461a      	mov	r2, r3
   b4b08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4b0c:	f7ff fd4a 	bl	b45a4 <system_ctrl_set_result>
}
   b4b10:	b003      	add	sp, #12
   b4b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4b18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4b18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4b1a:	8843      	ldrh	r3, [r0, #2]
   b4b1c:	2b0a      	cmp	r3, #10
   b4b1e:	d008      	beq.n	b4b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4b20:	2b50      	cmp	r3, #80	; 0x50
   b4b22:	d10b      	bne.n	b4b3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4b24:	4b09      	ldr	r3, [pc, #36]	; (b4b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4b26:	681b      	ldr	r3, [r3, #0]
   b4b28:	b14b      	cbz	r3, b4b3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4b2a:	b003      	add	sp, #12
   b4b2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4b30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4b32:	f7ff ffe5 	bl	b4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4b36:	b003      	add	sp, #12
   b4b38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4b3c:	2300      	movs	r3, #0
   b4b3e:	9300      	str	r3, [sp, #0]
   b4b40:	461a      	mov	r2, r3
   b4b42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4b46:	f7ff fd2d 	bl	b45a4 <system_ctrl_set_result>
}
   b4b4a:	e7f4      	b.n	b4b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4b4c:	2003e6c8 	.word	0x2003e6c8

000b4b50 <module_user_init_hook>:
{
   b4b50:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4b52:	4812      	ldr	r0, [pc, #72]	; (b4b9c <module_user_init_hook+0x4c>)
   b4b54:	2100      	movs	r1, #0
   b4b56:	f7ff fdbf 	bl	b46d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4b5a:	4b11      	ldr	r3, [pc, #68]	; (b4ba0 <module_user_init_hook+0x50>)
   b4b5c:	681a      	ldr	r2, [r3, #0]
   b4b5e:	4b11      	ldr	r3, [pc, #68]	; (b4ba4 <module_user_init_hook+0x54>)
   b4b60:	429a      	cmp	r2, r3
   b4b62:	4b11      	ldr	r3, [pc, #68]	; (b4ba8 <module_user_init_hook+0x58>)
   b4b64:	bf0c      	ite	eq
   b4b66:	2201      	moveq	r2, #1
   b4b68:	2200      	movne	r2, #0
   b4b6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4b6c:	d001      	beq.n	b4b72 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4b6e:	f7ff ffb1 	bl	b4ad4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4b72:	f7ff fc05 	bl	b4380 <HAL_RNG_GetRandomNumber>
   b4b76:	4604      	mov	r4, r0
    srand(seed);
   b4b78:	f000 ffe2 	bl	b5b40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4b7c:	4b0b      	ldr	r3, [pc, #44]	; (b4bac <module_user_init_hook+0x5c>)
   b4b7e:	b113      	cbz	r3, b4b86 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4b80:	4620      	mov	r0, r4
   b4b82:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4b86:	2100      	movs	r1, #0
   b4b88:	4808      	ldr	r0, [pc, #32]	; (b4bac <module_user_init_hook+0x5c>)
   b4b8a:	f7ff fd7d 	bl	b4688 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4b92:	4807      	ldr	r0, [pc, #28]	; (b4bb0 <module_user_init_hook+0x60>)
   b4b94:	2100      	movs	r1, #0
   b4b96:	f7ff bcfb 	b.w	b4590 <system_ctrl_set_app_request_handler>
   b4b9a:	bf00      	nop
   b4b9c:	000b4a7d 	.word	0x000b4a7d
   b4ba0:	2003f400 	.word	0x2003f400
   b4ba4:	9a271c1e 	.word	0x9a271c1e
   b4ba8:	2003e6c4 	.word	0x2003e6c4
   b4bac:	00000000 	.word	0x00000000
   b4bb0:	000b4b19 	.word	0x000b4b19

000b4bb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4bb4:	4770      	bx	lr

000b4bb6 <_ZN9IPAddressD0Ev>:
   b4bb6:	b510      	push	{r4, lr}
   b4bb8:	2118      	movs	r1, #24
   b4bba:	4604      	mov	r4, r0
   b4bbc:	f7ff fa6f 	bl	b409e <_ZdlPvj>
   b4bc0:	4620      	mov	r0, r4
   b4bc2:	bd10      	pop	{r4, pc}

000b4bc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4bc6:	7d03      	ldrb	r3, [r0, #20]
   b4bc8:	2b06      	cmp	r3, #6
{
   b4bca:	b08d      	sub	sp, #52	; 0x34
   b4bcc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4bce:	f100 0704 	add.w	r7, r0, #4
   b4bd2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4bd6:	d012      	beq.n	b4bfe <_ZNK9IPAddress7printToER5Print+0x3a>
   b4bd8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4bdc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4be0:	220a      	movs	r2, #10
   b4be2:	4630      	mov	r0, r6
   b4be4:	f7ff fe23 	bl	b482e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4be8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4bea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4bec:	d019      	beq.n	b4c22 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4bee:	2c00      	cmp	r4, #0
   b4bf0:	d0f4      	beq.n	b4bdc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4bf2:	212e      	movs	r1, #46	; 0x2e
   b4bf4:	4630      	mov	r0, r6
   b4bf6:	f7ff fe01 	bl	b47fc <_ZN5Print5printEc>
   b4bfa:	4404      	add	r4, r0
   b4bfc:	e7ee      	b.n	b4bdc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4bfe:	232f      	movs	r3, #47	; 0x2f
   b4c00:	466a      	mov	r2, sp
   b4c02:	4639      	mov	r1, r7
   b4c04:	200a      	movs	r0, #10
		buf[0] = 0;
   b4c06:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c0a:	f7ff fbd1 	bl	b43b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4c0e:	4668      	mov	r0, sp
   b4c10:	f000 ffc4 	bl	b5b9c <strlen>
   b4c14:	6833      	ldr	r3, [r6, #0]
   b4c16:	4602      	mov	r2, r0
   b4c18:	68db      	ldr	r3, [r3, #12]
   b4c1a:	4669      	mov	r1, sp
   b4c1c:	4630      	mov	r0, r6
   b4c1e:	4798      	blx	r3
   b4c20:	4604      	mov	r4, r0
    }
    return n;
}
   b4c22:	4620      	mov	r0, r4
   b4c24:	b00d      	add	sp, #52	; 0x34
   b4c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4c28 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4c28:	b510      	push	{r4, lr}
   b4c2a:	4b05      	ldr	r3, [pc, #20]	; (b4c40 <_ZN9IPAddressC1Ev+0x18>)
   b4c2c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4c2e:	2211      	movs	r2, #17
   b4c30:	f840 3b04 	str.w	r3, [r0], #4
   b4c34:	2100      	movs	r1, #0
   b4c36:	f000 ff7b 	bl	b5b30 <memset>
}
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	bd10      	pop	{r4, pc}
   b4c3e:	bf00      	nop
   b4c40:	000b5da0 	.word	0x000b5da0

000b4c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4c44:	4603      	mov	r3, r0
   b4c46:	4a07      	ldr	r2, [pc, #28]	; (b4c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4c48:	b510      	push	{r4, lr}
   b4c4a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4c4e:	f101 0210 	add.w	r2, r1, #16
   b4c52:	f851 4b04 	ldr.w	r4, [r1], #4
   b4c56:	f843 4b04 	str.w	r4, [r3], #4
   b4c5a:	4291      	cmp	r1, r2
   b4c5c:	d1f9      	bne.n	b4c52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4c5e:	780a      	ldrb	r2, [r1, #0]
   b4c60:	701a      	strb	r2, [r3, #0]
}
   b4c62:	bd10      	pop	{r4, pc}
   b4c64:	000b5da0 	.word	0x000b5da0

000b4c68 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4c68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4c6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4c6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4c72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4c76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4c7a:	2304      	movs	r3, #4
   b4c7c:	6041      	str	r1, [r0, #4]
   b4c7e:	7503      	strb	r3, [r0, #20]
}
   b4c80:	bd10      	pop	{r4, pc}
	...

000b4c84 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4c84:	b507      	push	{r0, r1, r2, lr}
   b4c86:	4b06      	ldr	r3, [pc, #24]	; (b4ca0 <_ZN9IPAddressC1EPKh+0x1c>)
   b4c88:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4c8a:	78cb      	ldrb	r3, [r1, #3]
   b4c8c:	9300      	str	r3, [sp, #0]
   b4c8e:	788b      	ldrb	r3, [r1, #2]
   b4c90:	784a      	ldrb	r2, [r1, #1]
   b4c92:	7809      	ldrb	r1, [r1, #0]
   b4c94:	f7ff ffe8 	bl	b4c68 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4c98:	b003      	add	sp, #12
   b4c9a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c9e:	bf00      	nop
   b4ca0:	000b5da0 	.word	0x000b5da0

000b4ca4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ca4:	7441      	strb	r1, [r0, #17]
}
   b4ca6:	4770      	bx	lr

000b4ca8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ca8:	4770      	bx	lr

000b4caa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4caa:	4770      	bx	lr

000b4cac <_ZN9USBSerial4readEv>:
{
   b4cac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4cae:	2100      	movs	r1, #0
   b4cb0:	7c00      	ldrb	r0, [r0, #16]
   b4cb2:	f7ff fc35 	bl	b4520 <HAL_USB_USART_Receive_Data>
}
   b4cb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4cba:	bd08      	pop	{r3, pc}

000b4cbc <_ZN9USBSerial4peekEv>:
{
   b4cbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4cbe:	2101      	movs	r1, #1
   b4cc0:	7c00      	ldrb	r0, [r0, #16]
   b4cc2:	f7ff fc2d 	bl	b4520 <HAL_USB_USART_Receive_Data>
}
   b4cc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4cca:	bd08      	pop	{r3, pc}

000b4ccc <_ZN9USBSerial17availableForWriteEv>:
{
   b4ccc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4cce:	7c00      	ldrb	r0, [r0, #16]
   b4cd0:	f7ff fc1e 	bl	b4510 <HAL_USB_USART_Available_Data_For_Write>
}
   b4cd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cd8:	bd08      	pop	{r3, pc}

000b4cda <_ZN9USBSerial9availableEv>:
{
   b4cda:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4cdc:	7c00      	ldrb	r0, [r0, #16]
   b4cde:	f7ff fc0f 	bl	b4500 <HAL_USB_USART_Available_Data>
}
   b4ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ce6:	bd08      	pop	{r3, pc}

000b4ce8 <_ZN9USBSerial5writeEh>:
{
   b4ce8:	b513      	push	{r0, r1, r4, lr}
   b4cea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cec:	7c00      	ldrb	r0, [r0, #16]
{
   b4cee:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cf0:	f7ff fc0e 	bl	b4510 <HAL_USB_USART_Available_Data_For_Write>
   b4cf4:	2800      	cmp	r0, #0
   b4cf6:	9901      	ldr	r1, [sp, #4]
   b4cf8:	dc01      	bgt.n	b4cfe <_ZN9USBSerial5writeEh+0x16>
   b4cfa:	7c60      	ldrb	r0, [r4, #17]
   b4cfc:	b120      	cbz	r0, b4d08 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4cfe:	7c20      	ldrb	r0, [r4, #16]
   b4d00:	f7ff fc16 	bl	b4530 <HAL_USB_USART_Send_Data>
   b4d04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4d08:	b002      	add	sp, #8
   b4d0a:	bd10      	pop	{r4, pc}

000b4d0c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4d0c:	7c00      	ldrb	r0, [r0, #16]
   b4d0e:	f7ff bc17 	b.w	b4540 <HAL_USB_USART_Flush_Data>

000b4d12 <_ZN9USBSerialD0Ev>:
   b4d12:	b510      	push	{r4, lr}
   b4d14:	2114      	movs	r1, #20
   b4d16:	4604      	mov	r4, r0
   b4d18:	f7ff f9c1 	bl	b409e <_ZdlPvj>
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	bd10      	pop	{r4, pc}

000b4d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4d20:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d26:	4604      	mov	r4, r0
   b4d28:	4608      	mov	r0, r1
   b4d2a:	2100      	movs	r1, #0
   b4d2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d30:	4b04      	ldr	r3, [pc, #16]	; (b4d44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4d32:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d34:	2301      	movs	r3, #1
  _serial = serial;
   b4d36:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d38:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4d3a:	4611      	mov	r1, r2
   b4d3c:	f7ff fbd0 	bl	b44e0 <HAL_USB_USART_Init>
}
   b4d40:	4620      	mov	r0, r4
   b4d42:	bd10      	pop	{r4, pc}
   b4d44:	000b5db4 	.word	0x000b5db4

000b4d48 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4d48:	7c00      	ldrb	r0, [r0, #16]
   b4d4a:	2200      	movs	r2, #0
   b4d4c:	f7ff bbd0 	b.w	b44f0 <HAL_USB_USART_Begin>

000b4d50 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b4d50:	7c00      	ldrb	r0, [r0, #16]
   b4d52:	f7ff bbfd 	b.w	b4550 <HAL_USB_USART_Is_Connected>

000b4d56 <_Z19acquireSerialBufferv>:
{
   b4d56:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4d58:	2214      	movs	r2, #20
{
   b4d5a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4d5c:	2100      	movs	r1, #0
   b4d5e:	f000 fee7 	bl	b5b30 <memset>
}
   b4d62:	4620      	mov	r0, r4
   b4d64:	bd10      	pop	{r4, pc}
	...

000b4d68 <_Z16_fetch_usbserialv>:
{
   b4d68:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d6a:	4c0f      	ldr	r4, [pc, #60]	; (b4da8 <_Z16_fetch_usbserialv+0x40>)
{
   b4d6c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4d6e:	a803      	add	r0, sp, #12
   b4d70:	f7ff fff1 	bl	b4d56 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d74:	7821      	ldrb	r1, [r4, #0]
   b4d76:	f3bf 8f5b 	dmb	ish
   b4d7a:	f011 0101 	ands.w	r1, r1, #1
   b4d7e:	d10f      	bne.n	b4da0 <_Z16_fetch_usbserialv+0x38>
   b4d80:	4620      	mov	r0, r4
   b4d82:	9101      	str	r1, [sp, #4]
   b4d84:	f7ff f98d 	bl	b40a2 <__cxa_guard_acquire>
   b4d88:	9901      	ldr	r1, [sp, #4]
   b4d8a:	b148      	cbz	r0, b4da0 <_Z16_fetch_usbserialv+0x38>
   b4d8c:	aa03      	add	r2, sp, #12
   b4d8e:	4807      	ldr	r0, [pc, #28]	; (b4dac <_Z16_fetch_usbserialv+0x44>)
   b4d90:	f7ff ffc6 	bl	b4d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4d94:	4620      	mov	r0, r4
   b4d96:	f7ff f989 	bl	b40ac <__cxa_guard_release>
   b4d9a:	4805      	ldr	r0, [pc, #20]	; (b4db0 <_Z16_fetch_usbserialv+0x48>)
   b4d9c:	f000 feb4 	bl	b5b08 <atexit>
	return _usbserial;
}
   b4da0:	4802      	ldr	r0, [pc, #8]	; (b4dac <_Z16_fetch_usbserialv+0x44>)
   b4da2:	b008      	add	sp, #32
   b4da4:	bd10      	pop	{r4, pc}
   b4da6:	bf00      	nop
   b4da8:	2003e6cc 	.word	0x2003e6cc
   b4dac:	2003e6d0 	.word	0x2003e6d0
   b4db0:	000b4ca9 	.word	0x000b4ca9

000b4db4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4db4:	2200      	movs	r2, #0
   b4db6:	6840      	ldr	r0, [r0, #4]
   b4db8:	4611      	mov	r1, r2
   b4dba:	f7ff bc15 	b.w	b45e8 <network_ready>

000b4dbe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4dbe:	2200      	movs	r2, #0
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	4611      	mov	r1, r2
   b4dc4:	f7ff bc30 	b.w	b4628 <network_listening>

000b4dc8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dc8:	2200      	movs	r2, #0
   b4dca:	6840      	ldr	r0, [r0, #4]
   b4dcc:	4611      	mov	r1, r2
   b4dce:	f7ff bc3b 	b.w	b4648 <network_get_listen_timeout>

000b4dd2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4dd2:	6840      	ldr	r0, [r0, #4]
   b4dd4:	2200      	movs	r2, #0
   b4dd6:	f7ff bc2f 	b.w	b4638 <network_set_listen_timeout>

000b4dda <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4dda:	6840      	ldr	r0, [r0, #4]
   b4ddc:	2200      	movs	r2, #0
   b4dde:	f081 0101 	eor.w	r1, r1, #1
   b4de2:	f7ff bc19 	b.w	b4618 <network_listen>

000b4de6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4de6:	2300      	movs	r3, #0
   b4de8:	6840      	ldr	r0, [r0, #4]
   b4dea:	461a      	mov	r2, r3
   b4dec:	4619      	mov	r1, r3
   b4dee:	f7ff bc0b 	b.w	b4608 <network_off>

000b4df2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4df2:	2300      	movs	r3, #0
   b4df4:	6840      	ldr	r0, [r0, #4]
   b4df6:	461a      	mov	r2, r3
   b4df8:	4619      	mov	r1, r3
   b4dfa:	f7ff bbfd 	b.w	b45f8 <network_on>

000b4dfe <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dfe:	2200      	movs	r2, #0
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	4611      	mov	r1, r2
   b4e04:	f7ff bbe0 	b.w	b45c8 <network_connecting>

000b4e08 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e08:	6840      	ldr	r0, [r0, #4]
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	2102      	movs	r1, #2
   b4e0e:	f7ff bbe3 	b.w	b45d8 <network_disconnect>

000b4e12 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e12:	2300      	movs	r3, #0
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	461a      	mov	r2, r3
   b4e18:	f7ff bbce 	b.w	b45b8 <network_connect>

000b4e1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4e1c:	4b08      	ldr	r3, [pc, #32]	; (b4e40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4e1e:	b510      	push	{r4, lr}
   b4e20:	2428      	movs	r4, #40	; 0x28
   b4e22:	4622      	mov	r2, r4
   b4e24:	4618      	mov	r0, r3
   b4e26:	2100      	movs	r1, #0
   b4e28:	f000 fe82 	bl	b5b30 <memset>
   b4e2c:	4b05      	ldr	r3, [pc, #20]	; (b4e44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4e2e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4e30:	f04f 32ff 	mov.w	r2, #4294967295
   b4e34:	6042      	str	r2, [r0, #4]
   b4e36:	2204      	movs	r2, #4
   b4e38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4e3a:	4a03      	ldr	r2, [pc, #12]	; (b4e48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4e3c:	601a      	str	r2, [r3, #0]
   b4e3e:	bd10      	pop	{r4, pc}
   b4e40:	2003e6ec 	.word	0x2003e6ec
   b4e44:	2003e6e4 	.word	0x2003e6e4
   b4e48:	000b5de4 	.word	0x000b5de4

000b4e4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4e4c:	4770      	bx	lr

000b4e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e4e:	7441      	strb	r1, [r0, #17]
}
   b4e50:	4770      	bx	lr

000b4e52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4e52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4e54:	7c00      	ldrb	r0, [r0, #16]
   b4e56:	f7ff fae3 	bl	b4420 <hal_usart_available_data_for_write>
}
   b4e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e5e:	bd08      	pop	{r3, pc}

000b4e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4e62:	7c00      	ldrb	r0, [r0, #16]
   b4e64:	f7ff fab4 	bl	b43d0 <hal_usart_available>
}
   b4e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e6c:	bd08      	pop	{r3, pc}

000b4e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4e70:	7c00      	ldrb	r0, [r0, #16]
   b4e72:	f7ff fabd 	bl	b43f0 <hal_usart_peek>
}
   b4e76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e7a:	bd08      	pop	{r3, pc}

000b4e7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4e7e:	7c00      	ldrb	r0, [r0, #16]
   b4e80:	f7ff faae 	bl	b43e0 <hal_usart_read>
}
   b4e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e88:	bd08      	pop	{r3, pc}

000b4e8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4e8a:	7c00      	ldrb	r0, [r0, #16]
   b4e8c:	f7ff bab8 	b.w	b4400 <hal_usart_flush>

000b4e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4e92:	7c45      	ldrb	r5, [r0, #17]
{
   b4e94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4e96:	b12d      	cbz	r5, b4ea4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4e9a:	b003      	add	sp, #12
   b4e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4ea0:	f7ff ba8e 	b.w	b43c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ea4:	7c00      	ldrb	r0, [r0, #16]
   b4ea6:	9101      	str	r1, [sp, #4]
   b4ea8:	f7ff faba 	bl	b4420 <hal_usart_available_data_for_write>
   b4eac:	2800      	cmp	r0, #0
   b4eae:	9901      	ldr	r1, [sp, #4]
   b4eb0:	dcf2      	bgt.n	b4e98 <_ZN11USARTSerial5writeEh+0x8>
}
   b4eb2:	4628      	mov	r0, r5
   b4eb4:	b003      	add	sp, #12
   b4eb6:	bd30      	pop	{r4, r5, pc}

000b4eb8 <_ZN11USARTSerialD0Ev>:
   b4eb8:	b510      	push	{r4, lr}
   b4eba:	2114      	movs	r1, #20
   b4ebc:	4604      	mov	r4, r0
   b4ebe:	f7ff f8ee 	bl	b409e <_ZdlPvj>
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	bd10      	pop	{r4, pc}
	...

000b4ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4ec8:	b510      	push	{r4, lr}
   b4eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ece:	4604      	mov	r4, r0
   b4ed0:	4608      	mov	r0, r1
   b4ed2:	4611      	mov	r1, r2
   b4ed4:	2200      	movs	r2, #0
   b4ed6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4eda:	4b04      	ldr	r3, [pc, #16]	; (b4eec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4edc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ede:	2301      	movs	r3, #1
  _serial = serial;
   b4ee0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ee2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4ee4:	f7ff faac 	bl	b4440 <hal_usart_init_ex>
}
   b4ee8:	4620      	mov	r0, r4
   b4eea:	bd10      	pop	{r4, pc}
   b4eec:	000b5e20 	.word	0x000b5e20

000b4ef0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b4ef0:	7c00      	ldrb	r0, [r0, #16]
   b4ef2:	2300      	movs	r3, #0
   b4ef4:	f7ff ba9c 	b.w	b4430 <hal_usart_begin_config>

000b4ef8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b4ef8:	2200      	movs	r2, #0
   b4efa:	f7ff bff9 	b.w	b4ef0 <_ZN11USARTSerial5beginEmm>

000b4efe <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4efe:	4770      	bx	lr

000b4f00 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f02:	4606      	mov	r6, r0
   b4f04:	4615      	mov	r5, r2
   b4f06:	460c      	mov	r4, r1
   b4f08:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4f0a:	42bc      	cmp	r4, r7
   b4f0c:	d006      	beq.n	b4f1c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4f0e:	6833      	ldr	r3, [r6, #0]
   b4f10:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4f14:	689b      	ldr	r3, [r3, #8]
   b4f16:	4630      	mov	r0, r6
   b4f18:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4f1a:	e7f6      	b.n	b4f0a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4f1c:	4628      	mov	r0, r5
   b4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f20 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4f20:	7c00      	ldrb	r0, [r0, #16]
   b4f22:	2200      	movs	r2, #0
   b4f24:	f7ff ba94 	b.w	b4450 <hal_i2c_write>

000b4f28 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4f28:	7c00      	ldrb	r0, [r0, #16]
   b4f2a:	2100      	movs	r1, #0
   b4f2c:	f7ff ba98 	b.w	b4460 <hal_i2c_available>

000b4f30 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4f30:	7c00      	ldrb	r0, [r0, #16]
   b4f32:	2100      	movs	r1, #0
   b4f34:	f7ff ba9c 	b.w	b4470 <hal_i2c_read>

000b4f38 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4f38:	7c00      	ldrb	r0, [r0, #16]
   b4f3a:	2100      	movs	r1, #0
   b4f3c:	f7ff baa0 	b.w	b4480 <hal_i2c_peek>

000b4f40 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4f40:	7c00      	ldrb	r0, [r0, #16]
   b4f42:	2100      	movs	r1, #0
   b4f44:	f7ff baa4 	b.w	b4490 <hal_i2c_flush>

000b4f48 <_ZN7TwoWireD0Ev>:
   b4f48:	b510      	push	{r4, lr}
   b4f4a:	2114      	movs	r1, #20
   b4f4c:	4604      	mov	r4, r0
   b4f4e:	f7ff f8a6 	bl	b409e <_ZdlPvj>
   b4f52:	4620      	mov	r0, r4
   b4f54:	bd10      	pop	{r4, pc}
	...

000b4f58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4f58:	b538      	push	{r3, r4, r5, lr}
   b4f5a:	4604      	mov	r4, r0
   b4f5c:	4615      	mov	r5, r2
   b4f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f62:	2200      	movs	r2, #0
   b4f64:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4f68:	4b09      	ldr	r3, [pc, #36]	; (b4f90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4f6a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4f6c:	4608      	mov	r0, r1
   b4f6e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4f70:	4629      	mov	r1, r5
   b4f72:	f7ff fa9d 	bl	b44b0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4f76:	30bf      	adds	r0, #191	; 0xbf
   b4f78:	d108      	bne.n	b4f8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4f7a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4f7c:	07db      	lsls	r3, r3, #31
   b4f7e:	d505      	bpl.n	b4f8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4f80:	6868      	ldr	r0, [r5, #4]
   b4f82:	f7ff fb91 	bl	b46a8 <free>
    free(conf.tx_buffer);
   b4f86:	68e8      	ldr	r0, [r5, #12]
   b4f88:	f7ff fb8e 	bl	b46a8 <free>
}
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	bd38      	pop	{r3, r4, r5, pc}
   b4f90:	000b5e50 	.word	0x000b5e50

000b4f94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4f94:	2300      	movs	r3, #0
   b4f96:	6840      	ldr	r0, [r0, #4]
   b4f98:	461a      	mov	r2, r3
   b4f9a:	f7ff bb0d 	b.w	b45b8 <network_connect>

000b4f9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4f9e:	6840      	ldr	r0, [r0, #4]
   b4fa0:	2200      	movs	r2, #0
   b4fa2:	2102      	movs	r1, #2
   b4fa4:	f7ff bb18 	b.w	b45d8 <network_disconnect>

000b4fa8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4fa8:	2200      	movs	r2, #0
   b4faa:	6840      	ldr	r0, [r0, #4]
   b4fac:	4611      	mov	r1, r2
   b4fae:	f7ff bb0b 	b.w	b45c8 <network_connecting>

000b4fb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4fb2:	2200      	movs	r2, #0
   b4fb4:	6840      	ldr	r0, [r0, #4]
   b4fb6:	4611      	mov	r1, r2
   b4fb8:	f7ff bb16 	b.w	b45e8 <network_ready>

000b4fbc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4fbc:	2300      	movs	r3, #0
   b4fbe:	6840      	ldr	r0, [r0, #4]
   b4fc0:	461a      	mov	r2, r3
   b4fc2:	4619      	mov	r1, r3
   b4fc4:	f7ff bb18 	b.w	b45f8 <network_on>

000b4fc8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4fc8:	2300      	movs	r3, #0
   b4fca:	6840      	ldr	r0, [r0, #4]
   b4fcc:	461a      	mov	r2, r3
   b4fce:	4619      	mov	r1, r3
   b4fd0:	f7ff bb1a 	b.w	b4608 <network_off>

000b4fd4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4fd4:	6840      	ldr	r0, [r0, #4]
   b4fd6:	2100      	movs	r1, #0
   b4fd8:	f7ff bb3e 	b.w	b4658 <network_is_on>

000b4fdc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4fdc:	6840      	ldr	r0, [r0, #4]
   b4fde:	2100      	movs	r1, #0
   b4fe0:	f7ff bb42 	b.w	b4668 <network_is_off>

000b4fe4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4fe4:	6840      	ldr	r0, [r0, #4]
   b4fe6:	2200      	movs	r2, #0
   b4fe8:	f081 0101 	eor.w	r1, r1, #1
   b4fec:	f7ff bb14 	b.w	b4618 <network_listen>

000b4ff0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4ff0:	6840      	ldr	r0, [r0, #4]
   b4ff2:	2200      	movs	r2, #0
   b4ff4:	f7ff bb20 	b.w	b4638 <network_set_listen_timeout>

000b4ff8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4ff8:	2200      	movs	r2, #0
   b4ffa:	6840      	ldr	r0, [r0, #4]
   b4ffc:	4611      	mov	r1, r2
   b4ffe:	f7ff bb23 	b.w	b4648 <network_get_listen_timeout>

000b5002 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5002:	2200      	movs	r2, #0
   b5004:	6840      	ldr	r0, [r0, #4]
   b5006:	4611      	mov	r1, r2
   b5008:	f7ff bb0e 	b.w	b4628 <network_listening>

000b500c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5010:	b095      	sub	sp, #84	; 0x54
   b5012:	4614      	mov	r4, r2
   b5014:	460d      	mov	r5, r1
   b5016:	4607      	mov	r7, r0
    IPAddress addr;
   b5018:	f7ff fe06 	bl	b4c28 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b501c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b501e:	221c      	movs	r2, #28
   b5020:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5022:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5024:	f000 fd84 	bl	b5b30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5028:	2340      	movs	r3, #64	; 0x40
   b502a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b502c:	4620      	mov	r0, r4
   b502e:	466b      	mov	r3, sp
   b5030:	aa0c      	add	r2, sp, #48	; 0x30
   b5032:	2100      	movs	r1, #0
   b5034:	f7ff f984 	bl	b4340 <netdb_getaddrinfo>
    if (!r) {
   b5038:	4604      	mov	r4, r0
   b503a:	2800      	cmp	r0, #0
   b503c:	d14b      	bne.n	b50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b503e:	4602      	mov	r2, r0
   b5040:	2101      	movs	r1, #1
   b5042:	6868      	ldr	r0, [r5, #4]
   b5044:	f7ff fad0 	bl	b45e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5048:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b504a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b504c:	4622      	mov	r2, r4
   b504e:	6868      	ldr	r0, [r5, #4]
   b5050:	f7ff faca 	bl	b45e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5054:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5056:	4681      	mov	r9, r0
        bool ok = false;
   b5058:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b505a:	2e00      	cmp	r6, #0
   b505c:	d03b      	beq.n	b50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b505e:	2900      	cmp	r1, #0
   b5060:	d139      	bne.n	b50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5062:	6873      	ldr	r3, [r6, #4]
   b5064:	2b02      	cmp	r3, #2
   b5066:	d003      	beq.n	b5070 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5068:	2b0a      	cmp	r3, #10
   b506a:	d011      	beq.n	b5090 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b506c:	69f6      	ldr	r6, [r6, #28]
   b506e:	e7f4      	b.n	b505a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5070:	f1b8 0f00 	cmp.w	r8, #0
   b5074:	d0fa      	beq.n	b506c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5076:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5078:	a806      	add	r0, sp, #24
   b507a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b507c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b507e:	f7ff fe01 	bl	b4c84 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5084:	1d3c      	adds	r4, r7, #4
   b5086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5088:	682b      	ldr	r3, [r5, #0]
   b508a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b508c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b508e:	e7ed      	b.n	b506c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5090:	f1b9 0f00 	cmp.w	r9, #0
   b5094:	d0ea      	beq.n	b506c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5096:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5098:	2210      	movs	r2, #16
   b509a:	a801      	add	r0, sp, #4
   b509c:	f000 fd48 	bl	b5b30 <memset>
                    a.v = 6;
   b50a0:	2306      	movs	r3, #6
   b50a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b50a6:	ad01      	add	r5, sp, #4
   b50a8:	f104 0308 	add.w	r3, r4, #8
   b50ac:	3418      	adds	r4, #24
   b50ae:	6818      	ldr	r0, [r3, #0]
   b50b0:	6859      	ldr	r1, [r3, #4]
   b50b2:	462a      	mov	r2, r5
   b50b4:	c203      	stmia	r2!, {r0, r1}
   b50b6:	3308      	adds	r3, #8
   b50b8:	42a3      	cmp	r3, r4
   b50ba:	4615      	mov	r5, r2
   b50bc:	d1f7      	bne.n	b50ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b50be:	a901      	add	r1, sp, #4
   b50c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b50c2:	ad07      	add	r5, sp, #28
   b50c4:	f7ff fdbe 	bl	b4c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b50c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50ca:	1d3c      	adds	r4, r7, #4
   b50cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50ce:	682b      	ldr	r3, [r5, #0]
   b50d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50d2:	4649      	mov	r1, r9
   b50d4:	e7ca      	b.n	b506c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b50d6:	9800      	ldr	r0, [sp, #0]
   b50d8:	f7ff f92a 	bl	b4330 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b50dc:	4638      	mov	r0, r7
   b50de:	b015      	add	sp, #84	; 0x54
   b50e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b50e4:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b50e6:	4a03      	ldr	r2, [pc, #12]	; (b50f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b50e8:	601a      	str	r2, [r3, #0]
   b50ea:	2200      	movs	r2, #0
   b50ec:	605a      	str	r2, [r3, #4]

} // spark
   b50ee:	4770      	bx	lr
   b50f0:	2003e714 	.word	0x2003e714
   b50f4:	000b5e78 	.word	0x000b5e78

000b50f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b50f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b50fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b50fc:	d902      	bls.n	b5104 <pinAvailable+0xc>
    return false;
   b50fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5100:	b002      	add	sp, #8
   b5102:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5104:	f1a0 030b 	sub.w	r3, r0, #11
   b5108:	2b02      	cmp	r3, #2
   b510a:	d81a      	bhi.n	b5142 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b510c:	4c17      	ldr	r4, [pc, #92]	; (b516c <pinAvailable+0x74>)
   b510e:	7821      	ldrb	r1, [r4, #0]
   b5110:	f3bf 8f5b 	dmb	ish
   b5114:	f011 0101 	ands.w	r1, r1, #1
   b5118:	d10b      	bne.n	b5132 <pinAvailable+0x3a>
   b511a:	4620      	mov	r0, r4
   b511c:	9101      	str	r1, [sp, #4]
   b511e:	f7fe ffc0 	bl	b40a2 <__cxa_guard_acquire>
   b5122:	9901      	ldr	r1, [sp, #4]
   b5124:	b128      	cbz	r0, b5132 <pinAvailable+0x3a>
   b5126:	4812      	ldr	r0, [pc, #72]	; (b5170 <pinAvailable+0x78>)
   b5128:	f7ff fb1c 	bl	b4764 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b512c:	4620      	mov	r0, r4
   b512e:	f7fe ffbd 	bl	b40ac <__cxa_guard_release>
   b5132:	4b0f      	ldr	r3, [pc, #60]	; (b5170 <pinAvailable+0x78>)
   b5134:	7818      	ldrb	r0, [r3, #0]
   b5136:	f7ff f9cb 	bl	b44d0 <hal_spi_is_enabled>
   b513a:	2800      	cmp	r0, #0
   b513c:	d1df      	bne.n	b50fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b513e:	2001      	movs	r0, #1
   b5140:	e7de      	b.n	b5100 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5142:	2801      	cmp	r0, #1
   b5144:	d809      	bhi.n	b515a <pinAvailable+0x62>
   b5146:	f000 f89b 	bl	b5280 <_Z19__fetch_global_Wirev>
   b514a:	2100      	movs	r1, #0
   b514c:	7c00      	ldrb	r0, [r0, #16]
   b514e:	f7ff f9a7 	bl	b44a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5152:	f080 0001 	eor.w	r0, r0, #1
   b5156:	b2c0      	uxtb	r0, r0
   b5158:	e7d2      	b.n	b5100 <pinAvailable+0x8>
   b515a:	3809      	subs	r0, #9
   b515c:	2801      	cmp	r0, #1
   b515e:	d8ee      	bhi.n	b513e <pinAvailable+0x46>
   b5160:	f000 f84e 	bl	b5200 <_Z22__fetch_global_Serial1v>
   b5164:	7c00      	ldrb	r0, [r0, #16]
   b5166:	f7ff f953 	bl	b4410 <hal_usart_is_enabled>
   b516a:	e7f2      	b.n	b5152 <pinAvailable+0x5a>
   b516c:	2003e71c 	.word	0x2003e71c
   b5170:	2003e720 	.word	0x2003e720

000b5174 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5174:	2823      	cmp	r0, #35	; 0x23
{
   b5176:	b538      	push	{r3, r4, r5, lr}
   b5178:	4604      	mov	r4, r0
   b517a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b517c:	d80a      	bhi.n	b5194 <pinMode+0x20>
   b517e:	29ff      	cmp	r1, #255	; 0xff
   b5180:	d008      	beq.n	b5194 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5182:	f7ff ffb9 	bl	b50f8 <pinAvailable>
   b5186:	b128      	cbz	r0, b5194 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5188:	4629      	mov	r1, r5
   b518a:	4620      	mov	r0, r4
}
   b518c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5190:	f7ff b8de 	b.w	b4350 <HAL_Pin_Mode>
}
   b5194:	bd38      	pop	{r3, r4, r5, pc}

000b5196 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5196:	b538      	push	{r3, r4, r5, lr}
   b5198:	4604      	mov	r4, r0
   b519a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b519c:	f7ff f8e0 	bl	b4360 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b51a0:	28ff      	cmp	r0, #255	; 0xff
   b51a2:	d010      	beq.n	b51c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b51a4:	2806      	cmp	r0, #6
   b51a6:	d804      	bhi.n	b51b2 <digitalWrite+0x1c>
   b51a8:	234d      	movs	r3, #77	; 0x4d
   b51aa:	fa23 f000 	lsr.w	r0, r3, r0
   b51ae:	07c3      	lsls	r3, r0, #31
   b51b0:	d409      	bmi.n	b51c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b51b2:	4620      	mov	r0, r4
   b51b4:	f7ff ffa0 	bl	b50f8 <pinAvailable>
   b51b8:	b128      	cbz	r0, b51c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b51ba:	4629      	mov	r1, r5
   b51bc:	4620      	mov	r0, r4
}
   b51be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b51c2:	f7ff b8d5 	b.w	b4370 <HAL_GPIO_Write>
}
   b51c6:	bd38      	pop	{r3, r4, r5, pc}

000b51c8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b51c8:	4770      	bx	lr
	...

000b51cc <_Z20acquireSerial1Bufferv>:
{
   b51cc:	b538      	push	{r3, r4, r5, lr}
   b51ce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b51d0:	2514      	movs	r5, #20
   b51d2:	462a      	mov	r2, r5
   b51d4:	2100      	movs	r1, #0
   b51d6:	f000 fcab 	bl	b5b30 <memset>
   b51da:	8025      	strh	r5, [r4, #0]
   b51dc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b51de:	4907      	ldr	r1, [pc, #28]	; (b51fc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b51e0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b51e2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b51e4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b51e6:	f000 f86f 	bl	b52c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b51ea:	4904      	ldr	r1, [pc, #16]	; (b51fc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b51ec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b51ee:	4628      	mov	r0, r5
   b51f0:	f000 f86a 	bl	b52c8 <_ZnajRKSt9nothrow_t>
    };
   b51f4:	60e0      	str	r0, [r4, #12]
}
   b51f6:	4620      	mov	r0, r4
   b51f8:	bd38      	pop	{r3, r4, r5, pc}
   b51fa:	bf00      	nop
   b51fc:	000b5eac 	.word	0x000b5eac

000b5200 <_Z22__fetch_global_Serial1v>:
{
   b5200:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5202:	4d0e      	ldr	r5, [pc, #56]	; (b523c <_Z22__fetch_global_Serial1v+0x3c>)
   b5204:	7829      	ldrb	r1, [r5, #0]
   b5206:	f3bf 8f5b 	dmb	ish
   b520a:	f011 0401 	ands.w	r4, r1, #1
{
   b520e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5210:	d111      	bne.n	b5236 <_Z22__fetch_global_Serial1v+0x36>
   b5212:	4628      	mov	r0, r5
   b5214:	f7fe ff45 	bl	b40a2 <__cxa_guard_acquire>
   b5218:	b168      	cbz	r0, b5236 <_Z22__fetch_global_Serial1v+0x36>
   b521a:	a801      	add	r0, sp, #4
   b521c:	f7ff ffd6 	bl	b51cc <_Z20acquireSerial1Bufferv>
   b5220:	aa01      	add	r2, sp, #4
   b5222:	4621      	mov	r1, r4
   b5224:	4806      	ldr	r0, [pc, #24]	; (b5240 <_Z22__fetch_global_Serial1v+0x40>)
   b5226:	f7ff fe4f 	bl	b4ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b522a:	4628      	mov	r0, r5
   b522c:	f7fe ff3e 	bl	b40ac <__cxa_guard_release>
   b5230:	4804      	ldr	r0, [pc, #16]	; (b5244 <_Z22__fetch_global_Serial1v+0x44>)
   b5232:	f000 fc69 	bl	b5b08 <atexit>
    return serial1;
}
   b5236:	4802      	ldr	r0, [pc, #8]	; (b5240 <_Z22__fetch_global_Serial1v+0x40>)
   b5238:	b007      	add	sp, #28
   b523a:	bd30      	pop	{r4, r5, pc}
   b523c:	2003e728 	.word	0x2003e728
   b5240:	2003e72c 	.word	0x2003e72c
   b5244:	000b51c9 	.word	0x000b51c9

000b5248 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5248:	4770      	bx	lr
	...

000b524c <_Z17acquireWireBufferv>:
{
   b524c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b524e:	4b0a      	ldr	r3, [pc, #40]	; (b5278 <_Z17acquireWireBufferv+0x2c>)
   b5250:	6003      	str	r3, [r0, #0]
   b5252:	2301      	movs	r3, #1
{
   b5254:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5256:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5258:	4908      	ldr	r1, [pc, #32]	; (b527c <_Z17acquireWireBufferv+0x30>)
   b525a:	2020      	movs	r0, #32
   b525c:	f000 f834 	bl	b52c8 <_ZnajRKSt9nothrow_t>
	};
   b5260:	2520      	movs	r5, #32
   b5262:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5264:	4905      	ldr	r1, [pc, #20]	; (b527c <_Z17acquireWireBufferv+0x30>)
	};
   b5266:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5268:	4628      	mov	r0, r5
   b526a:	f000 f82d 	bl	b52c8 <_ZnajRKSt9nothrow_t>
	};
   b526e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5272:	4620      	mov	r0, r4
   b5274:	bd38      	pop	{r3, r4, r5, pc}
   b5276:	bf00      	nop
   b5278:	00010018 	.word	0x00010018
   b527c:	000b5eac 	.word	0x000b5eac

000b5280 <_Z19__fetch_global_Wirev>:
{
   b5280:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5282:	4d0e      	ldr	r5, [pc, #56]	; (b52bc <_Z19__fetch_global_Wirev+0x3c>)
   b5284:	7829      	ldrb	r1, [r5, #0]
   b5286:	f3bf 8f5b 	dmb	ish
   b528a:	f011 0401 	ands.w	r4, r1, #1
{
   b528e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5290:	d111      	bne.n	b52b6 <_Z19__fetch_global_Wirev+0x36>
   b5292:	4628      	mov	r0, r5
   b5294:	f7fe ff05 	bl	b40a2 <__cxa_guard_acquire>
   b5298:	b168      	cbz	r0, b52b6 <_Z19__fetch_global_Wirev+0x36>
   b529a:	4668      	mov	r0, sp
   b529c:	f7ff ffd6 	bl	b524c <_Z17acquireWireBufferv>
   b52a0:	466a      	mov	r2, sp
   b52a2:	4621      	mov	r1, r4
   b52a4:	4806      	ldr	r0, [pc, #24]	; (b52c0 <_Z19__fetch_global_Wirev+0x40>)
   b52a6:	f7ff fe57 	bl	b4f58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b52aa:	4628      	mov	r0, r5
   b52ac:	f7fe fefe 	bl	b40ac <__cxa_guard_release>
   b52b0:	4804      	ldr	r0, [pc, #16]	; (b52c4 <_Z19__fetch_global_Wirev+0x44>)
   b52b2:	f000 fc29 	bl	b5b08 <atexit>
	return wire;
}
   b52b6:	4802      	ldr	r0, [pc, #8]	; (b52c0 <_Z19__fetch_global_Wirev+0x40>)
   b52b8:	b007      	add	sp, #28
   b52ba:	bd30      	pop	{r4, r5, pc}
   b52bc:	2003e744 	.word	0x2003e744
   b52c0:	2003e748 	.word	0x2003e748
   b52c4:	000b5249 	.word	0x000b5249

000b52c8 <_ZnajRKSt9nothrow_t>:
   b52c8:	f7fe bee7 	b.w	b409a <_Znaj>

000b52cc <__aeabi_drsub>:
   b52cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b52d0:	e002      	b.n	b52d8 <__adddf3>
   b52d2:	bf00      	nop

000b52d4 <__aeabi_dsub>:
   b52d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b52d8 <__adddf3>:
   b52d8:	b530      	push	{r4, r5, lr}
   b52da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b52de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b52e2:	ea94 0f05 	teq	r4, r5
   b52e6:	bf08      	it	eq
   b52e8:	ea90 0f02 	teqeq	r0, r2
   b52ec:	bf1f      	itttt	ne
   b52ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   b52f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b52f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b52fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b52fe:	f000 80e2 	beq.w	b54c6 <__adddf3+0x1ee>
   b5302:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b530a:	bfb8      	it	lt
   b530c:	426d      	neglt	r5, r5
   b530e:	dd0c      	ble.n	b532a <__adddf3+0x52>
   b5310:	442c      	add	r4, r5
   b5312:	ea80 0202 	eor.w	r2, r0, r2
   b5316:	ea81 0303 	eor.w	r3, r1, r3
   b531a:	ea82 0000 	eor.w	r0, r2, r0
   b531e:	ea83 0101 	eor.w	r1, r3, r1
   b5322:	ea80 0202 	eor.w	r2, r0, r2
   b5326:	ea81 0303 	eor.w	r3, r1, r3
   b532a:	2d36      	cmp	r5, #54	; 0x36
   b532c:	bf88      	it	hi
   b532e:	bd30      	pophi	{r4, r5, pc}
   b5330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5334:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b533c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5340:	d002      	beq.n	b5348 <__adddf3+0x70>
   b5342:	4240      	negs	r0, r0
   b5344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b534c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5354:	d002      	beq.n	b535c <__adddf3+0x84>
   b5356:	4252      	negs	r2, r2
   b5358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b535c:	ea94 0f05 	teq	r4, r5
   b5360:	f000 80a7 	beq.w	b54b2 <__adddf3+0x1da>
   b5364:	f1a4 0401 	sub.w	r4, r4, #1
   b5368:	f1d5 0e20 	rsbs	lr, r5, #32
   b536c:	db0d      	blt.n	b538a <__adddf3+0xb2>
   b536e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5372:	fa22 f205 	lsr.w	r2, r2, r5
   b5376:	1880      	adds	r0, r0, r2
   b5378:	f141 0100 	adc.w	r1, r1, #0
   b537c:	fa03 f20e 	lsl.w	r2, r3, lr
   b5380:	1880      	adds	r0, r0, r2
   b5382:	fa43 f305 	asr.w	r3, r3, r5
   b5386:	4159      	adcs	r1, r3
   b5388:	e00e      	b.n	b53a8 <__adddf3+0xd0>
   b538a:	f1a5 0520 	sub.w	r5, r5, #32
   b538e:	f10e 0e20 	add.w	lr, lr, #32
   b5392:	2a01      	cmp	r2, #1
   b5394:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5398:	bf28      	it	cs
   b539a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b539e:	fa43 f305 	asr.w	r3, r3, r5
   b53a2:	18c0      	adds	r0, r0, r3
   b53a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b53a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b53ac:	d507      	bpl.n	b53be <__adddf3+0xe6>
   b53ae:	f04f 0e00 	mov.w	lr, #0
   b53b2:	f1dc 0c00 	rsbs	ip, ip, #0
   b53b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b53ba:	eb6e 0101 	sbc.w	r1, lr, r1
   b53be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b53c2:	d31b      	bcc.n	b53fc <__adddf3+0x124>
   b53c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b53c8:	d30c      	bcc.n	b53e4 <__adddf3+0x10c>
   b53ca:	0849      	lsrs	r1, r1, #1
   b53cc:	ea5f 0030 	movs.w	r0, r0, rrx
   b53d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b53d4:	f104 0401 	add.w	r4, r4, #1
   b53d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b53dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b53e0:	f080 809a 	bcs.w	b5518 <__adddf3+0x240>
   b53e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b53e8:	bf08      	it	eq
   b53ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b53ee:	f150 0000 	adcs.w	r0, r0, #0
   b53f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b53f6:	ea41 0105 	orr.w	r1, r1, r5
   b53fa:	bd30      	pop	{r4, r5, pc}
   b53fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5400:	4140      	adcs	r0, r0
   b5402:	eb41 0101 	adc.w	r1, r1, r1
   b5406:	3c01      	subs	r4, #1
   b5408:	bf28      	it	cs
   b540a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b540e:	d2e9      	bcs.n	b53e4 <__adddf3+0x10c>
   b5410:	f091 0f00 	teq	r1, #0
   b5414:	bf04      	itt	eq
   b5416:	4601      	moveq	r1, r0
   b5418:	2000      	moveq	r0, #0
   b541a:	fab1 f381 	clz	r3, r1
   b541e:	bf08      	it	eq
   b5420:	3320      	addeq	r3, #32
   b5422:	f1a3 030b 	sub.w	r3, r3, #11
   b5426:	f1b3 0220 	subs.w	r2, r3, #32
   b542a:	da0c      	bge.n	b5446 <__adddf3+0x16e>
   b542c:	320c      	adds	r2, #12
   b542e:	dd08      	ble.n	b5442 <__adddf3+0x16a>
   b5430:	f102 0c14 	add.w	ip, r2, #20
   b5434:	f1c2 020c 	rsb	r2, r2, #12
   b5438:	fa01 f00c 	lsl.w	r0, r1, ip
   b543c:	fa21 f102 	lsr.w	r1, r1, r2
   b5440:	e00c      	b.n	b545c <__adddf3+0x184>
   b5442:	f102 0214 	add.w	r2, r2, #20
   b5446:	bfd8      	it	le
   b5448:	f1c2 0c20 	rsble	ip, r2, #32
   b544c:	fa01 f102 	lsl.w	r1, r1, r2
   b5450:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5454:	bfdc      	itt	le
   b5456:	ea41 010c 	orrle.w	r1, r1, ip
   b545a:	4090      	lslle	r0, r2
   b545c:	1ae4      	subs	r4, r4, r3
   b545e:	bfa2      	ittt	ge
   b5460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5464:	4329      	orrge	r1, r5
   b5466:	bd30      	popge	{r4, r5, pc}
   b5468:	ea6f 0404 	mvn.w	r4, r4
   b546c:	3c1f      	subs	r4, #31
   b546e:	da1c      	bge.n	b54aa <__adddf3+0x1d2>
   b5470:	340c      	adds	r4, #12
   b5472:	dc0e      	bgt.n	b5492 <__adddf3+0x1ba>
   b5474:	f104 0414 	add.w	r4, r4, #20
   b5478:	f1c4 0220 	rsb	r2, r4, #32
   b547c:	fa20 f004 	lsr.w	r0, r0, r4
   b5480:	fa01 f302 	lsl.w	r3, r1, r2
   b5484:	ea40 0003 	orr.w	r0, r0, r3
   b5488:	fa21 f304 	lsr.w	r3, r1, r4
   b548c:	ea45 0103 	orr.w	r1, r5, r3
   b5490:	bd30      	pop	{r4, r5, pc}
   b5492:	f1c4 040c 	rsb	r4, r4, #12
   b5496:	f1c4 0220 	rsb	r2, r4, #32
   b549a:	fa20 f002 	lsr.w	r0, r0, r2
   b549e:	fa01 f304 	lsl.w	r3, r1, r4
   b54a2:	ea40 0003 	orr.w	r0, r0, r3
   b54a6:	4629      	mov	r1, r5
   b54a8:	bd30      	pop	{r4, r5, pc}
   b54aa:	fa21 f004 	lsr.w	r0, r1, r4
   b54ae:	4629      	mov	r1, r5
   b54b0:	bd30      	pop	{r4, r5, pc}
   b54b2:	f094 0f00 	teq	r4, #0
   b54b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b54ba:	bf06      	itte	eq
   b54bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b54c0:	3401      	addeq	r4, #1
   b54c2:	3d01      	subne	r5, #1
   b54c4:	e74e      	b.n	b5364 <__adddf3+0x8c>
   b54c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b54ca:	bf18      	it	ne
   b54cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b54d0:	d029      	beq.n	b5526 <__adddf3+0x24e>
   b54d2:	ea94 0f05 	teq	r4, r5
   b54d6:	bf08      	it	eq
   b54d8:	ea90 0f02 	teqeq	r0, r2
   b54dc:	d005      	beq.n	b54ea <__adddf3+0x212>
   b54de:	ea54 0c00 	orrs.w	ip, r4, r0
   b54e2:	bf04      	itt	eq
   b54e4:	4619      	moveq	r1, r3
   b54e6:	4610      	moveq	r0, r2
   b54e8:	bd30      	pop	{r4, r5, pc}
   b54ea:	ea91 0f03 	teq	r1, r3
   b54ee:	bf1e      	ittt	ne
   b54f0:	2100      	movne	r1, #0
   b54f2:	2000      	movne	r0, #0
   b54f4:	bd30      	popne	{r4, r5, pc}
   b54f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b54fa:	d105      	bne.n	b5508 <__adddf3+0x230>
   b54fc:	0040      	lsls	r0, r0, #1
   b54fe:	4149      	adcs	r1, r1
   b5500:	bf28      	it	cs
   b5502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5506:	bd30      	pop	{r4, r5, pc}
   b5508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b550c:	bf3c      	itt	cc
   b550e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5512:	bd30      	popcc	{r4, r5, pc}
   b5514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b551c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5520:	f04f 0000 	mov.w	r0, #0
   b5524:	bd30      	pop	{r4, r5, pc}
   b5526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b552a:	bf1a      	itte	ne
   b552c:	4619      	movne	r1, r3
   b552e:	4610      	movne	r0, r2
   b5530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5534:	bf1c      	itt	ne
   b5536:	460b      	movne	r3, r1
   b5538:	4602      	movne	r2, r0
   b553a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b553e:	bf06      	itte	eq
   b5540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5544:	ea91 0f03 	teqeq	r1, r3
   b5548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b554c:	bd30      	pop	{r4, r5, pc}
   b554e:	bf00      	nop

000b5550 <__aeabi_ui2d>:
   b5550:	f090 0f00 	teq	r0, #0
   b5554:	bf04      	itt	eq
   b5556:	2100      	moveq	r1, #0
   b5558:	4770      	bxeq	lr
   b555a:	b530      	push	{r4, r5, lr}
   b555c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5560:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5564:	f04f 0500 	mov.w	r5, #0
   b5568:	f04f 0100 	mov.w	r1, #0
   b556c:	e750      	b.n	b5410 <__adddf3+0x138>
   b556e:	bf00      	nop

000b5570 <__aeabi_i2d>:
   b5570:	f090 0f00 	teq	r0, #0
   b5574:	bf04      	itt	eq
   b5576:	2100      	moveq	r1, #0
   b5578:	4770      	bxeq	lr
   b557a:	b530      	push	{r4, r5, lr}
   b557c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5580:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5588:	bf48      	it	mi
   b558a:	4240      	negmi	r0, r0
   b558c:	f04f 0100 	mov.w	r1, #0
   b5590:	e73e      	b.n	b5410 <__adddf3+0x138>
   b5592:	bf00      	nop

000b5594 <__aeabi_f2d>:
   b5594:	0042      	lsls	r2, r0, #1
   b5596:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b559a:	ea4f 0131 	mov.w	r1, r1, rrx
   b559e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b55a2:	bf1f      	itttt	ne
   b55a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b55a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b55ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b55b0:	4770      	bxne	lr
   b55b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b55b6:	bf08      	it	eq
   b55b8:	4770      	bxeq	lr
   b55ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b55be:	bf04      	itt	eq
   b55c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b55c4:	4770      	bxeq	lr
   b55c6:	b530      	push	{r4, r5, lr}
   b55c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b55cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b55d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b55d4:	e71c      	b.n	b5410 <__adddf3+0x138>
   b55d6:	bf00      	nop

000b55d8 <__aeabi_ul2d>:
   b55d8:	ea50 0201 	orrs.w	r2, r0, r1
   b55dc:	bf08      	it	eq
   b55de:	4770      	bxeq	lr
   b55e0:	b530      	push	{r4, r5, lr}
   b55e2:	f04f 0500 	mov.w	r5, #0
   b55e6:	e00a      	b.n	b55fe <__aeabi_l2d+0x16>

000b55e8 <__aeabi_l2d>:
   b55e8:	ea50 0201 	orrs.w	r2, r0, r1
   b55ec:	bf08      	it	eq
   b55ee:	4770      	bxeq	lr
   b55f0:	b530      	push	{r4, r5, lr}
   b55f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b55f6:	d502      	bpl.n	b55fe <__aeabi_l2d+0x16>
   b55f8:	4240      	negs	r0, r0
   b55fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b55fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5602:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b560a:	f43f aed8 	beq.w	b53be <__adddf3+0xe6>
   b560e:	f04f 0203 	mov.w	r2, #3
   b5612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5616:	bf18      	it	ne
   b5618:	3203      	addne	r2, #3
   b561a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b561e:	bf18      	it	ne
   b5620:	3203      	addne	r2, #3
   b5622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5626:	f1c2 0320 	rsb	r3, r2, #32
   b562a:	fa00 fc03 	lsl.w	ip, r0, r3
   b562e:	fa20 f002 	lsr.w	r0, r0, r2
   b5632:	fa01 fe03 	lsl.w	lr, r1, r3
   b5636:	ea40 000e 	orr.w	r0, r0, lr
   b563a:	fa21 f102 	lsr.w	r1, r1, r2
   b563e:	4414      	add	r4, r2
   b5640:	e6bd      	b.n	b53be <__adddf3+0xe6>
   b5642:	bf00      	nop

000b5644 <__aeabi_dmul>:
   b5644:	b570      	push	{r4, r5, r6, lr}
   b5646:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b564a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b564e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5652:	bf1d      	ittte	ne
   b5654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5658:	ea94 0f0c 	teqne	r4, ip
   b565c:	ea95 0f0c 	teqne	r5, ip
   b5660:	f000 f8de 	bleq	b5820 <__aeabi_dmul+0x1dc>
   b5664:	442c      	add	r4, r5
   b5666:	ea81 0603 	eor.w	r6, r1, r3
   b566a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b566e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5676:	bf18      	it	ne
   b5678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b567c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5684:	d038      	beq.n	b56f8 <__aeabi_dmul+0xb4>
   b5686:	fba0 ce02 	umull	ip, lr, r0, r2
   b568a:	f04f 0500 	mov.w	r5, #0
   b568e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5696:	fbe0 e503 	umlal	lr, r5, r0, r3
   b569a:	f04f 0600 	mov.w	r6, #0
   b569e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b56a2:	f09c 0f00 	teq	ip, #0
   b56a6:	bf18      	it	ne
   b56a8:	f04e 0e01 	orrne.w	lr, lr, #1
   b56ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b56b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b56b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b56b8:	d204      	bcs.n	b56c4 <__aeabi_dmul+0x80>
   b56ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b56be:	416d      	adcs	r5, r5
   b56c0:	eb46 0606 	adc.w	r6, r6, r6
   b56c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b56c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b56cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b56d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b56d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b56d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b56dc:	bf88      	it	hi
   b56de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b56e2:	d81e      	bhi.n	b5722 <__aeabi_dmul+0xde>
   b56e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b56e8:	bf08      	it	eq
   b56ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b56ee:	f150 0000 	adcs.w	r0, r0, #0
   b56f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b56f6:	bd70      	pop	{r4, r5, r6, pc}
   b56f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b56fc:	ea46 0101 	orr.w	r1, r6, r1
   b5700:	ea40 0002 	orr.w	r0, r0, r2
   b5704:	ea81 0103 	eor.w	r1, r1, r3
   b5708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b570c:	bfc2      	ittt	gt
   b570e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5716:	bd70      	popgt	{r4, r5, r6, pc}
   b5718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b571c:	f04f 0e00 	mov.w	lr, #0
   b5720:	3c01      	subs	r4, #1
   b5722:	f300 80ab 	bgt.w	b587c <__aeabi_dmul+0x238>
   b5726:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b572a:	bfde      	ittt	le
   b572c:	2000      	movle	r0, #0
   b572e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5732:	bd70      	pople	{r4, r5, r6, pc}
   b5734:	f1c4 0400 	rsb	r4, r4, #0
   b5738:	3c20      	subs	r4, #32
   b573a:	da35      	bge.n	b57a8 <__aeabi_dmul+0x164>
   b573c:	340c      	adds	r4, #12
   b573e:	dc1b      	bgt.n	b5778 <__aeabi_dmul+0x134>
   b5740:	f104 0414 	add.w	r4, r4, #20
   b5744:	f1c4 0520 	rsb	r5, r4, #32
   b5748:	fa00 f305 	lsl.w	r3, r0, r5
   b574c:	fa20 f004 	lsr.w	r0, r0, r4
   b5750:	fa01 f205 	lsl.w	r2, r1, r5
   b5754:	ea40 0002 	orr.w	r0, r0, r2
   b5758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b575c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5764:	fa21 f604 	lsr.w	r6, r1, r4
   b5768:	eb42 0106 	adc.w	r1, r2, r6
   b576c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5770:	bf08      	it	eq
   b5772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5776:	bd70      	pop	{r4, r5, r6, pc}
   b5778:	f1c4 040c 	rsb	r4, r4, #12
   b577c:	f1c4 0520 	rsb	r5, r4, #32
   b5780:	fa00 f304 	lsl.w	r3, r0, r4
   b5784:	fa20 f005 	lsr.w	r0, r0, r5
   b5788:	fa01 f204 	lsl.w	r2, r1, r4
   b578c:	ea40 0002 	orr.w	r0, r0, r2
   b5790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5798:	f141 0100 	adc.w	r1, r1, #0
   b579c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b57a0:	bf08      	it	eq
   b57a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b57a6:	bd70      	pop	{r4, r5, r6, pc}
   b57a8:	f1c4 0520 	rsb	r5, r4, #32
   b57ac:	fa00 f205 	lsl.w	r2, r0, r5
   b57b0:	ea4e 0e02 	orr.w	lr, lr, r2
   b57b4:	fa20 f304 	lsr.w	r3, r0, r4
   b57b8:	fa01 f205 	lsl.w	r2, r1, r5
   b57bc:	ea43 0302 	orr.w	r3, r3, r2
   b57c0:	fa21 f004 	lsr.w	r0, r1, r4
   b57c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b57c8:	fa21 f204 	lsr.w	r2, r1, r4
   b57cc:	ea20 0002 	bic.w	r0, r0, r2
   b57d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b57d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b57d8:	bf08      	it	eq
   b57da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b57de:	bd70      	pop	{r4, r5, r6, pc}
   b57e0:	f094 0f00 	teq	r4, #0
   b57e4:	d10f      	bne.n	b5806 <__aeabi_dmul+0x1c2>
   b57e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b57ea:	0040      	lsls	r0, r0, #1
   b57ec:	eb41 0101 	adc.w	r1, r1, r1
   b57f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b57f4:	bf08      	it	eq
   b57f6:	3c01      	subeq	r4, #1
   b57f8:	d0f7      	beq.n	b57ea <__aeabi_dmul+0x1a6>
   b57fa:	ea41 0106 	orr.w	r1, r1, r6
   b57fe:	f095 0f00 	teq	r5, #0
   b5802:	bf18      	it	ne
   b5804:	4770      	bxne	lr
   b5806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b580a:	0052      	lsls	r2, r2, #1
   b580c:	eb43 0303 	adc.w	r3, r3, r3
   b5810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5814:	bf08      	it	eq
   b5816:	3d01      	subeq	r5, #1
   b5818:	d0f7      	beq.n	b580a <__aeabi_dmul+0x1c6>
   b581a:	ea43 0306 	orr.w	r3, r3, r6
   b581e:	4770      	bx	lr
   b5820:	ea94 0f0c 	teq	r4, ip
   b5824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5828:	bf18      	it	ne
   b582a:	ea95 0f0c 	teqne	r5, ip
   b582e:	d00c      	beq.n	b584a <__aeabi_dmul+0x206>
   b5830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5834:	bf18      	it	ne
   b5836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b583a:	d1d1      	bne.n	b57e0 <__aeabi_dmul+0x19c>
   b583c:	ea81 0103 	eor.w	r1, r1, r3
   b5840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5844:	f04f 0000 	mov.w	r0, #0
   b5848:	bd70      	pop	{r4, r5, r6, pc}
   b584a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b584e:	bf06      	itte	eq
   b5850:	4610      	moveq	r0, r2
   b5852:	4619      	moveq	r1, r3
   b5854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5858:	d019      	beq.n	b588e <__aeabi_dmul+0x24a>
   b585a:	ea94 0f0c 	teq	r4, ip
   b585e:	d102      	bne.n	b5866 <__aeabi_dmul+0x222>
   b5860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5864:	d113      	bne.n	b588e <__aeabi_dmul+0x24a>
   b5866:	ea95 0f0c 	teq	r5, ip
   b586a:	d105      	bne.n	b5878 <__aeabi_dmul+0x234>
   b586c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5870:	bf1c      	itt	ne
   b5872:	4610      	movne	r0, r2
   b5874:	4619      	movne	r1, r3
   b5876:	d10a      	bne.n	b588e <__aeabi_dmul+0x24a>
   b5878:	ea81 0103 	eor.w	r1, r1, r3
   b587c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5888:	f04f 0000 	mov.w	r0, #0
   b588c:	bd70      	pop	{r4, r5, r6, pc}
   b588e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5896:	bd70      	pop	{r4, r5, r6, pc}

000b5898 <__aeabi_ddiv>:
   b5898:	b570      	push	{r4, r5, r6, lr}
   b589a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b589e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b58a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b58a6:	bf1d      	ittte	ne
   b58a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b58ac:	ea94 0f0c 	teqne	r4, ip
   b58b0:	ea95 0f0c 	teqne	r5, ip
   b58b4:	f000 f8a7 	bleq	b5a06 <__aeabi_ddiv+0x16e>
   b58b8:	eba4 0405 	sub.w	r4, r4, r5
   b58bc:	ea81 0e03 	eor.w	lr, r1, r3
   b58c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b58c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b58c8:	f000 8088 	beq.w	b59dc <__aeabi_ddiv+0x144>
   b58cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b58d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b58d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b58d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b58dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b58e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b58e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b58e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b58ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b58f0:	429d      	cmp	r5, r3
   b58f2:	bf08      	it	eq
   b58f4:	4296      	cmpeq	r6, r2
   b58f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b58fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b58fe:	d202      	bcs.n	b5906 <__aeabi_ddiv+0x6e>
   b5900:	085b      	lsrs	r3, r3, #1
   b5902:	ea4f 0232 	mov.w	r2, r2, rrx
   b5906:	1ab6      	subs	r6, r6, r2
   b5908:	eb65 0503 	sbc.w	r5, r5, r3
   b590c:	085b      	lsrs	r3, r3, #1
   b590e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b591a:	ebb6 0e02 	subs.w	lr, r6, r2
   b591e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5922:	bf22      	ittt	cs
   b5924:	1ab6      	subcs	r6, r6, r2
   b5926:	4675      	movcs	r5, lr
   b5928:	ea40 000c 	orrcs.w	r0, r0, ip
   b592c:	085b      	lsrs	r3, r3, #1
   b592e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5932:	ebb6 0e02 	subs.w	lr, r6, r2
   b5936:	eb75 0e03 	sbcs.w	lr, r5, r3
   b593a:	bf22      	ittt	cs
   b593c:	1ab6      	subcs	r6, r6, r2
   b593e:	4675      	movcs	r5, lr
   b5940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5944:	085b      	lsrs	r3, r3, #1
   b5946:	ea4f 0232 	mov.w	r2, r2, rrx
   b594a:	ebb6 0e02 	subs.w	lr, r6, r2
   b594e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5952:	bf22      	ittt	cs
   b5954:	1ab6      	subcs	r6, r6, r2
   b5956:	4675      	movcs	r5, lr
   b5958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b595c:	085b      	lsrs	r3, r3, #1
   b595e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5962:	ebb6 0e02 	subs.w	lr, r6, r2
   b5966:	eb75 0e03 	sbcs.w	lr, r5, r3
   b596a:	bf22      	ittt	cs
   b596c:	1ab6      	subcs	r6, r6, r2
   b596e:	4675      	movcs	r5, lr
   b5970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5974:	ea55 0e06 	orrs.w	lr, r5, r6
   b5978:	d018      	beq.n	b59ac <__aeabi_ddiv+0x114>
   b597a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b597e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5982:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b598a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b598e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5996:	d1c0      	bne.n	b591a <__aeabi_ddiv+0x82>
   b5998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b599c:	d10b      	bne.n	b59b6 <__aeabi_ddiv+0x11e>
   b599e:	ea41 0100 	orr.w	r1, r1, r0
   b59a2:	f04f 0000 	mov.w	r0, #0
   b59a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b59aa:	e7b6      	b.n	b591a <__aeabi_ddiv+0x82>
   b59ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b59b0:	bf04      	itt	eq
   b59b2:	4301      	orreq	r1, r0
   b59b4:	2000      	moveq	r0, #0
   b59b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b59ba:	bf88      	it	hi
   b59bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b59c0:	f63f aeaf 	bhi.w	b5722 <__aeabi_dmul+0xde>
   b59c4:	ebb5 0c03 	subs.w	ip, r5, r3
   b59c8:	bf04      	itt	eq
   b59ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   b59ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b59d2:	f150 0000 	adcs.w	r0, r0, #0
   b59d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b59da:	bd70      	pop	{r4, r5, r6, pc}
   b59dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b59e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b59e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b59e8:	bfc2      	ittt	gt
   b59ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   b59ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b59f2:	bd70      	popgt	{r4, r5, r6, pc}
   b59f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b59f8:	f04f 0e00 	mov.w	lr, #0
   b59fc:	3c01      	subs	r4, #1
   b59fe:	e690      	b.n	b5722 <__aeabi_dmul+0xde>
   b5a00:	ea45 0e06 	orr.w	lr, r5, r6
   b5a04:	e68d      	b.n	b5722 <__aeabi_dmul+0xde>
   b5a06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5a0a:	ea94 0f0c 	teq	r4, ip
   b5a0e:	bf08      	it	eq
   b5a10:	ea95 0f0c 	teqeq	r5, ip
   b5a14:	f43f af3b 	beq.w	b588e <__aeabi_dmul+0x24a>
   b5a18:	ea94 0f0c 	teq	r4, ip
   b5a1c:	d10a      	bne.n	b5a34 <__aeabi_ddiv+0x19c>
   b5a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5a22:	f47f af34 	bne.w	b588e <__aeabi_dmul+0x24a>
   b5a26:	ea95 0f0c 	teq	r5, ip
   b5a2a:	f47f af25 	bne.w	b5878 <__aeabi_dmul+0x234>
   b5a2e:	4610      	mov	r0, r2
   b5a30:	4619      	mov	r1, r3
   b5a32:	e72c      	b.n	b588e <__aeabi_dmul+0x24a>
   b5a34:	ea95 0f0c 	teq	r5, ip
   b5a38:	d106      	bne.n	b5a48 <__aeabi_ddiv+0x1b0>
   b5a3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5a3e:	f43f aefd 	beq.w	b583c <__aeabi_dmul+0x1f8>
   b5a42:	4610      	mov	r0, r2
   b5a44:	4619      	mov	r1, r3
   b5a46:	e722      	b.n	b588e <__aeabi_dmul+0x24a>
   b5a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5a4c:	bf18      	it	ne
   b5a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5a52:	f47f aec5 	bne.w	b57e0 <__aeabi_dmul+0x19c>
   b5a56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5a5a:	f47f af0d 	bne.w	b5878 <__aeabi_dmul+0x234>
   b5a5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5a62:	f47f aeeb 	bne.w	b583c <__aeabi_dmul+0x1f8>
   b5a66:	e712      	b.n	b588e <__aeabi_dmul+0x24a>

000b5a68 <__aeabi_d2f>:
   b5a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b5a70:	bf24      	itt	cs
   b5a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b5a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b5a7a:	d90d      	bls.n	b5a98 <__aeabi_d2f+0x30>
   b5a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b5a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b5a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b5a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b5a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b5a90:	bf08      	it	eq
   b5a92:	f020 0001 	biceq.w	r0, r0, #1
   b5a96:	4770      	bx	lr
   b5a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b5a9c:	d121      	bne.n	b5ae2 <__aeabi_d2f+0x7a>
   b5a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b5aa2:	bfbc      	itt	lt
   b5aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b5aa8:	4770      	bxlt	lr
   b5aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b5ab2:	f1c2 0218 	rsb	r2, r2, #24
   b5ab6:	f1c2 0c20 	rsb	ip, r2, #32
   b5aba:	fa10 f30c 	lsls.w	r3, r0, ip
   b5abe:	fa20 f002 	lsr.w	r0, r0, r2
   b5ac2:	bf18      	it	ne
   b5ac4:	f040 0001 	orrne.w	r0, r0, #1
   b5ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b5ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b5ad4:	ea40 000c 	orr.w	r0, r0, ip
   b5ad8:	fa23 f302 	lsr.w	r3, r3, r2
   b5adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b5ae0:	e7cc      	b.n	b5a7c <__aeabi_d2f+0x14>
   b5ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b5ae6:	d107      	bne.n	b5af8 <__aeabi_d2f+0x90>
   b5ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b5aec:	bf1e      	ittt	ne
   b5aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b5af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b5af6:	4770      	bxne	lr
   b5af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b5afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b5b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b5b04:	4770      	bx	lr
   b5b06:	bf00      	nop

000b5b08 <atexit>:
   b5b08:	2300      	movs	r3, #0
   b5b0a:	4601      	mov	r1, r0
   b5b0c:	461a      	mov	r2, r3
   b5b0e:	4618      	mov	r0, r3
   b5b10:	f000 b84c 	b.w	b5bac <__register_exitproc>

000b5b14 <memcpy>:
   b5b14:	440a      	add	r2, r1
   b5b16:	4291      	cmp	r1, r2
   b5b18:	f100 33ff 	add.w	r3, r0, #4294967295
   b5b1c:	d100      	bne.n	b5b20 <memcpy+0xc>
   b5b1e:	4770      	bx	lr
   b5b20:	b510      	push	{r4, lr}
   b5b22:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5b26:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5b2a:	4291      	cmp	r1, r2
   b5b2c:	d1f9      	bne.n	b5b22 <memcpy+0xe>
   b5b2e:	bd10      	pop	{r4, pc}

000b5b30 <memset>:
   b5b30:	4402      	add	r2, r0
   b5b32:	4603      	mov	r3, r0
   b5b34:	4293      	cmp	r3, r2
   b5b36:	d100      	bne.n	b5b3a <memset+0xa>
   b5b38:	4770      	bx	lr
   b5b3a:	f803 1b01 	strb.w	r1, [r3], #1
   b5b3e:	e7f9      	b.n	b5b34 <memset+0x4>

000b5b40 <srand>:
   b5b40:	b538      	push	{r3, r4, r5, lr}
   b5b42:	4b10      	ldr	r3, [pc, #64]	; (b5b84 <srand+0x44>)
   b5b44:	681d      	ldr	r5, [r3, #0]
   b5b46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b48:	4604      	mov	r4, r0
   b5b4a:	b9b3      	cbnz	r3, b5b7a <srand+0x3a>
   b5b4c:	2018      	movs	r0, #24
   b5b4e:	f7fe fda3 	bl	b4698 <malloc>
   b5b52:	4602      	mov	r2, r0
   b5b54:	63a8      	str	r0, [r5, #56]	; 0x38
   b5b56:	b920      	cbnz	r0, b5b62 <srand+0x22>
   b5b58:	4b0b      	ldr	r3, [pc, #44]	; (b5b88 <srand+0x48>)
   b5b5a:	480c      	ldr	r0, [pc, #48]	; (b5b8c <srand+0x4c>)
   b5b5c:	2142      	movs	r1, #66	; 0x42
   b5b5e:	f7fe fdb3 	bl	b46c8 <__assert_func>
   b5b62:	490b      	ldr	r1, [pc, #44]	; (b5b90 <srand+0x50>)
   b5b64:	4b0b      	ldr	r3, [pc, #44]	; (b5b94 <srand+0x54>)
   b5b66:	e9c0 1300 	strd	r1, r3, [r0]
   b5b6a:	4b0b      	ldr	r3, [pc, #44]	; (b5b98 <srand+0x58>)
   b5b6c:	6083      	str	r3, [r0, #8]
   b5b6e:	230b      	movs	r3, #11
   b5b70:	8183      	strh	r3, [r0, #12]
   b5b72:	2100      	movs	r1, #0
   b5b74:	2001      	movs	r0, #1
   b5b76:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5b7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b7c:	2200      	movs	r2, #0
   b5b7e:	611c      	str	r4, [r3, #16]
   b5b80:	615a      	str	r2, [r3, #20]
   b5b82:	bd38      	pop	{r3, r4, r5, pc}
   b5b84:	2003e5fc 	.word	0x2003e5fc
   b5b88:	000b5ead 	.word	0x000b5ead
   b5b8c:	000b5ec4 	.word	0x000b5ec4
   b5b90:	abcd330e 	.word	0xabcd330e
   b5b94:	e66d1234 	.word	0xe66d1234
   b5b98:	0005deec 	.word	0x0005deec

000b5b9c <strlen>:
   b5b9c:	4603      	mov	r3, r0
   b5b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5ba2:	2a00      	cmp	r2, #0
   b5ba4:	d1fb      	bne.n	b5b9e <strlen+0x2>
   b5ba6:	1a18      	subs	r0, r3, r0
   b5ba8:	3801      	subs	r0, #1
   b5baa:	4770      	bx	lr

000b5bac <__register_exitproc>:
   b5bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5bb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5c6c <__register_exitproc+0xc0>
   b5bb4:	4606      	mov	r6, r0
   b5bb6:	f8d8 0000 	ldr.w	r0, [r8]
   b5bba:	461f      	mov	r7, r3
   b5bbc:	460d      	mov	r5, r1
   b5bbe:	4691      	mov	r9, r2
   b5bc0:	f000 f856 	bl	b5c70 <__retarget_lock_acquire_recursive>
   b5bc4:	4b25      	ldr	r3, [pc, #148]	; (b5c5c <__register_exitproc+0xb0>)
   b5bc6:	681c      	ldr	r4, [r3, #0]
   b5bc8:	b934      	cbnz	r4, b5bd8 <__register_exitproc+0x2c>
   b5bca:	4c25      	ldr	r4, [pc, #148]	; (b5c60 <__register_exitproc+0xb4>)
   b5bcc:	601c      	str	r4, [r3, #0]
   b5bce:	4b25      	ldr	r3, [pc, #148]	; (b5c64 <__register_exitproc+0xb8>)
   b5bd0:	b113      	cbz	r3, b5bd8 <__register_exitproc+0x2c>
   b5bd2:	681b      	ldr	r3, [r3, #0]
   b5bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5bd8:	6863      	ldr	r3, [r4, #4]
   b5bda:	2b1f      	cmp	r3, #31
   b5bdc:	dd07      	ble.n	b5bee <__register_exitproc+0x42>
   b5bde:	f8d8 0000 	ldr.w	r0, [r8]
   b5be2:	f000 f847 	bl	b5c74 <__retarget_lock_release_recursive>
   b5be6:	f04f 30ff 	mov.w	r0, #4294967295
   b5bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5bee:	b34e      	cbz	r6, b5c44 <__register_exitproc+0x98>
   b5bf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5bf4:	b988      	cbnz	r0, b5c1a <__register_exitproc+0x6e>
   b5bf6:	4b1c      	ldr	r3, [pc, #112]	; (b5c68 <__register_exitproc+0xbc>)
   b5bf8:	b923      	cbnz	r3, b5c04 <__register_exitproc+0x58>
   b5bfa:	f8d8 0000 	ldr.w	r0, [r8]
   b5bfe:	f000 f838 	bl	b5c72 <__retarget_lock_release>
   b5c02:	e7f0      	b.n	b5be6 <__register_exitproc+0x3a>
   b5c04:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5c08:	f7fe fd46 	bl	b4698 <malloc>
   b5c0c:	2800      	cmp	r0, #0
   b5c0e:	d0f4      	beq.n	b5bfa <__register_exitproc+0x4e>
   b5c10:	2300      	movs	r3, #0
   b5c12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5c16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5c1a:	6863      	ldr	r3, [r4, #4]
   b5c1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5c20:	2201      	movs	r2, #1
   b5c22:	409a      	lsls	r2, r3
   b5c24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5c28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5c2c:	4313      	orrs	r3, r2
   b5c2e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5c32:	2e02      	cmp	r6, #2
   b5c34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5c38:	bf02      	ittt	eq
   b5c3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5c3e:	4313      	orreq	r3, r2
   b5c40:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5c44:	6863      	ldr	r3, [r4, #4]
   b5c46:	f8d8 0000 	ldr.w	r0, [r8]
   b5c4a:	1c5a      	adds	r2, r3, #1
   b5c4c:	3302      	adds	r3, #2
   b5c4e:	6062      	str	r2, [r4, #4]
   b5c50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5c54:	f000 f80e 	bl	b5c74 <__retarget_lock_release_recursive>
   b5c58:	2000      	movs	r0, #0
   b5c5a:	e7c6      	b.n	b5bea <__register_exitproc+0x3e>
   b5c5c:	2003e7e8 	.word	0x2003e7e8
   b5c60:	2003e75c 	.word	0x2003e75c
   b5c64:	00000000 	.word	0x00000000
   b5c68:	000b4699 	.word	0x000b4699
   b5c6c:	2003e660 	.word	0x2003e660

000b5c70 <__retarget_lock_acquire_recursive>:
   b5c70:	4770      	bx	lr

000b5c72 <__retarget_lock_release>:
   b5c72:	4770      	bx	lr

000b5c74 <__retarget_lock_release_recursive>:
   b5c74:	4770      	bx	lr

000b5c76 <link_code_end>:
	...

000b5c78 <dynalib_user>:
   b5c78:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b5c88:	0000 0000 6553 6972 6c61 6920 2073 6f63     ....Serial is co
   b5c98:	6e6e 6365 6574 0064 6142 6573 696c 656e     nnected.Baseline
   b5ca8:	7620 6c61 6575 6920 3a73 2520 0066 4157      value is: %f.WA
   b5cb8:	5449 4e49 0047 4553 534e 4e49 0047 4f44     ITING.SENSING.DO
   b5cc8:	454e 0000                                   NE..

000b5ccc <_ZTV9MagSensor>:
	...
   b5cd4:	40b3 000b 40b5 000b 6556 6968 6c63 2065     .@...@..Vehicle 
   b5ce4:	6f43 6e75 6574 2072 6e49 7469 6169 6574     Counter Initiate
   b5cf4:	0064 6425 5620 6865 6369 656c 2073 6544     d.%d Vehicles De
   b5d04:	6574 7463 6465 4d00 6761 6553 736e 726f     tected.MagSensor
   b5d14:	6920 736e 6174 636e 2065 6e69 7469 6169      instance initia
   b5d24:	696c 657a 2e64 0000                         lized...

000b5d2c <_ZTV14VehicleCounter>:
	...
   b5d34:	42b9 000b 42bb 000b                         .B...B..

000b5d3c <_ZTVN5spark13EthernetClassE>:
	...
   b5d44:	4747 000b 473d 000b 4733 000b 4729 000b     GG..=G..3G..)G..
   b5d54:	471d 000b 4711 000b 4fd5 000b 4fdd 000b     .G...G...O...O..
   b5d64:	4705 000b 46fd 000b 46f3 000b 46e9 000b     .G...F...F...F..
   b5d74:	500d 000b 7061 0070 5925 252d 2d6d 6425     .P..app.%Y-%m-%d
   b5d84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5d94:	6d69 0065                                   ime.

000b5d98 <_ZTV9IPAddress>:
	...
   b5da0:	4bc5 000b 4bb5 000b 4bb7 000b               .K...K...K..

000b5dac <_ZTV9USBSerial>:
	...
   b5db4:	4cab 000b 4d13 000b 4ce9 000b 47ad 000b     .L...M...L...G..
   b5dc4:	4cdb 000b 4cad 000b 4cbd 000b 4d0d 000b     .L...L...L...M..
   b5dd4:	4ccd 000b 4ca5 000b                         .L...L..

000b5ddc <_ZTVN5spark13CellularClassE>:
	...
   b5de4:	4e13 000b 4e09 000b 4dff 000b 4db5 000b     .N...N...M...M..
   b5df4:	4df3 000b 4de7 000b 4fd5 000b 4fdd 000b     .M...M...O...O..
   b5e04:	4ddb 000b 4dd3 000b 4dc9 000b 4dbf 000b     .M...M...M...M..
   b5e14:	500d 000b                                   .P..

000b5e18 <_ZTV11USARTSerial>:
	...
   b5e20:	4e4d 000b 4eb9 000b 4e91 000b 47ad 000b     MN...N...N...G..
   b5e30:	4e61 000b 4e7d 000b 4e6f 000b 4e8b 000b     aN..}N..oN...N..
   b5e40:	4e4f 000b 4e53 000b                         ON..SN..

000b5e48 <_ZTV7TwoWire>:
	...
   b5e50:	4eff 000b 4f49 000b 4f21 000b 4f01 000b     .N..IO..!O...O..
   b5e60:	4f29 000b 4f31 000b 4f39 000b 4f41 000b     )O..1O..9O..AO..

000b5e70 <_ZTVN5spark12NetworkClassE>:
	...
   b5e78:	4f95 000b 4f9f 000b 4fa9 000b 4fb3 000b     .O...O...O...O..
   b5e88:	4fbd 000b 4fc9 000b 4fd5 000b 4fdd 000b     .O...O...O...O..
   b5e98:	4fe5 000b 4ff1 000b 4ff9 000b 5003 000b     .O...O...O...P..
   b5ea8:	500d 000b                                   .P..

000b5eac <_ZSt7nothrow>:
   b5eac:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5ebc:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5ecc:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5edc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5eec:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5efc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5f0c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5f1c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5f2c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5f3c:	646e 632e                                    nd.c.

000b5f41 <link_const_variable_data_end>:
   b5f41:	00          	.byte	0x00
	...

000b5f44 <link_constructors_location>:
   b5f44:	000b4291 	.word	0x000b4291
   b5f48:	000b4751 	.word	0x000b4751
   b5f4c:	000b4779 	.word	0x000b4779
   b5f50:	000b479d 	.word	0x000b479d
   b5f54:	000b4a45 	.word	0x000b4a45
   b5f58:	000b4a55 	.word	0x000b4a55
   b5f5c:	000b4a71 	.word	0x000b4a71
   b5f60:	000b4e1d 	.word	0x000b4e1d
   b5f64:	000b50e5 	.word	0x000b50e5

000b5f68 <link_constructors_end>:
	...
