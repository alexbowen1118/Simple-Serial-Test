
/Users/chipmc/Documents/Maker/Particle/Utilities/Simple-Serial-Test/target/4.1.0/boron/Simple-Serial-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000049c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b89e0  000b89e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8a04  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e554  000b8a08  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000224  2003e5cc  2003e5cc  0002e5cc  2**2
                  ALLOC
  7 .module_info_suffix 0000002c  000b8a80  000b8a80  00028a80  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000b8aac  000b8aac  00028aac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015507f  00000000  00000000  00028ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001640d  00000000  00000000  0017db2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003ebf6  00000000  00000000  00193f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000031e0  00000000  00000000  001d2b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b1f0  00000000  00000000  001d5d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c5da  00000000  00000000  001e0f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004632c  00000000  00000000  0021d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d9b1  00000000  00000000  00263808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008d08  00000000  00000000  003a11bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ffff 	bl	b8034 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f821 	bl	b8084 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e554 	.word	0x2003e554
   b404c:	000b8a08 	.word	0x000b8a08
   b4050:	2003e5cc 	.word	0x2003e5cc
   b4054:	2003e5cc 	.word	0x2003e5cc
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fa7d 	bl	b7560 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b89b4 	.word	0x000b89b4
   b4080:	000b89e0 	.word	0x000b89e0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f841 	bl	b4110 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 ba1d 	b.w	b74d0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bf5f 	b.w	b4f58 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bf5d 	b.w	b4f58 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bf63 	b.w	b4f68 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fe70 	bl	b4d90 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4b61 	.word	0x000b4b61
   b40b8:	000b83d8 	.word	0x000b83d8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <setup>:
#include "Particle_Functions.h"						// Where we put all the functions specific to Particle

char currentPointRelease[6] ="0.1";
PRODUCT_VERSION(1);									// For now, we are putting nodes and gateways in the same product group - need to deconflict #

void setup() {  
   b40cc:	b508      	push	{r3, lr}

  // Initiate the MagModel.
  MagModel::instance().setup();
   b40ce:	f000 f8cf 	bl	b4270 <_ZN8MagModel8instanceEv>
   b40d2:	f000 f9c1 	bl	b4458 <_ZN8MagModel5setupEv>

  // Initialize the Particle Functions
  Particle_Functions::instance().setup();			// Initialize Particle Functions and Variables
   b40d6:	f000 fbb1 	bl	b483c <_ZN18Particle_Functions8instanceEv>
}
   b40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Particle_Functions::instance().setup();			// Initialize Particle Functions and Variables
   b40de:	f000 bbbf 	b.w	b4860 <_ZN18Particle_Functions5setupEv>

000b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40e2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40e4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40e6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40e8:	b17c      	cbz	r4, b410a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40ea:	6863      	ldr	r3, [r4, #4]
   b40ec:	3b01      	subs	r3, #1
   b40ee:	6063      	str	r3, [r4, #4]
   b40f0:	b95b      	cbnz	r3, b410a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40f2:	6823      	ldr	r3, [r4, #0]
   b40f4:	4620      	mov	r0, r4
   b40f6:	689b      	ldr	r3, [r3, #8]
   b40f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40fa:	68a3      	ldr	r3, [r4, #8]
   b40fc:	3b01      	subs	r3, #1
   b40fe:	60a3      	str	r3, [r4, #8]
   b4100:	b91b      	cbnz	r3, b410a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4102:	6823      	ldr	r3, [r4, #0]
   b4104:	4620      	mov	r0, r4
   b4106:	68db      	ldr	r3, [r3, #12]
   b4108:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b410a:	4628      	mov	r0, r5
   b410c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4110 <loop>:

void loop() {
   b4110:	b530      	push	{r4, r5, lr}
   b4112:	b08f      	sub	sp, #60	; 0x3c

  // Ask the magnetometer for passData.
  float* passData = MagModel::instance().getPassData();
   b4114:	f000 f8ac 	bl	b4270 <_ZN8MagModel8instanceEv>
   b4118:	f000 f966 	bl	b43e8 <_ZN8MagModel11getPassDataEv>
   b411c:	4604      	mov	r4, r0

  // Loop MagModel for next iteration.
  MagModel::instance().loop();
   b411e:	f000 f8a7 	bl	b4270 <_ZN8MagModel8instanceEv>
   b4122:	f000 f8b7 	bl	b4294 <_ZN8MagModel4loopEv>

  // If passData came in, publish events.
  if(passData != 0) {
   b4126:	2c00      	cmp	r4, #0
   b4128:	d05d      	beq.n	b41e6 <loop+0xd6>

    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        passData[3],
                        passData[0],
                        passData[1],
                        passData[2] ));
   b412a:	68e0      	ldr	r0, [r4, #12]
   b412c:	4d2f      	ldr	r5, [pc, #188]	; (b41ec <loop+0xdc>)
   b412e:	f003 fcb5 	bl	b7a9c <__aeabi_f2d>
   b4132:	4602      	mov	r2, r0
   b4134:	460b      	mov	r3, r1
   b4136:	68a0      	ldr	r0, [r4, #8]
   b4138:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b413c:	f003 fcae 	bl	b7a9c <__aeabi_f2d>
   b4140:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4144:	6860      	ldr	r0, [r4, #4]
   b4146:	f003 fca9 	bl	b7a9c <__aeabi_f2d>
   b414a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b414e:	6820      	ldr	r0, [r4, #0]
   b4150:	f003 fca4 	bl	b7a9c <__aeabi_f2d>
   b4154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b4158:	e9cd 0100 	strd	r0, r1, [sp]
   b415c:	a80a      	add	r0, sp, #40	; 0x28
   b415e:	4924      	ldr	r1, [pc, #144]	; (b41f0 <loop+0xe0>)
   b4160:	f003 f820 	bl	b71a4 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4164:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4168:	4922      	ldr	r1, [pc, #136]	; (b41f4 <loop+0xe4>)
   b416a:	f88d 3000 	strb.w	r3, [sp]
   b416e:	a808      	add	r0, sp, #32
   b4170:	233c      	movs	r3, #60	; 0x3c
   b4172:	f001 f935 	bl	b53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4176:	a809      	add	r0, sp, #36	; 0x24
   b4178:	f7ff ffb3 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b417c:	a80a      	add	r0, sp, #40	; 0x28
   b417e:	f002 ff21 	bl	b6fc4 <_ZN6StringD1Ev>

    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        passData[7],
                        passData[4],
                        passData[5],
                        passData[6]));
   b4182:	69e0      	ldr	r0, [r4, #28]
   b4184:	f003 fc8a 	bl	b7a9c <__aeabi_f2d>
   b4188:	4602      	mov	r2, r0
   b418a:	460b      	mov	r3, r1
   b418c:	69a0      	ldr	r0, [r4, #24]
   b418e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b4192:	f003 fc83 	bl	b7a9c <__aeabi_f2d>
   b4196:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b419a:	6960      	ldr	r0, [r4, #20]
   b419c:	f003 fc7e 	bl	b7a9c <__aeabi_f2d>
   b41a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b41a4:	6920      	ldr	r0, [r4, #16]
   b41a6:	f003 fc79 	bl	b7a9c <__aeabi_f2d>
   b41aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b41ae:	e9cd 0100 	strd	r0, r1, [sp]
   b41b2:	a80a      	add	r0, sp, #40	; 0x28
   b41b4:	490e      	ldr	r1, [pc, #56]	; (b41f0 <loop+0xe0>)
   b41b6:	f002 fff5 	bl	b71a4 <_ZN6String6formatEPKcz>
   b41ba:	782b      	ldrb	r3, [r5, #0]
   b41bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b41be:	490e      	ldr	r1, [pc, #56]	; (b41f8 <loop+0xe8>)
   b41c0:	f88d 3000 	strb.w	r3, [sp]
   b41c4:	a808      	add	r0, sp, #32
   b41c6:	233c      	movs	r3, #60	; 0x3c
   b41c8:	f001 f90a 	bl	b53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b41cc:	a809      	add	r0, sp, #36	; 0x24
   b41ce:	f7ff ff88 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b41d2:	a80a      	add	r0, sp, #40	; 0x28
   b41d4:	f002 fef6 	bl	b6fc4 <_ZN6StringD1Ev>
    
    MagModel::instance().getTotalVehicleCount();           
   b41d8:	f000 f84a 	bl	b4270 <_ZN8MagModel8instanceEv>
  }
   b41dc:	b00f      	add	sp, #60	; 0x3c
   b41de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MagModel::instance().getTotalVehicleCount();           
   b41e2:	f000 b9f9 	b.w	b45d8 <_ZN8MagModel20getTotalVehicleCountEv>
   b41e6:	b00f      	add	sp, #60	; 0x3c
   b41e8:	bd30      	pop	{r4, r5, pc}
   b41ea:	bf00      	nop
   b41ec:	2003e5cc 	.word	0x2003e5cc
   b41f0:	000b83ed 	.word	0x000b83ed
   b41f4:	000b841c 	.word	0x000b841c
   b41f8:	000b842f 	.word	0x000b842f

000b41fc <_GLOBAL__sub_I_currentPointRelease>:
   b41fc:	b510      	push	{r4, lr}
        val_(val) {
   b41fe:	4b09      	ldr	r3, [pc, #36]	; (b4224 <_GLOBAL__sub_I_currentPointRelease+0x28>)
   b4200:	2400      	movs	r4, #0
   b4202:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4204:	f003 f9de 	bl	b75c4 <spark_protocol_instance>
   b4208:	4623      	mov	r3, r4
   b420a:	4622      	mov	r2, r4
   b420c:	2101      	movs	r1, #1
   b420e:	f003 f9e9 	bl	b75e4 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4212:	f003 f9d7 	bl	b75c4 <spark_protocol_instance>
   b4216:	4623      	mov	r3, r4
   b4218:	4622      	mov	r2, r4
   b421a:	210d      	movs	r1, #13
   b421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4220:	f003 b9d8 	b.w	b75d4 <spark_protocol_set_product_id>
   b4224:	2003e5cc 	.word	0x2003e5cc

000b4228 <_ZN8MagModelD1Ev>:

MagModel::MagModel() {
}

MagModel::~MagModel() {
}
   b4228:	4770      	bx	lr

000b422a <_ZN8MagModelD0Ev>:
MagModel::~MagModel() {
   b422a:	b510      	push	{r4, lr}
}
   b422c:	2104      	movs	r1, #4
MagModel::~MagModel() {
   b422e:	4604      	mov	r4, r0
}
   b4230:	f7ff ff35 	bl	b409e <_ZdlPvj>
   b4234:	4620      	mov	r0, r4
   b4236:	bd10      	pop	{r4, pc}

000b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4238:	b513      	push	{r0, r1, r4, lr}
   b423a:	4b05      	ldr	r3, [pc, #20]	; (b4250 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b423c:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b423e:	f88d 3000 	strb.w	r3, [sp]
   b4242:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4244:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4246:	f001 f8cb 	bl	b53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b424a:	4620      	mov	r0, r4
   b424c:	b002      	add	sp, #8
   b424e:	bd10      	pop	{r4, pc}
   b4250:	2003e5f4 	.word	0x2003e5f4

000b4254 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4254:	b40e      	push	{r1, r2, r3}
   b4256:	b503      	push	{r0, r1, lr}
   b4258:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b425a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b425c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4260:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4262:	f002 fd86 	bl	b6d72 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4266:	b002      	add	sp, #8
   b4268:	f85d eb04 	ldr.w	lr, [sp], #4
   b426c:	b003      	add	sp, #12
   b426e:	4770      	bx	lr

000b4270 <_ZN8MagModel8instanceEv>:
MagModel &MagModel::instance() {
   b4270:	b510      	push	{r4, lr}
  if (!_instance) {
   b4272:	4c06      	ldr	r4, [pc, #24]	; (b428c <_ZN8MagModel8instanceEv+0x1c>)
   b4274:	6823      	ldr	r3, [r4, #0]
   b4276:	b933      	cbnz	r3, b4286 <_ZN8MagModel8instanceEv+0x16>
      _instance = new MagModel();
   b4278:	2004      	movs	r0, #4
   b427a:	f7ff ff0c 	bl	b4096 <_Znwj>
   b427e:	b108      	cbz	r0, b4284 <_ZN8MagModel8instanceEv+0x14>
MagModel::MagModel() {
   b4280:	4b03      	ldr	r3, [pc, #12]	; (b4290 <_ZN8MagModel8instanceEv+0x20>)
   b4282:	6003      	str	r3, [r0, #0]
      _instance = new MagModel();
   b4284:	6020      	str	r0, [r4, #0]
}
   b4286:	6820      	ldr	r0, [r4, #0]
   b4288:	bd10      	pop	{r4, pc}
   b428a:	bf00      	nop
   b428c:	2003e624 	.word	0x2003e624
   b4290:	000b84f8 	.word	0x000b84f8

000b4294 <_ZN8MagModel4loopEv>:
 * Serial data format coming from magnetometer:
 * 
 * threshold(int),reset_threshold(int),baseline(float),mag_x(float),
 * mag_y(float),mag_z(float),mag_RMS(float),vehicle_sensed(int)/n
 */
void MagModel::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b4294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    if(ready == 0) {
   b4298:	4e45      	ldr	r6, [pc, #276]	; (b43b0 <_ZN8MagModel4loopEv+0x11c>)
   b429a:	6835      	ldr	r5, [r6, #0]
void MagModel::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b429c:	b085      	sub	sp, #20
    if(ready == 0) {
   b429e:	2d00      	cmp	r5, #0
   b42a0:	d15a      	bne.n	b4358 <_ZN8MagModel4loopEv+0xc4>

        Serial1.readStringUntil('\n'); //wait for clean line        
   b42a2:	f003 fa6b 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42a6:	220a      	movs	r2, #10
   b42a8:	4601      	mov	r1, r0
   b42aa:	4668      	mov	r0, sp
   b42ac:	f002 fe72 	bl	b6f94 <_ZN6Stream15readStringUntilEc>
   b42b0:	4668      	mov	r0, sp
   b42b2:	f002 fe87 	bl	b6fc4 <_ZN6StringD1Ev>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b42b6:	f003 fa61 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42ba:	f002 fe04 	bl	b6ec6 <_ZN6Stream8parseIntEv>
   b42be:	f8df a118 	ldr.w	sl, [pc, #280]	; b43d8 <_ZN8MagModel4loopEv+0x144>
        threshold = Serial1.parseInt(); //parse threshold
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
        baseline = Serial1.parseFloat(); //parse baseline
        mag_x = Serial1.parseFloat(); //store mag_x
   b42c2:	f8df 9118 	ldr.w	r9, [pc, #280]	; b43dc <_ZN8MagModel4loopEv+0x148>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b42c6:	f8ca 0000 	str.w	r0, [sl]
        threshold = Serial1.parseInt(); //parse threshold
   b42ca:	f003 fa57 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42ce:	f002 fdfa 	bl	b6ec6 <_ZN6Stream8parseIntEv>
   b42d2:	4b38      	ldr	r3, [pc, #224]	; (b43b4 <_ZN8MagModel4loopEv+0x120>)
        mag_y = Serial1.parseFloat(); //store mag_y
   b42d4:	f8df 8108 	ldr.w	r8, [pc, #264]	; b43e0 <_ZN8MagModel4loopEv+0x14c>
        threshold = Serial1.parseInt(); //parse threshold
   b42d8:	6018      	str	r0, [r3, #0]
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
   b42da:	f003 fa4f 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42de:	f002 fdf2 	bl	b6ec6 <_ZN6Stream8parseIntEv>
   b42e2:	4b35      	ldr	r3, [pc, #212]	; (b43b8 <_ZN8MagModel4loopEv+0x124>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b42e4:	4f35      	ldr	r7, [pc, #212]	; (b43bc <_ZN8MagModel4loopEv+0x128>)
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
   b42e6:	6018      	str	r0, [r3, #0]
        baseline = Serial1.parseFloat(); //parse baseline
   b42e8:	f003 fa48 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42ec:	f002 fe4e 	bl	b6f8c <_ZN6Stream10parseFloatEv>
   b42f0:	4b33      	ldr	r3, [pc, #204]	; (b43c0 <_ZN8MagModel4loopEv+0x12c>)
        mag_RMS = Serial1.parseFloat(); //store mag_RMS

        // Simple FSM for vehicle_sensed state
        switch(state){
   b42f2:	4c34      	ldr	r4, [pc, #208]	; (b43c4 <_ZN8MagModel4loopEv+0x130>)
        baseline = Serial1.parseFloat(); //parse baseline
   b42f4:	ed83 0a00 	vstr	s0, [r3]
        mag_x = Serial1.parseFloat(); //store mag_x
   b42f8:	f003 fa40 	bl	b777c <_Z22__fetch_global_Serial1v>
   b42fc:	f002 fe46 	bl	b6f8c <_ZN6Stream10parseFloatEv>
   b4300:	ed89 0a00 	vstr	s0, [r9]
        mag_y = Serial1.parseFloat(); //store mag_y
   b4304:	f003 fa3a 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4308:	f002 fe40 	bl	b6f8c <_ZN6Stream10parseFloatEv>
   b430c:	ed88 0a00 	vstr	s0, [r8]
        mag_z = Serial1.parseFloat(); //store mag_z
   b4310:	f003 fa34 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4314:	f002 fe3a 	bl	b6f8c <_ZN6Stream10parseFloatEv>
   b4318:	ed87 0a00 	vstr	s0, [r7]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b431c:	f003 fa2e 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4320:	f002 fe34 	bl	b6f8c <_ZN6Stream10parseFloatEv>
        switch(state){
   b4324:	6821      	ldr	r1, [r4, #0]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4326:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b43e4 <_ZN8MagModel4loopEv+0x150>
        switch(state){
   b432a:	2901      	cmp	r1, #1
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b432c:	ed8b 0a00 	vstr	s0, [fp]
        switch(state){
   b4330:	d015      	beq.n	b435e <_ZN8MagModel4loopEv+0xca>
   b4332:	2902      	cmp	r1, #2
   b4334:	d02a      	beq.n	b438c <_ZN8MagModel4loopEv+0xf8>
   b4336:	b979      	cbnz	r1, b4358 <_ZN8MagModel4loopEv+0xc4>

            // WAITING
            case 0: 

                if(vehicle_sensed == 1){ //capture trigger values
   b4338:	f8da 2000 	ldr.w	r2, [sl]
   b433c:	2a01      	cmp	r2, #1
   b433e:	d10b      	bne.n	b4358 <_ZN8MagModel4loopEv+0xc4>

                    passData[0] = mag_x;
   b4340:	4b21      	ldr	r3, [pc, #132]	; (b43c8 <_ZN8MagModel4loopEv+0x134>)
   b4342:	f8d9 1000 	ldr.w	r1, [r9]
   b4346:	6019      	str	r1, [r3, #0]
                    passData[1] = mag_y;
   b4348:	f8d8 1000 	ldr.w	r1, [r8]
   b434c:	6059      	str	r1, [r3, #4]
                    passData[2] = mag_z;
   b434e:	6839      	ldr	r1, [r7, #0]
   b4350:	6099      	str	r1, [r3, #8]
                    passData[3] = mag_RMS;
   b4352:	ed83 0a03 	vstr	s0, [r3, #12]

                    state = 1;
   b4356:	6022      	str	r2, [r4, #0]

            default:
                break;
        }
    }
}
   b4358:	b005      	add	sp, #20
   b435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                digitalWrite(Light, HIGH);
   b435e:	4b1b      	ldr	r3, [pc, #108]	; (b43cc <_ZN8MagModel4loopEv+0x138>)
   b4360:	8818      	ldrh	r0, [r3, #0]
   b4362:	f003 f996 	bl	b7692 <digitalWrite>
                if(vehicle_sensed == 0){ //capture reset values
   b4366:	f8da 3000 	ldr.w	r3, [sl]
   b436a:	2b00      	cmp	r3, #0
   b436c:	d1f4      	bne.n	b4358 <_ZN8MagModel4loopEv+0xc4>
                    passData[4] = mag_x;
   b436e:	4b16      	ldr	r3, [pc, #88]	; (b43c8 <_ZN8MagModel4loopEv+0x134>)
   b4370:	f8d9 2000 	ldr.w	r2, [r9]
   b4374:	611a      	str	r2, [r3, #16]
                    passData[5] = mag_y;
   b4376:	f8d8 2000 	ldr.w	r2, [r8]
   b437a:	615a      	str	r2, [r3, #20]
                    passData[6] = mag_z;
   b437c:	683a      	ldr	r2, [r7, #0]
   b437e:	619a      	str	r2, [r3, #24]
                    passData[7] = mag_RMS;
   b4380:	f8db 2000 	ldr.w	r2, [fp]
   b4384:	61da      	str	r2, [r3, #28]
                    state = 2;
   b4386:	2302      	movs	r3, #2
   b4388:	6023      	str	r3, [r4, #0]
   b438a:	e7e5      	b.n	b4358 <_ZN8MagModel4loopEv+0xc4>
                digitalWrite(Light, LOW);
   b438c:	4b0f      	ldr	r3, [pc, #60]	; (b43cc <_ZN8MagModel4loopEv+0x138>)
   b438e:	4629      	mov	r1, r5
   b4390:	8818      	ldrh	r0, [r3, #0]
   b4392:	f003 f97e 	bl	b7692 <digitalWrite>
                ++vehicleCount;
   b4396:	4a0e      	ldr	r2, [pc, #56]	; (b43d0 <_ZN8MagModel4loopEv+0x13c>)
                state = 0;
   b4398:	6025      	str	r5, [r4, #0]
                ++vehicleCount;
   b439a:	6813      	ldr	r3, [r2, #0]
   b439c:	3301      	adds	r3, #1
   b439e:	6013      	str	r3, [r2, #0]
                ++totalVehicleCount;
   b43a0:	4a0c      	ldr	r2, [pc, #48]	; (b43d4 <_ZN8MagModel4loopEv+0x140>)
   b43a2:	6813      	ldr	r3, [r2, #0]
   b43a4:	3301      	adds	r3, #1
   b43a6:	6013      	str	r3, [r2, #0]
                ready = 1;
   b43a8:	2301      	movs	r3, #1
   b43aa:	6033      	str	r3, [r6, #0]
}
   b43ac:	e7d4      	b.n	b4358 <_ZN8MagModel4loopEv+0xc4>
   b43ae:	bf00      	nop
   b43b0:	2003e5ec 	.word	0x2003e5ec
   b43b4:	2003e620 	.word	0x2003e620
   b43b8:	2003e5d8 	.word	0x2003e5d8
   b43bc:	2003e5e8 	.word	0x2003e5e8
   b43c0:	2003e5fc 	.word	0x2003e5fc
   b43c4:	2003e5f0 	.word	0x2003e5f0
   b43c8:	2003e600 	.word	0x2003e600
   b43cc:	2003e554 	.word	0x2003e554
   b43d0:	2003e5d0 	.word	0x2003e5d0
   b43d4:	2003e5dc 	.word	0x2003e5dc
   b43d8:	2003e5d4 	.word	0x2003e5d4
   b43dc:	2003e5e0 	.word	0x2003e5e0
   b43e0:	2003e5e4 	.word	0x2003e5e4
   b43e4:	2003e5f8 	.word	0x2003e5f8

000b43e8 <_ZN8MagModel11getPassDataEv>:

float* MagModel::getPassData(){
    if(ready == 1){
   b43e8:	4b03      	ldr	r3, [pc, #12]	; (b43f8 <_ZN8MagModel11getPassDataEv+0x10>)
   b43ea:	681a      	ldr	r2, [r3, #0]
   b43ec:	2000      	movs	r0, #0
   b43ee:	2a01      	cmp	r2, #1
        ready = 0;
   b43f0:	bf04      	itt	eq
   b43f2:	6018      	streq	r0, [r3, #0]
        return passData;
   b43f4:	4801      	ldreq	r0, [pc, #4]	; (b43fc <_ZN8MagModel11getPassDataEv+0x14>)
    }
    return {};
}
   b43f6:	4770      	bx	lr
   b43f8:	2003e5ec 	.word	0x2003e5ec
   b43fc:	2003e600 	.word	0x2003e600

000b4400 <_ZN8MagModel11getBaselineEv>:

float MagModel::getBaseline(){
    if(baseline != 0) {
   b4400:	4b05      	ldr	r3, [pc, #20]	; (b4418 <_ZN8MagModel11getBaselineEv+0x18>)
   b4402:	ed93 0a00 	vldr	s0, [r3]
   b4406:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return baseline;
    }
    return -1; // error
   b440e:	bf08      	it	eq
   b4410:	eebf 0a00 	vmoveq.f32	s0, #240	; 0xbf800000 -1.0
}
   b4414:	4770      	bx	lr
   b4416:	bf00      	nop
   b4418:	2003e5fc 	.word	0x2003e5fc

000b441c <_ZN8MagModel19recalibrateBaselineEv>:

float MagModel::recalibrateBaseline(){
   b441c:	b510      	push	{r4, lr}
   b441e:	4604      	mov	r4, r0
    Serial1.println("CONF:BAS");
   b4420:	f003 f9ac 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4424:	4904      	ldr	r1, [pc, #16]	; (b4438 <_ZN8MagModel19recalibrateBaselineEv+0x1c>)
   b4426:	f002 fc7c 	bl	b6d22 <_ZN5Print7printlnEPKc>
    loop(); // Update the values
   b442a:	4620      	mov	r0, r4
   b442c:	f7ff ff32 	bl	b4294 <_ZN8MagModel4loopEv>
    return baseline;
}
   b4430:	4b02      	ldr	r3, [pc, #8]	; (b443c <_ZN8MagModel19recalibrateBaselineEv+0x20>)
   b4432:	ed93 0a00 	vldr	s0, [r3]
   b4436:	bd10      	pop	{r4, pc}
   b4438:	000b8439 	.word	0x000b8439
   b443c:	2003e5fc 	.word	0x2003e5fc

000b4440 <_ZN8MagModel12getThresholdEv>:

int MagModel::getThreshold(){
    return threshold;
}
   b4440:	4b01      	ldr	r3, [pc, #4]	; (b4448 <_ZN8MagModel12getThresholdEv+0x8>)
   b4442:	6818      	ldr	r0, [r3, #0]
   b4444:	4770      	bx	lr
   b4446:	bf00      	nop
   b4448:	2003e620 	.word	0x2003e620

000b444c <_ZN8MagModel17getResetThresholdEv>:
    return -1; // invalid
}

int MagModel::getResetThreshold(){
    return reset_threshold;
}
   b444c:	4b01      	ldr	r3, [pc, #4]	; (b4454 <_ZN8MagModel17getResetThresholdEv+0x8>)
   b444e:	6818      	ldr	r0, [r3, #0]
   b4450:	4770      	bx	lr
   b4452:	bf00      	nop
   b4454:	2003e5d8 	.word	0x2003e5d8

000b4458 <_ZN8MagModel5setupEv>:
void MagModel::setup(){
   b4458:	b570      	push	{r4, r5, r6, lr}
    pinMode(Light, OUTPUT);
   b445a:	4b2b      	ldr	r3, [pc, #172]	; (b4508 <_ZN8MagModel5setupEv+0xb0>)
   b445c:	2101      	movs	r1, #1
   b445e:	8818      	ldrh	r0, [r3, #0]
void MagModel::setup(){
   b4460:	b088      	sub	sp, #32
    pinMode(Light, OUTPUT);
   b4462:	f003 f905 	bl	b7670 <pinMode>
    Serial1.begin(115200);
   b4466:	f003 f989 	bl	b777c <_Z22__fetch_global_Serial1v>
   b446a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b446e:	f002 ff33 	bl	b72d8 <_ZN11USARTSerial5beginEm>
    while (!Serial1.available()){
   b4472:	f003 f983 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4476:	6803      	ldr	r3, [r0, #0]
   b4478:	691b      	ldr	r3, [r3, #16]
   b447a:	4798      	blx	r3
   b447c:	b918      	cbnz	r0, b4486 <_ZN8MagModel5setupEv+0x2e>
        delay(10); // Wait until serial connection is established
   b447e:	200a      	movs	r0, #10
   b4480:	f000 fdb2 	bl	b4fe8 <delay>
    while (!Serial1.available()){
   b4484:	e7f5      	b.n	b4472 <_ZN8MagModel5setupEv+0x1a>
    delay(1000);  // Make sure the serial monitor can connect
   b4486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b448a:	f000 fdad 	bl	b4fe8 <delay>
    Serial1.readStringUntil('\n'); //wait for clean line
   b448e:	f003 f975 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4492:	220a      	movs	r2, #10
   b4494:	4601      	mov	r1, r0
   b4496:	a804      	add	r0, sp, #16
   b4498:	f002 fd7c 	bl	b6f94 <_ZN6Stream15readStringUntilEc>
   b449c:	a804      	add	r0, sp, #16
   b449e:	f002 fd91 	bl	b6fc4 <_ZN6StringD1Ev>
    Serial1.parseInt(); //parse over vehicle_sensed
   b44a2:	f003 f96b 	bl	b777c <_Z22__fetch_global_Serial1v>
   b44a6:	f002 fd0e 	bl	b6ec6 <_ZN6Stream8parseIntEv>
    threshold = Serial1.parseInt();
   b44aa:	f003 f967 	bl	b777c <_Z22__fetch_global_Serial1v>
   b44ae:	f002 fd0a 	bl	b6ec6 <_ZN6Stream8parseIntEv>
   b44b2:	4c16      	ldr	r4, [pc, #88]	; (b450c <_ZN8MagModel5setupEv+0xb4>)
    reset_threshold = Serial1.parseInt();
   b44b4:	4d16      	ldr	r5, [pc, #88]	; (b4510 <_ZN8MagModel5setupEv+0xb8>)
    threshold = Serial1.parseInt();
   b44b6:	6020      	str	r0, [r4, #0]
    reset_threshold = Serial1.parseInt();
   b44b8:	f003 f960 	bl	b777c <_Z22__fetch_global_Serial1v>
   b44bc:	f002 fd03 	bl	b6ec6 <_ZN6Stream8parseIntEv>
   b44c0:	6028      	str	r0, [r5, #0]
    baseline = Serial1.parseFloat();
   b44c2:	f003 f95b 	bl	b777c <_Z22__fetch_global_Serial1v>
   b44c6:	f002 fd61 	bl	b6f8c <_ZN6Stream10parseFloatEv>
   b44ca:	4e12      	ldr	r6, [pc, #72]	; (b4514 <_ZN8MagModel5setupEv+0xbc>)
    delay(2000);
   b44cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    baseline = Serial1.parseFloat();
   b44d0:	ed86 0a00 	vstr	s0, [r6]
    delay(2000);
   b44d4:	f000 fd88 	bl	b4fe8 <delay>
    Particle.publish("Initialized", String::format("Threshold: %d, Reset Threshold: %d, Baseline %f", threshold, reset_threshold, baseline));
   b44d8:	6830      	ldr	r0, [r6, #0]
   b44da:	f003 fadf 	bl	b7a9c <__aeabi_f2d>
   b44de:	682b      	ldr	r3, [r5, #0]
   b44e0:	6822      	ldr	r2, [r4, #0]
   b44e2:	e9cd 0100 	strd	r0, r1, [sp]
   b44e6:	a804      	add	r0, sp, #16
   b44e8:	490b      	ldr	r1, [pc, #44]	; (b4518 <_ZN8MagModel5setupEv+0xc0>)
   b44ea:	f002 fe5b 	bl	b71a4 <_ZN6String6formatEPKcz>
   b44ee:	9a04      	ldr	r2, [sp, #16]
   b44f0:	490a      	ldr	r1, [pc, #40]	; (b451c <_ZN8MagModel5setupEv+0xc4>)
   b44f2:	a802      	add	r0, sp, #8
   b44f4:	f7ff fea0 	bl	b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b44f8:	a803      	add	r0, sp, #12
   b44fa:	f7ff fdf2 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b44fe:	a804      	add	r0, sp, #16
   b4500:	f002 fd60 	bl	b6fc4 <_ZN6StringD1Ev>
}
   b4504:	b008      	add	sp, #32
   b4506:	bd70      	pop	{r4, r5, r6, pc}
   b4508:	2003e554 	.word	0x2003e554
   b450c:	2003e620 	.word	0x2003e620
   b4510:	2003e5d8 	.word	0x2003e5d8
   b4514:	2003e5fc 	.word	0x2003e5fc
   b4518:	000b8442 	.word	0x000b8442
   b451c:	000b8472 	.word	0x000b8472

000b4520 <_ZN8MagModel12setThresholdEi>:
int MagModel::setThreshold(int thres){
   b4520:	b530      	push	{r4, r5, lr}
    if(thres <= MAX_THRESHOLD) {
   b4522:	2964      	cmp	r1, #100	; 0x64
int MagModel::setThreshold(int thres){
   b4524:	b087      	sub	sp, #28
   b4526:	4605      	mov	r5, r0
   b4528:	460c      	mov	r4, r1
    if(thres <= MAX_THRESHOLD) {
   b452a:	dc1d      	bgt.n	b4568 <_ZN8MagModel12setThresholdEi+0x48>
        Serial1.printlnf("CONF:THR %d", thres);
   b452c:	f003 f926 	bl	b777c <_Z22__fetch_global_Serial1v>
   b4530:	4622      	mov	r2, r4
   b4532:	490f      	ldr	r1, [pc, #60]	; (b4570 <_ZN8MagModel12setThresholdEi+0x50>)
   b4534:	f7ff fe8e 	bl	b4254 <_ZN5Print8printlnfEPKcz>
        loop(); // Update the values
   b4538:	4628      	mov	r0, r5
   b453a:	f7ff feab 	bl	b4294 <_ZN8MagModel4loopEv>
    return threshold;
   b453e:	4b0d      	ldr	r3, [pc, #52]	; (b4574 <_ZN8MagModel12setThresholdEi+0x54>)
   b4540:	681c      	ldr	r4, [r3, #0]
        Particle.publish("New Threshold Set", String(thres));
   b4542:	220a      	movs	r2, #10
   b4544:	4621      	mov	r1, r4
   b4546:	a802      	add	r0, sp, #8
   b4548:	f002 fdef 	bl	b712a <_ZN6StringC1Eih>
   b454c:	9a02      	ldr	r2, [sp, #8]
   b454e:	490a      	ldr	r1, [pc, #40]	; (b4578 <_ZN8MagModel12setThresholdEi+0x58>)
   b4550:	4668      	mov	r0, sp
   b4552:	f7ff fe71 	bl	b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4556:	a801      	add	r0, sp, #4
   b4558:	f7ff fdc3 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b455c:	a802      	add	r0, sp, #8
   b455e:	f002 fd31 	bl	b6fc4 <_ZN6StringD1Ev>
}
   b4562:	4620      	mov	r0, r4
   b4564:	b007      	add	sp, #28
   b4566:	bd30      	pop	{r4, r5, pc}
    return -1; // invalid
   b4568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b456c:	e7f9      	b.n	b4562 <_ZN8MagModel12setThresholdEi+0x42>
   b456e:	bf00      	nop
   b4570:	000b847e 	.word	0x000b847e
   b4574:	2003e620 	.word	0x2003e620
   b4578:	000b848a 	.word	0x000b848a

000b457c <_ZN8MagModel17setResetThresholdEi>:

int MagModel::setResetThreshold(int reset_thres){
   b457c:	b530      	push	{r4, r5, lr}
    if(reset_thres <= MAX_RESET_THRESHOLD) {
   b457e:	2964      	cmp	r1, #100	; 0x64
int MagModel::setResetThreshold(int reset_thres){
   b4580:	b087      	sub	sp, #28
   b4582:	4605      	mov	r5, r0
   b4584:	460c      	mov	r4, r1
    if(reset_thres <= MAX_RESET_THRESHOLD) {
   b4586:	dc1d      	bgt.n	b45c4 <_ZN8MagModel17setResetThresholdEi+0x48>
        Serial1.printlnf("CONF:RES %d", reset_thres);
   b4588:	f003 f8f8 	bl	b777c <_Z22__fetch_global_Serial1v>
   b458c:	4622      	mov	r2, r4
   b458e:	490f      	ldr	r1, [pc, #60]	; (b45cc <_ZN8MagModel17setResetThresholdEi+0x50>)
   b4590:	f7ff fe60 	bl	b4254 <_ZN5Print8printlnfEPKcz>
        loop(); // Update the values.
   b4594:	4628      	mov	r0, r5
   b4596:	f7ff fe7d 	bl	b4294 <_ZN8MagModel4loopEv>
    return reset_threshold;
   b459a:	4b0d      	ldr	r3, [pc, #52]	; (b45d0 <_ZN8MagModel17setResetThresholdEi+0x54>)
   b459c:	681c      	ldr	r4, [r3, #0]
        reset_thres = getResetThreshold();
        Particle.publish("New Reset Threshold Set", String(reset_thres));
   b459e:	220a      	movs	r2, #10
   b45a0:	4621      	mov	r1, r4
   b45a2:	a802      	add	r0, sp, #8
   b45a4:	f002 fdc1 	bl	b712a <_ZN6StringC1Eih>
   b45a8:	9a02      	ldr	r2, [sp, #8]
   b45aa:	490a      	ldr	r1, [pc, #40]	; (b45d4 <_ZN8MagModel17setResetThresholdEi+0x58>)
   b45ac:	4668      	mov	r0, sp
   b45ae:	f7ff fe43 	bl	b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b45b2:	a801      	add	r0, sp, #4
   b45b4:	f7ff fd95 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45b8:	a802      	add	r0, sp, #8
   b45ba:	f002 fd03 	bl	b6fc4 <_ZN6StringD1Ev>
        return reset_thres;
    }
    return -1; // invalid
}
   b45be:	4620      	mov	r0, r4
   b45c0:	b007      	add	sp, #28
   b45c2:	bd30      	pop	{r4, r5, pc}
    return -1; // invalid
   b45c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b45c8:	e7f9      	b.n	b45be <_ZN8MagModel17setResetThresholdEi+0x42>
   b45ca:	bf00      	nop
   b45cc:	000b849c 	.word	0x000b849c
   b45d0:	2003e5d8 	.word	0x2003e5d8
   b45d4:	000b84a8 	.word	0x000b84a8

000b45d8 <_ZN8MagModel20getTotalVehicleCountEv>:
    Particle.publish("Count Retrieved", String(count));
    Particle.publish("Count Reset");
    return count;
}

int MagModel::getTotalVehicleCount(){ 
   b45d8:	b510      	push	{r4, lr}
    Particle.publish("Total Vehicle Count", String(totalVehicleCount));
   b45da:	4c0a      	ldr	r4, [pc, #40]	; (b4604 <_ZN8MagModel20getTotalVehicleCountEv+0x2c>)
int MagModel::getTotalVehicleCount(){ 
   b45dc:	b086      	sub	sp, #24
    Particle.publish("Total Vehicle Count", String(totalVehicleCount));
   b45de:	6821      	ldr	r1, [r4, #0]
   b45e0:	220a      	movs	r2, #10
   b45e2:	a802      	add	r0, sp, #8
   b45e4:	f002 fda1 	bl	b712a <_ZN6StringC1Eih>
   b45e8:	9a02      	ldr	r2, [sp, #8]
   b45ea:	4907      	ldr	r1, [pc, #28]	; (b4608 <_ZN8MagModel20getTotalVehicleCountEv+0x30>)
   b45ec:	4668      	mov	r0, sp
   b45ee:	f7ff fe23 	bl	b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b45f2:	a801      	add	r0, sp, #4
   b45f4:	f7ff fd75 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45f8:	a802      	add	r0, sp, #8
   b45fa:	f002 fce3 	bl	b6fc4 <_ZN6StringD1Ev>
    return totalVehicleCount;
   b45fe:	6820      	ldr	r0, [r4, #0]
   b4600:	b006      	add	sp, #24
   b4602:	bd10      	pop	{r4, pc}
   b4604:	2003e5dc 	.word	0x2003e5dc
   b4608:	000b84c0 	.word	0x000b84c0

000b460c <_ZN8MagModel16getCountAndResetEv>:
int MagModel::getCountAndReset(){ 
   b460c:	b530      	push	{r4, r5, lr}
    int count = vehicleCount;
   b460e:	4b12      	ldr	r3, [pc, #72]	; (b4658 <_ZN8MagModel16getCountAndResetEv+0x4c>)
   b4610:	681c      	ldr	r4, [r3, #0]
int MagModel::getCountAndReset(){ 
   b4612:	b089      	sub	sp, #36	; 0x24
    vehicleCount = 0;
   b4614:	2500      	movs	r5, #0
    Particle.publish("Count Retrieved", String(count));
   b4616:	4621      	mov	r1, r4
   b4618:	220a      	movs	r2, #10
   b461a:	a804      	add	r0, sp, #16
    vehicleCount = 0;
   b461c:	601d      	str	r5, [r3, #0]
    Particle.publish("Count Retrieved", String(count));
   b461e:	f002 fd84 	bl	b712a <_ZN6StringC1Eih>
   b4622:	9a04      	ldr	r2, [sp, #16]
   b4624:	490d      	ldr	r1, [pc, #52]	; (b465c <_ZN8MagModel16getCountAndResetEv+0x50>)
   b4626:	a802      	add	r0, sp, #8
   b4628:	f7ff fe06 	bl	b4238 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b462c:	a803      	add	r0, sp, #12
   b462e:	f7ff fd58 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4632:	a804      	add	r0, sp, #16
   b4634:	f002 fcc6 	bl	b6fc4 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4638:	4b09      	ldr	r3, [pc, #36]	; (b4660 <_ZN8MagModel16getCountAndResetEv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b463a:	490a      	ldr	r1, [pc, #40]	; (b4664 <_ZN8MagModel16getCountAndResetEv+0x58>)
   b463c:	781b      	ldrb	r3, [r3, #0]
   b463e:	f88d 3000 	strb.w	r3, [sp]
   b4642:	462a      	mov	r2, r5
   b4644:	233c      	movs	r3, #60	; 0x3c
   b4646:	a804      	add	r0, sp, #16
   b4648:	f000 feca 	bl	b53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b464c:	a805      	add	r0, sp, #20
   b464e:	f7ff fd48 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4652:	4620      	mov	r0, r4
   b4654:	b009      	add	sp, #36	; 0x24
   b4656:	bd30      	pop	{r4, r5, pc}
   b4658:	2003e5d0 	.word	0x2003e5d0
   b465c:	000b84d4 	.word	0x000b84d4
   b4660:	2003e5f4 	.word	0x2003e5f4
   b4664:	000b84e4 	.word	0x000b84e4

000b4668 <_GLOBAL__sub_I__ZN8MagModel9_instanceE>:
        val_(val) {
   b4668:	4b01      	ldr	r3, [pc, #4]	; (b4670 <_GLOBAL__sub_I__ZN8MagModel9_instanceE+0x8>)
   b466a:	2200      	movs	r2, #0
   b466c:	701a      	strb	r2, [r3, #0]
   b466e:	4770      	bx	lr
   b4670:	2003e5f4 	.word	0x2003e5f4

000b4674 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4674:	4770      	bx	lr

000b4676 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b4676:	6a00      	ldr	r0, [r0, #32]
   b4678:	6803      	ldr	r3, [r0, #0]
   b467a:	68db      	ldr	r3, [r3, #12]
   b467c:	4718      	bx	r3

000b467e <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b467e:	4770      	bx	lr

000b4680 <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b4680:	b510      	push	{r4, lr}
}
   b4682:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b4684:	4604      	mov	r4, r0
}
   b4686:	f7ff fd0a 	bl	b409e <_ZdlPvj>
   b468a:	4620      	mov	r0, r4
   b468c:	bd10      	pop	{r4, pc}

000b468e <_ZN18Particle_Functions12setThresholdE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::setThreshold(String threshold){
   b468e:	b538      	push	{r3, r4, r5, lr}
   b4690:	460d      	mov	r5, r1
  return MagModel::instance().setThreshold(threshold.toInt()); // returns -1 if > MAX_THRESHOLD
   b4692:	f7ff fded 	bl	b4270 <_ZN8MagModel8instanceEv>
   b4696:	4604      	mov	r4, r0
   b4698:	4628      	mov	r0, r5
   b469a:	f002 fd7d 	bl	b7198 <_ZNK6String5toIntEv>
   b469e:	4601      	mov	r1, r0
   b46a0:	4620      	mov	r0, r4
}
   b46a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return MagModel::instance().setThreshold(threshold.toInt()); // returns -1 if > MAX_THRESHOLD
   b46a6:	f7ff bf3b 	b.w	b4520 <_ZN8MagModel12setThresholdEi>

000b46aa <_ZN18Particle_Functions17setResetThresholdE6String>:

int Particle_Functions::setResetThreshold(String reset_threshold){
   b46aa:	b538      	push	{r3, r4, r5, lr}
   b46ac:	460d      	mov	r5, r1
  return MagModel::instance().setResetThreshold(reset_threshold.toInt()); ;// returns -1 if > MAX_RESET_THRESHOLD
   b46ae:	f7ff fddf 	bl	b4270 <_ZN8MagModel8instanceEv>
   b46b2:	4604      	mov	r4, r0
   b46b4:	4628      	mov	r0, r5
   b46b6:	f002 fd6f 	bl	b7198 <_ZNK6String5toIntEv>
   b46ba:	4601      	mov	r1, r0
   b46bc:	4620      	mov	r0, r4
}
   b46be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return MagModel::instance().setResetThreshold(reset_threshold.toInt()); ;// returns -1 if > MAX_RESET_THRESHOLD
   b46c2:	f7ff bf5b 	b.w	b457c <_ZN8MagModel17setResetThresholdEi>

000b46c6 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b46c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b46c8:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b46ca:	6853      	ldr	r3, [r2, #4]
   b46cc:	6890      	ldr	r0, [r2, #8]
   b46ce:	6814      	ldr	r4, [r2, #0]
   b46d0:	105e      	asrs	r6, r3, #1
   b46d2:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b46d6:	07db      	lsls	r3, r3, #31
   b46d8:	bf48      	it	mi
   b46da:	5983      	ldrmi	r3, [r0, r6]
   b46dc:	4668      	mov	r0, sp
   b46de:	bf48      	it	mi
   b46e0:	591c      	ldrmi	r4, [r3, r4]
   b46e2:	f002 fceb 	bl	b70bc <_ZN6StringC1EOS_>
   b46e6:	4669      	mov	r1, sp
   b46e8:	4628      	mov	r0, r5
   b46ea:	47a0      	blx	r4
   b46ec:	4604      	mov	r4, r0
   b46ee:	4668      	mov	r0, sp
   b46f0:	f002 fc68 	bl	b6fc4 <_ZN6StringD1Ev>
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b46f4:	4620      	mov	r0, r4
   b46f6:	b004      	add	sp, #16
   b46f8:	bd70      	pop	{r4, r5, r6, pc}

000b46fa <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b46fa:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b46fc:	b538      	push	{r3, r4, r5, lr}
   b46fe:	4604      	mov	r4, r0
	switch (__op)
   b4700:	d102      	bne.n	b4708 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4702:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4704:	6023      	str	r3, [r4, #0]
	}
   b4706:	e003      	b.n	b4710 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b4708:	2a02      	cmp	r2, #2
   b470a:	d003      	beq.n	b4714 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b470c:	2a03      	cmp	r2, #3
   b470e:	d00d      	beq.n	b472c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b4710:	2000      	movs	r0, #0
   b4712:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4714:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4716:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4718:	f7ff fcbd 	bl	b4096 <_Znwj>
   b471c:	4603      	mov	r3, r0
   b471e:	2800      	cmp	r0, #0
   b4720:	d0f0      	beq.n	b4704 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b4722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b472a:	e7eb      	b.n	b4704 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b472c:	6800      	ldr	r0, [r0, #0]
   b472e:	2800      	cmp	r0, #0
   b4730:	d0ee      	beq.n	b4710 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b4732:	210c      	movs	r1, #12
   b4734:	f7ff fcb3 	bl	b409e <_ZdlPvj>
   b4738:	e7ea      	b.n	b4710 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	...

000b473c <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0>:
    static bool _function(const char *funcKey, int (T::*func)(String), T *instance) {
   b473c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b473e:	b08b      	sub	sp, #44	; 0x2c
   b4740:	466c      	mov	r4, sp
   b4742:	e884 0006 	stmia.w	r4, {r1, r2}
   b4746:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4748:	e894 0003 	ldmia.w	r4, {r0, r1}
   b474c:	ad03      	add	r5, sp, #12
   b474e:	e885 0005 	stmia.w	r5, {r0, r2}
   b4752:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4754:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b4756:	2300      	movs	r3, #0
   b4758:	9308      	str	r3, [sp, #32]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b475a:	f7ff fc9c 	bl	b4096 <_Znwj>
   b475e:	4604      	mov	r4, r0
   b4760:	b120      	cbz	r0, b476c <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b4762:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4766:	e884 0003 	stmia.w	r4, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b476a:	60a7      	str	r7, [r4, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b476c:	4b10      	ldr	r3, [pc, #64]	; (b47b0 <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x74>)
   b476e:	9309      	str	r3, [sp, #36]	; 0x24
            auto wrapper = new user_std_function_int_str_t(func);
   b4770:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b4772:	4b10      	ldr	r3, [pc, #64]	; (b47b4 <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x78>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4774:	9406      	str	r4, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   b4776:	9308      	str	r3, [sp, #32]
   b4778:	f7ff fc8d 	bl	b4096 <_Znwj>
   b477c:	4604      	mov	r4, r0
   b477e:	b178      	cbz	r0, b47a0 <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x64>
    _Function_base() : _M_manager(nullptr) { }
   b4780:	2300      	movs	r3, #0
   b4782:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4784:	9b08      	ldr	r3, [sp, #32]
      if (static_cast<bool>(__x))
   b4786:	b133      	cbz	r3, b4796 <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x5a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4788:	2202      	movs	r2, #2
   b478a:	a906      	add	r1, sp, #24
   b478c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b478e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4790:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4792:	9b08      	ldr	r3, [sp, #32]
   b4794:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b4796:	4808      	ldr	r0, [pc, #32]	; (b47b8 <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x7c>)
   b4798:	4632      	mov	r2, r6
   b479a:	4621      	mov	r1, r4
   b479c:	f000 fd29 	bl	b51f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b47a0:	9b08      	ldr	r3, [sp, #32]
   b47a2:	b11b      	cbz	r3, b47ac <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0+0x70>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b47a4:	a906      	add	r1, sp, #24
   b47a6:	2203      	movs	r2, #3
   b47a8:	4608      	mov	r0, r1
   b47aa:	4798      	blx	r3
    }
   b47ac:	b00b      	add	sp, #44	; 0x2c
   b47ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b47b0:	000b46c7 	.word	0x000b46c7
   b47b4:	000b46fb 	.word	0x000b46fb
   b47b8:	000b51cb 	.word	0x000b51cb

000b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b47bc:	2300      	movs	r3, #0
   b47be:	2209      	movs	r2, #9
   b47c0:	f000 bb42 	b.w	b4e48 <spark_variable>

000b47c4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b47c4:	4b0a      	ldr	r3, [pc, #40]	; (b47f0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b47c6:	b510      	push	{r4, lr}
   b47c8:	4604      	mov	r4, r0
   b47ca:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b47cc:	f001 fba8 	bl	b5f20 <_ZN5spark10LogManager8instanceEv>
   b47d0:	4621      	mov	r1, r4
   b47d2:	f001 fde0 	bl	b6396 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b47d6:	f002 fde7 	bl	b73a8 <_Z16_fetch_usbserialv>
   b47da:	f002 fdd9 	bl	b7390 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b47de:	4620      	mov	r0, r4
   b47e0:	4b04      	ldr	r3, [pc, #16]	; (b47f4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b47e2:	f840 3b04 	str.w	r3, [r0], #4
   b47e6:	f001 fc71 	bl	b60cc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b47ea:	4620      	mov	r0, r4
   b47ec:	bd10      	pop	{r4, pc}
   b47ee:	bf00      	nop
   b47f0:	000b85a8 	.word	0x000b85a8
   b47f4:	000b8590 	.word	0x000b8590

000b47f8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b47f8:	b510      	push	{r4, lr}
   b47fa:	4604      	mov	r4, r0
    }
   b47fc:	f7ff ffe2 	bl	b47c4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4800:	4620      	mov	r0, r4
   b4802:	2124      	movs	r1, #36	; 0x24
   b4804:	f7ff fc4b 	bl	b409e <_ZdlPvj>
   b4808:	4620      	mov	r0, r4
   b480a:	bd10      	pop	{r4, pc}

000b480c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b480c:	b40e      	push	{r1, r2, r3}
   b480e:	b500      	push	{lr}
   b4810:	b08c      	sub	sp, #48	; 0x30
   b4812:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4814:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4818:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b481c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b481e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4822:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4824:	6801      	ldr	r1, [r0, #0]
   b4826:	aa04      	add	r2, sp, #16
   b4828:	201e      	movs	r0, #30
    attr.flags = 0;
   b482a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b482e:	f000 fab7 	bl	b4da0 <log_message_v>
}
   b4832:	b00c      	add	sp, #48	; 0x30
   b4834:	f85d eb04 	ldr.w	lr, [sp], #4
   b4838:	b003      	add	sp, #12
   b483a:	4770      	bx	lr

000b483c <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b483c:	b510      	push	{r4, lr}
    if (!_instance) {
   b483e:	4c06      	ldr	r4, [pc, #24]	; (b4858 <_ZN18Particle_Functions8instanceEv+0x1c>)
   b4840:	6823      	ldr	r3, [r4, #0]
   b4842:	b933      	cbnz	r3, b4852 <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b4844:	2004      	movs	r0, #4
   b4846:	f7ff fc26 	bl	b4096 <_Znwj>
   b484a:	b108      	cbz	r0, b4850 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b484c:	4b03      	ldr	r3, [pc, #12]	; (b485c <_ZN18Particle_Functions8instanceEv+0x20>)
   b484e:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b4850:	6020      	str	r0, [r4, #0]
}
   b4852:	6820      	ldr	r0, [r4, #0]
   b4854:	bd10      	pop	{r4, pc}
   b4856:	bf00      	nop
   b4858:	2003e634 	.word	0x2003e634
   b485c:	000b85c0 	.word	0x000b85c0

000b4860 <_ZN18Particle_Functions5setupEv>:
void Particle_Functions::setup() {
   b4860:	b530      	push	{r4, r5, lr}
   b4862:	b085      	sub	sp, #20
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b4864:	4933      	ldr	r1, [pc, #204]	; (b4934 <_ZN18Particle_Functions5setupEv+0xd4>)
void Particle_Functions::setup() {
   b4866:	9001      	str	r0, [sp, #4]
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b4868:	4833      	ldr	r0, [pc, #204]	; (b4938 <_ZN18Particle_Functions5setupEv+0xd8>)
   b486a:	f7ff ffcf 	bl	b480c <_ZNK5spark6Logger4infoEPKcz>
    Particle.variable("Baseline", (double)MagModel::instance().getBaseline());
   b486e:	f7ff fcff 	bl	b4270 <_ZN8MagModel8instanceEv>
   b4872:	f7ff fdc5 	bl	b4400 <_ZN8MagModel11getBaselineEv>
   b4876:	ee10 0a10 	vmov	r0, s0
   b487a:	f003 f90f 	bl	b7a9c <__aeabi_f2d>
        return _variable(name, std::forward<ArgsT>(args)...);
   b487e:	ac02      	add	r4, sp, #8
   b4880:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4884:	4621      	mov	r1, r4
   b4886:	482d      	ldr	r0, [pc, #180]	; (b493c <_ZN18Particle_Functions5setupEv+0xdc>)
   b4888:	f7ff ff98 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.variable("Threshold", (double)MagModel::instance().getThreshold());
   b488c:	f7ff fcf0 	bl	b4270 <_ZN8MagModel8instanceEv>
   b4890:	f7ff fdd6 	bl	b4440 <_ZN8MagModel12getThresholdEv>
   b4894:	f003 f8f0 	bl	b7a78 <__aeabi_i2d>
   b4898:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b489c:	4621      	mov	r1, r4
   b489e:	4828      	ldr	r0, [pc, #160]	; (b4940 <_ZN18Particle_Functions5setupEv+0xe0>)
   b48a0:	f7ff ff8c 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.variable("Reset Threshold", (double)MagModel::instance().getResetThreshold());
   b48a4:	f7ff fce4 	bl	b4270 <_ZN8MagModel8instanceEv>
   b48a8:	f7ff fdd0 	bl	b444c <_ZN8MagModel17getResetThresholdEv>
   b48ac:	f003 f8e4 	bl	b7a78 <__aeabi_i2d>
   b48b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b48b4:	4621      	mov	r1, r4
   b48b6:	4823      	ldr	r0, [pc, #140]	; (b4944 <_ZN18Particle_Functions5setupEv+0xe4>)
   b48b8:	f7ff ff80 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.variable("Last Count", (double)MagModel::instance().getCountAndReset());
   b48bc:	f7ff fcd8 	bl	b4270 <_ZN8MagModel8instanceEv>
   b48c0:	f7ff fea4 	bl	b460c <_ZN8MagModel16getCountAndResetEv>
   b48c4:	f003 f8d8 	bl	b7a78 <__aeabi_i2d>
   b48c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b48cc:	4621      	mov	r1, r4
   b48ce:	481e      	ldr	r0, [pc, #120]	; (b4948 <_ZN18Particle_Functions5setupEv+0xe8>)
   b48d0:	f7ff ff74 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.variable("Total Vehicles", (double)MagModel::instance().getTotalVehicleCount());
   b48d4:	f7ff fccc 	bl	b4270 <_ZN8MagModel8instanceEv>
   b48d8:	f7ff fe7e 	bl	b45d8 <_ZN8MagModel20getTotalVehicleCountEv>
   b48dc:	f003 f8cc 	bl	b7a78 <__aeabi_i2d>
   b48e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b48e4:	4621      	mov	r1, r4
   b48e6:	4819      	ldr	r0, [pc, #100]	; (b494c <_ZN18Particle_Functions5setupEv+0xec>)
   b48e8:	f7ff ff68 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.variable("Recalibrate Baseline", (double)MagModel::instance().recalibrateBaseline());
   b48ec:	f7ff fcc0 	bl	b4270 <_ZN8MagModel8instanceEv>
   b48f0:	f7ff fd94 	bl	b441c <_ZN8MagModel19recalibrateBaselineEv>
   b48f4:	ee10 0a10 	vmov	r0, s0
   b48f8:	f003 f8d0 	bl	b7a9c <__aeabi_f2d>
   b48fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4900:	4621      	mov	r1, r4
   b4902:	4813      	ldr	r0, [pc, #76]	; (b4950 <_ZN18Particle_Functions5setupEv+0xf0>)
   b4904:	f7ff ff5a 	bl	b47bc <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Particle.function("Set the Threshold", &Particle_Functions::setThreshold, this);
   b4908:	2500      	movs	r5, #0
   b490a:	4a12      	ldr	r2, [pc, #72]	; (b4954 <_ZN18Particle_Functions5setupEv+0xf4>)
   b490c:	9202      	str	r2, [sp, #8]
   b490e:	9503      	str	r5, [sp, #12]
        return _function(name, args...);
   b4910:	e894 0006 	ldmia.w	r4, {r1, r2}
   b4914:	9b01      	ldr	r3, [sp, #4]
   b4916:	4810      	ldr	r0, [pc, #64]	; (b4958 <_ZN18Particle_Functions5setupEv+0xf8>)
   b4918:	f7ff ff10 	bl	b473c <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0>
    Particle.function("Set the Reset Threshold", &Particle_Functions::setResetThreshold, this);
   b491c:	4a0f      	ldr	r2, [pc, #60]	; (b495c <_ZN18Particle_Functions5setupEv+0xfc>)
   b491e:	9b01      	ldr	r3, [sp, #4]
   b4920:	480f      	ldr	r0, [pc, #60]	; (b4960 <_ZN18Particle_Functions5setupEv+0x100>)
   b4922:	e9cd 2502 	strd	r2, r5, [sp, #8]
   b4926:	e894 0006 	ldmia.w	r4, {r1, r2}
}
   b492a:	b005      	add	sp, #20
   b492c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4930:	f7ff bf04 	b.w	b473c <_ZN10CloudClass9_functionI18Particle_FunctionsEEbPKcMT_Fi6StringEPS4_.isra.0>
   b4934:	000b8500 	.word	0x000b8500
   b4938:	2003e6a4 	.word	0x2003e6a4
   b493c:	000b8554 	.word	0x000b8554
   b4940:	000b8565 	.word	0x000b8565
   b4944:	000b8577 	.word	0x000b8577
   b4948:	000b852e 	.word	0x000b852e
   b494c:	000b8539 	.word	0x000b8539
   b4950:	000b8548 	.word	0x000b8548
   b4954:	000b468f 	.word	0x000b468f
   b4958:	000b855d 	.word	0x000b855d
   b495c:	000b46ab 	.word	0x000b46ab
   b4960:	000b856f 	.word	0x000b856f

000b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4964:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4966:	e9d0 5300 	ldrd	r5, r3, [r0]
   b496a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b496c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b496e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4972:	42ae      	cmp	r6, r5
   b4974:	d004      	beq.n	b4980 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4976:	4628      	mov	r0, r5
   b4978:	f002 fb24 	bl	b6fc4 <_ZN6StringD1Ev>
   b497c:	3514      	adds	r5, #20
   b497e:	e7f8      	b.n	b4972 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4980:	6820      	ldr	r0, [r4, #0]
   b4982:	f000 faf1 	bl	b4f68 <free>
    AllocatorT::free(data_);
}
   b4986:	4620      	mov	r0, r4
   b4988:	bd70      	pop	{r4, r5, r6, pc}

000b498a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b498a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b498e:	4604      	mov	r4, r0
   b4990:	460d      	mov	r5, r1
   b4992:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4994:	d916      	bls.n	b49c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4996:	4290      	cmp	r0, r2
   b4998:	d215      	bcs.n	b49c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b499a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b499e:	1a75      	subs	r5, r6, r1
   b49a0:	f1a1 0714 	sub.w	r7, r1, #20
   b49a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b49a6:	42b7      	cmp	r7, r6
   b49a8:	d01c      	beq.n	b49e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b49aa:	b12c      	cbz	r4, b49b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b49ac:	4631      	mov	r1, r6
   b49ae:	4620      	mov	r0, r4
   b49b0:	f002 fb84 	bl	b70bc <_ZN6StringC1EOS_>
   b49b4:	7c33      	ldrb	r3, [r6, #16]
   b49b6:	7423      	strb	r3, [r4, #16]
   b49b8:	4630      	mov	r0, r6
   b49ba:	f002 fb03 	bl	b6fc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b49be:	3e14      	subs	r6, #20
   b49c0:	3c14      	subs	r4, #20
   b49c2:	e7f0      	b.n	b49a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b49c4:	d00e      	beq.n	b49e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b49c6:	42b5      	cmp	r5, r6
   b49c8:	d00c      	beq.n	b49e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b49ca:	b12c      	cbz	r4, b49d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b49cc:	4629      	mov	r1, r5
   b49ce:	4620      	mov	r0, r4
   b49d0:	f002 fb74 	bl	b70bc <_ZN6StringC1EOS_>
   b49d4:	7c2b      	ldrb	r3, [r5, #16]
   b49d6:	7423      	strb	r3, [r4, #16]
   b49d8:	4628      	mov	r0, r5
   b49da:	f002 faf3 	bl	b6fc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b49de:	3514      	adds	r5, #20
   b49e0:	3414      	adds	r4, #20
   b49e2:	e7f0      	b.n	b49c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b49e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b49e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b49ea:	2300      	movs	r3, #0
   b49ec:	e9c0 3300 	strd	r3, r3, [r0]
   b49f0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b49f2:	684f      	ldr	r7, [r1, #4]
   b49f4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b49f6:	4604      	mov	r4, r0
   b49f8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b49fa:	dd23      	ble.n	b4a44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b49fc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4a00:	fb08 f007 	mul.w	r0, r8, r7
   b4a04:	f000 faa8 	bl	b4f58 <malloc>
            if (!d) {
   b4a08:	4605      	mov	r5, r0
   b4a0a:	b1d8      	cbz	r0, b4a44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4a0c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4a10:	fb08 1202 	mla	r2, r8, r2, r1
   b4a14:	f7ff ffb9 	bl	b498a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4a18:	6820      	ldr	r0, [r4, #0]
   b4a1a:	f000 faa5 	bl	b4f68 <free>
        data_ = d;
   b4a1e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4a20:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4a22:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4a26:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4a2a:	45b8      	cmp	r8, r7
   b4a2c:	d008      	beq.n	b4a40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4a2e:	4639      	mov	r1, r7
   b4a30:	4628      	mov	r0, r5
   b4a32:	f002 fb5d 	bl	b70f0 <_ZN6StringC1ERKS_>
   b4a36:	7c3b      	ldrb	r3, [r7, #16]
   b4a38:	742b      	strb	r3, [r5, #16]
   b4a3a:	3714      	adds	r7, #20
   b4a3c:	3514      	adds	r5, #20
   b4a3e:	e7f4      	b.n	b4a2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4a40:	6873      	ldr	r3, [r6, #4]
   b4a42:	6063      	str	r3, [r4, #4]
}
   b4a44:	4620      	mov	r0, r4
   b4a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4a4c <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
}
   b4a4c:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a4e:	4b26      	ldr	r3, [pc, #152]	; (b4ae8 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   b4a50:	4a26      	ldr	r2, [pc, #152]	; (b4aec <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4a52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4a54:	2400      	movs	r4, #0
   b4a56:	b08c      	sub	sp, #48	; 0x30
   b4a58:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a5c:	2002      	movs	r0, #2
   b4a5e:	f000 f9b7 	bl	b4dd0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4a62:	4621      	mov	r1, r4
   b4a64:	2001      	movs	r0, #1
   b4a66:	f000 f9c3 	bl	b4df0 <system_thread_set_state>
        }
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature) {
        return HAL_Feature_Set(feature, true);
   b4a6a:	2101      	movs	r1, #1
   b4a6c:	2004      	movs	r0, #4
   b4a6e:	f000 f867 	bl	b4b40 <HAL_Feature_Set>
        capacity_(0) {
   b4a72:	e9cd 4400 	strd	r4, r4, [sp]
   b4a76:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4a78:	f002 fc96 	bl	b73a8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4a7c:	4c1c      	ldr	r4, [pc, #112]	; (b4af0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4a7e:	4605      	mov	r5, r0
   b4a80:	4669      	mov	r1, sp
   b4a82:	a803      	add	r0, sp, #12
   b4a84:	f7ff ffaf 	bl	b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4a88:	4626      	mov	r6, r4
        stream_(&stream) {
   b4a8a:	a903      	add	r1, sp, #12
   b4a8c:	a806      	add	r0, sp, #24
   b4a8e:	f7ff ffaa 	bl	b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4a92:	4b18      	ldr	r3, [pc, #96]	; (b4af4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4a94:	f846 3b04 	str.w	r3, [r6], #4
   b4a98:	a906      	add	r1, sp, #24
   b4a9a:	a809      	add	r0, sp, #36	; 0x24
   b4a9c:	f7ff ffa3 	bl	b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4aa0:	aa09      	add	r2, sp, #36	; 0x24
   b4aa2:	211e      	movs	r1, #30
   b4aa4:	4630      	mov	r0, r6
   b4aa6:	f001 fd59 	bl	b655c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4aaa:	a809      	add	r0, sp, #36	; 0x24
   b4aac:	f7ff ff5a 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4ab0:	a806      	add	r0, sp, #24
   b4ab2:	f7ff ff57 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4ab6:	4b10      	ldr	r3, [pc, #64]	; (b4af8 <_GLOBAL__sub_I_SystemMode+0xac>)
   b4ab8:	6023      	str	r3, [r4, #0]
   b4aba:	6225      	str	r5, [r4, #32]
   b4abc:	a803      	add	r0, sp, #12
   b4abe:	f7ff ff51 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4ac2:	4b0e      	ldr	r3, [pc, #56]	; (b4afc <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4ac4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4ac6:	f002 fc6f 	bl	b73a8 <_Z16_fetch_usbserialv>
   b4aca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4ace:	f002 fc5b 	bl	b7388 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4ad2:	f001 fa25 	bl	b5f20 <_ZN5spark10LogManager8instanceEv>
   b4ad6:	4621      	mov	r1, r4
   b4ad8:	f001 fc16 	bl	b6308 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4adc:	4668      	mov	r0, sp
   b4ade:	f7ff ff41 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b4ae2:	b00c      	add	sp, #48	; 0x30
   b4ae4:	bd70      	pop	{r4, r5, r6, pc}
   b4ae6:	bf00      	nop
   b4ae8:	2003e628 	.word	0x2003e628
   b4aec:	ffff0000 	.word	0xffff0000
   b4af0:	2003e638 	.word	0x2003e638
   b4af4:	000b8590 	.word	0x000b8590
   b4af8:	000b8730 	.word	0x000b8730
   b4afc:	000b85a8 	.word	0x000b85a8

000b4b00 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <os_mutex_recursive_create+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030248 	.word	0x00030248

000b4b10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <os_mutex_recursive_destroy+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030248 	.word	0x00030248

000b4b20 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <os_mutex_recursive_lock+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030248 	.word	0x00030248

000b4b30 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <os_mutex_recursive_unlock+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030248 	.word	0x00030248

000b4b40 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <HAL_Feature_Set+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030234 	.word	0x00030234

000b4b50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <HAL_RNG_GetRandomNumber+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	685b      	ldr	r3, [r3, #4]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030218 	.word	0x00030218

000b4b60 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <HAL_Delay_Microseconds+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	68db      	ldr	r3, [r3, #12]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030218 	.word	0x00030218

000b4b70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	695b      	ldr	r3, [r3, #20]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030218 	.word	0x00030218

000b4b80 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <HAL_Pin_Mode+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	689b      	ldr	r3, [r3, #8]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003022c 	.word	0x0003022c

000b4b90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <HAL_Get_Pin_Mode+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	68db      	ldr	r3, [r3, #12]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	0003022c 	.word	0x0003022c

000b4ba0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <HAL_GPIO_Write+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	691b      	ldr	r3, [r3, #16]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003022c 	.word	0x0003022c

000b4bb0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <hal_i2c_write+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	6a1b      	ldr	r3, [r3, #32]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030228 	.word	0x00030228

000b4bc0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <hal_i2c_available+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030228 	.word	0x00030228

000b4bd0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <hal_i2c_read+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030228 	.word	0x00030228

000b4be0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <hal_i2c_peek+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030228 	.word	0x00030228

000b4bf0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <hal_i2c_flush+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030228 	.word	0x00030228

000b4c00 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <hal_i2c_is_enabled+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030228 	.word	0x00030228

000b4c10 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <hal_i2c_init+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030228 	.word	0x00030228

000b4c20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <inet_inet_ntop+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	695b      	ldr	r3, [r3, #20]
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030264 	.word	0x00030264

000b4c30 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <netdb_freeaddrinfo+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	689b      	ldr	r3, [r3, #8]
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030268 	.word	0x00030268

000b4c40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <netdb_getaddrinfo+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	68db      	ldr	r3, [r3, #12]
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030268 	.word	0x00030268

000b4c50 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <hal_spi_init+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	69db      	ldr	r3, [r3, #28]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030230 	.word	0x00030230

000b4c60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <hal_spi_is_enabled+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	6a1b      	ldr	r3, [r3, #32]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	00030230 	.word	0x00030230

000b4c70 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <hal_usart_end+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	689b      	ldr	r3, [r3, #8]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	0003023c 	.word	0x0003023c

000b4c80 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <hal_usart_write+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	68db      	ldr	r3, [r3, #12]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003023c 	.word	0x0003023c

000b4c90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <hal_usart_available+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	691b      	ldr	r3, [r3, #16]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003023c 	.word	0x0003023c

000b4ca0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <hal_usart_read+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	695b      	ldr	r3, [r3, #20]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003023c 	.word	0x0003023c

000b4cb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <hal_usart_peek+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	699b      	ldr	r3, [r3, #24]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	0003023c 	.word	0x0003023c

000b4cc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <hal_usart_flush+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	69db      	ldr	r3, [r3, #28]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	0003023c 	.word	0x0003023c

000b4cd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <hal_usart_is_enabled+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	6a1b      	ldr	r3, [r3, #32]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003023c 	.word	0x0003023c

000b4ce0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <hal_usart_available_data_for_write+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	0003023c 	.word	0x0003023c

000b4cf0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <hal_usart_begin_config+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	0003023c 	.word	0x0003023c

000b4d00 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <hal_usart_init_ex+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	0003023c 	.word	0x0003023c

000b4d10 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <HAL_USB_USART_Init+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	681b      	ldr	r3, [r3, #0]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	0003024c 	.word	0x0003024c

000b4d20 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <HAL_USB_USART_Begin+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	685b      	ldr	r3, [r3, #4]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	0003024c 	.word	0x0003024c

000b4d30 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <HAL_USB_USART_End+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	689b      	ldr	r3, [r3, #8]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	0003024c 	.word	0x0003024c

000b4d40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <HAL_USB_USART_Available_Data+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	691b      	ldr	r3, [r3, #16]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	0003024c 	.word	0x0003024c

000b4d50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	695b      	ldr	r3, [r3, #20]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	0003024c 	.word	0x0003024c

000b4d60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <HAL_USB_USART_Receive_Data+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	699b      	ldr	r3, [r3, #24]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	0003024c 	.word	0x0003024c

000b4d70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <HAL_USB_USART_Send_Data+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	69db      	ldr	r3, [r3, #28]
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	0003024c 	.word	0x0003024c

000b4d80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <HAL_USB_USART_Flush_Data+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6a1b      	ldr	r3, [r3, #32]
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	0003024c 	.word	0x0003024c

000b4d90 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <panic_+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	00030260 	.word	0x00030260

000b4da0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <log_message_v+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	00030260 	.word	0x00030260

000b4db0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <log_level_name+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	00030260 	.word	0x00030260

000b4dc0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <log_set_callbacks+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	00030260 	.word	0x00030260

000b4dd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <set_system_mode+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	685b      	ldr	r3, [r3, #4]
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	00030220 	.word	0x00030220

000b4de0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <system_delay_ms+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	695b      	ldr	r3, [r3, #20]
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	00030220 	.word	0x00030220

000b4df0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <system_thread_set_state+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	00030220 	.word	0x00030220

000b4e00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4e00:	b508      	push	{r3, lr}
   b4e02:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <application_thread_current+0xc>)
   b4e04:	681b      	ldr	r3, [r3, #0]
   b4e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e08:	9301      	str	r3, [sp, #4]
   b4e0a:	bd08      	pop	{r3, pc}
   b4e0c:	00030220 	.word	0x00030220

000b4e10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <application_thread_invoke+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	00030220 	.word	0x00030220

000b4e20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b03      	ldr	r3, [pc, #12]	; (b4e30 <system_ctrl_set_app_request_handler+0x10>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4e2a:	9301      	str	r3, [sp, #4]
   b4e2c:	bd08      	pop	{r3, pc}
   b4e2e:	0000      	.short	0x0000
   b4e30:	00030220 	.word	0x00030220

000b4e34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b03      	ldr	r3, [pc, #12]	; (b4e44 <system_ctrl_set_result+0x10>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4e3e:	9301      	str	r3, [sp, #4]
   b4e40:	bd08      	pop	{r3, pc}
   b4e42:	0000      	.short	0x0000
   b4e44:	00030220 	.word	0x00030220

000b4e48 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <spark_variable+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	681b      	ldr	r3, [r3, #0]
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030244 	.word	0x00030244

000b4e58 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <spark_function+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	685b      	ldr	r3, [r3, #4]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	00030244 	.word	0x00030244

000b4e68 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <spark_cloud_flag_connected+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	695b      	ldr	r3, [r3, #20]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	00030244 	.word	0x00030244

000b4e78 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <spark_send_event+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6a1b      	ldr	r3, [r3, #32]
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	00030244 	.word	0x00030244

000b4e88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	00030244 	.word	0x00030244

000b4e98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <network_connect+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	685b      	ldr	r3, [r3, #4]
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	00030240 	.word	0x00030240

000b4ea8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <network_connecting+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	689b      	ldr	r3, [r3, #8]
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	00030240 	.word	0x00030240

000b4eb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <network_disconnect+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	68db      	ldr	r3, [r3, #12]
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	00030240 	.word	0x00030240

000b4ec8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <network_ready+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	691b      	ldr	r3, [r3, #16]
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	00030240 	.word	0x00030240

000b4ed8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <network_on+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	695b      	ldr	r3, [r3, #20]
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030240 	.word	0x00030240

000b4ee8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <network_off+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	699b      	ldr	r3, [r3, #24]
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030240 	.word	0x00030240

000b4ef8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <network_listen+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	69db      	ldr	r3, [r3, #28]
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	00030240 	.word	0x00030240

000b4f08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <network_listening+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	6a1b      	ldr	r3, [r3, #32]
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	00030240 	.word	0x00030240

000b4f18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <network_set_listen_timeout+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	00030240 	.word	0x00030240

000b4f28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <network_get_listen_timeout+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	00030240 	.word	0x00030240

000b4f38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <network_is_on+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	00030240 	.word	0x00030240

000b4f48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <network_is_off+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	00030240 	.word	0x00030240

000b4f58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <malloc+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	681b      	ldr	r3, [r3, #0]
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	0003021c 	.word	0x0003021c

000b4f68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <free+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	685b      	ldr	r3, [r3, #4]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	0003021c 	.word	0x0003021c

000b4f78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <realloc+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	689b      	ldr	r3, [r3, #8]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	0003021c 	.word	0x0003021c

000b4f88 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <vsnprintf+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	0003021c 	.word	0x0003021c

000b4f98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <abort+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	0003021c 	.word	0x0003021c

000b4fa8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <_malloc_r+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	0003021c 	.word	0x0003021c

000b4fb8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <__errno+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	0003021c 	.word	0x0003021c

000b4fc8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <__assert_func+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	0003021c 	.word	0x0003021c

000b4fd8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <newlib_impure_ptr_callback+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	0003021c 	.word	0x0003021c

000b4fe8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4fe8:	2100      	movs	r1, #0
   b4fea:	f7ff bef9 	b.w	b4de0 <system_delay_ms>

000b4fee <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4fee:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4ff0:	6883      	ldr	r3, [r0, #8]
   b4ff2:	4604      	mov	r4, r0
   b4ff4:	b90b      	cbnz	r3, b4ffa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4ff6:	f002 fbe9 	bl	b77cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ffa:	68c3      	ldr	r3, [r0, #12]
   b4ffc:	4798      	blx	r3
      if (_M_manager)
   b4ffe:	68a3      	ldr	r3, [r4, #8]
   b5000:	b11b      	cbz	r3, b500a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5002:	2203      	movs	r2, #3
   b5004:	4621      	mov	r1, r4
   b5006:	4620      	mov	r0, r4
   b5008:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b500a:	4620      	mov	r0, r4
   b500c:	2110      	movs	r1, #16
}
   b500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5012:	f7ff b844 	b.w	b409e <_ZdlPvj>

000b5016 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5016:	b510      	push	{r4, lr}
      if (_M_manager)
   b5018:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b501a:	4604      	mov	r4, r0
      if (_M_manager)
   b501c:	b113      	cbz	r3, b5024 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b501e:	2203      	movs	r2, #3
   b5020:	4601      	mov	r1, r0
   b5022:	4798      	blx	r3
    }
   b5024:	4620      	mov	r0, r4
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5028:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b502a:	6843      	ldr	r3, [r0, #4]
   b502c:	3b01      	subs	r3, #1
    {
   b502e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5030:	6043      	str	r3, [r0, #4]
   b5032:	b963      	cbnz	r3, b504e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5034:	6803      	ldr	r3, [r0, #0]
   b5036:	689b      	ldr	r3, [r3, #8]
   b5038:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b503a:	68a3      	ldr	r3, [r4, #8]
   b503c:	3b01      	subs	r3, #1
   b503e:	60a3      	str	r3, [r4, #8]
   b5040:	b92b      	cbnz	r3, b504e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5042:	6823      	ldr	r3, [r4, #0]
   b5044:	4620      	mov	r0, r4
   b5046:	68db      	ldr	r3, [r3, #12]
    }
   b5048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b504c:	4718      	bx	r3
    }
   b504e:	bd10      	pop	{r4, pc}

000b5050 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5050:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5052:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5056:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5058:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b505c:	42ae      	cmp	r6, r5
   b505e:	d004      	beq.n	b506a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5060:	4628      	mov	r0, r5
   b5062:	f001 ffaf 	bl	b6fc4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5066:	3510      	adds	r5, #16
   b5068:	e7f8      	b.n	b505c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b506a:	6820      	ldr	r0, [r4, #0]
   b506c:	f7ff ff7c 	bl	b4f68 <free>
    AllocatorT::free(data_);
}
   b5070:	4620      	mov	r0, r4
   b5072:	bd70      	pop	{r4, r5, r6, pc}

000b5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5074:	b513      	push	{r0, r1, r4, lr}
   b5076:	460b      	mov	r3, r1
   b5078:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b507a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b507e:	466c      	mov	r4, sp
   b5080:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5084:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5088:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b508c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5090:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5094:	b002      	add	sp, #8
   b5096:	bd10      	pop	{r4, pc}

000b5098 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5098:	4802      	ldr	r0, [pc, #8]	; (b50a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b509a:	2300      	movs	r3, #0
   b509c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b509e:	f7ff bd2f 	b.w	b4b00 <os_mutex_recursive_create>
   b50a2:	bf00      	nop
   b50a4:	2003e65c 	.word	0x2003e65c

000b50a8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b50a8:	2200      	movs	r2, #0
   b50aa:	6840      	ldr	r0, [r0, #4]
   b50ac:	4611      	mov	r1, r2
   b50ae:	f7ff bf0b 	b.w	b4ec8 <network_ready>

000b50b2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b50b2:	2200      	movs	r2, #0
   b50b4:	6840      	ldr	r0, [r0, #4]
   b50b6:	4611      	mov	r1, r2
   b50b8:	f7ff bf26 	b.w	b4f08 <network_listening>

000b50bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b50bc:	2200      	movs	r2, #0
   b50be:	6840      	ldr	r0, [r0, #4]
   b50c0:	4611      	mov	r1, r2
   b50c2:	f7ff bf31 	b.w	b4f28 <network_get_listen_timeout>

000b50c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b50c6:	6840      	ldr	r0, [r0, #4]
   b50c8:	2200      	movs	r2, #0
   b50ca:	f7ff bf25 	b.w	b4f18 <network_set_listen_timeout>

000b50ce <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50ce:	6840      	ldr	r0, [r0, #4]
   b50d0:	2200      	movs	r2, #0
   b50d2:	f081 0101 	eor.w	r1, r1, #1
   b50d6:	f7ff bf0f 	b.w	b4ef8 <network_listen>

000b50da <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50da:	2300      	movs	r3, #0
   b50dc:	6840      	ldr	r0, [r0, #4]
   b50de:	461a      	mov	r2, r3
   b50e0:	4619      	mov	r1, r3
   b50e2:	f7ff bf01 	b.w	b4ee8 <network_off>

000b50e6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50e6:	2300      	movs	r3, #0
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	461a      	mov	r2, r3
   b50ec:	4619      	mov	r1, r3
   b50ee:	f7ff bef3 	b.w	b4ed8 <network_on>

000b50f2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50f2:	2200      	movs	r2, #0
   b50f4:	6840      	ldr	r0, [r0, #4]
   b50f6:	4611      	mov	r1, r2
   b50f8:	f7ff bed6 	b.w	b4ea8 <network_connecting>

000b50fc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50fc:	6840      	ldr	r0, [r0, #4]
   b50fe:	2200      	movs	r2, #0
   b5100:	2102      	movs	r1, #2
   b5102:	f7ff bed9 	b.w	b4eb8 <network_disconnect>

000b5106 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5106:	2300      	movs	r3, #0
   b5108:	6840      	ldr	r0, [r0, #4]
   b510a:	461a      	mov	r2, r3
   b510c:	f7ff bec4 	b.w	b4e98 <network_connect>

000b5110 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5110:	4b08      	ldr	r3, [pc, #32]	; (b5134 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5112:	b510      	push	{r4, lr}
   b5114:	2428      	movs	r4, #40	; 0x28
   b5116:	4622      	mov	r2, r4
   b5118:	4618      	mov	r0, r3
   b511a:	2100      	movs	r1, #0
   b511c:	f002 ffb2 	bl	b8084 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5120:	4b05      	ldr	r3, [pc, #20]	; (b5138 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5122:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5128:	6042      	str	r2, [r0, #4]
   b512a:	2204      	movs	r2, #4
   b512c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b512e:	4a03      	ldr	r2, [pc, #12]	; (b513c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5130:	601a      	str	r2, [r3, #0]
   b5132:	bd10      	pop	{r4, pc}
   b5134:	2003e668 	.word	0x2003e668
   b5138:	2003e660 	.word	0x2003e660
   b513c:	000b85d0 	.word	0x000b85d0

000b5140 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5140:	4770      	bx	lr

000b5142 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5142:	2000      	movs	r0, #0
   b5144:	4770      	bx	lr

000b5146 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5146:	b510      	push	{r4, lr}
   b5148:	2110      	movs	r1, #16
   b514a:	4604      	mov	r4, r0
   b514c:	f7fe ffa7 	bl	b409e <_ZdlPvj>
   b5150:	4620      	mov	r0, r4
   b5152:	bd10      	pop	{r4, pc}

000b5154 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5154:	b508      	push	{r3, lr}
      { delete this; }
   b5156:	f7ff fff6 	bl	b5146 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b515a:	bd08      	pop	{r3, pc}

000b515c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b515c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b515e:	2200      	movs	r2, #0
   b5160:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5164:	6002      	str	r2, [r0, #0]
   b5166:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5168:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b516a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b516c:	680c      	ldr	r4, [r1, #0]
   b516e:	8085      	strh	r5, [r0, #4]
   b5170:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5172:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5174:	bd30      	pop	{r4, r5, pc}

000b5176 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5176:	b510      	push	{r4, lr}
   b5178:	4604      	mov	r4, r0
    free((void*)msg_);
   b517a:	6800      	ldr	r0, [r0, #0]
   b517c:	f7ff fef4 	bl	b4f68 <free>
}
   b5180:	4620      	mov	r0, r4
   b5182:	bd10      	pop	{r4, pc}

000b5184 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5184:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5186:	68c4      	ldr	r4, [r0, #12]
   b5188:	b1f4      	cbz	r4, b51c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b518a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b518c:	2b02      	cmp	r3, #2
   b518e:	d103      	bne.n	b5198 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5190:	f104 000c 	add.w	r0, r4, #12
   b5194:	f7ff ffef 	bl	b5176 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5198:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b519a:	b135      	cbz	r5, b51aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b519c:	4628      	mov	r0, r5
   b519e:	f7ff ff3a 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
   b51a2:	2110      	movs	r1, #16
   b51a4:	4628      	mov	r0, r5
   b51a6:	f7fe ff7a 	bl	b409e <_ZdlPvj>
   b51aa:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b51ac:	b135      	cbz	r5, b51bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b51ae:	4628      	mov	r0, r5
   b51b0:	f7ff ff31 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
   b51b4:	2110      	movs	r1, #16
   b51b6:	4628      	mov	r0, r5
   b51b8:	f7fe ff71 	bl	b409e <_ZdlPvj>
   b51bc:	4620      	mov	r0, r4
   b51be:	2114      	movs	r1, #20
   b51c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b51c4:	f7fe bf6b 	b.w	b409e <_ZdlPvj>
   b51c8:	bd38      	pop	{r3, r4, r5, pc}

000b51ca <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   b51ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b51cc:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   b51ce:	4668      	mov	r0, sp
   b51d0:	f001 ff43 	bl	b705a <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   b51d4:	68a3      	ldr	r3, [r4, #8]
   b51d6:	b90b      	cbnz	r3, b51dc <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   b51d8:	f002 faf8 	bl	b77cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b51dc:	68e3      	ldr	r3, [r4, #12]
   b51de:	4669      	mov	r1, sp
   b51e0:	4620      	mov	r0, r4
   b51e2:	4798      	blx	r3
   b51e4:	4604      	mov	r4, r0
   b51e6:	4668      	mov	r0, sp
   b51e8:	f001 feec 	bl	b6fc4 <_ZN6StringD1Ev>
}
   b51ec:	4620      	mov	r0, r4
   b51ee:	b004      	add	sp, #16
   b51f0:	bd10      	pop	{r4, pc}

000b51f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b51f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b51f4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b51f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b51fa:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b51fc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b51fe:	461a      	mov	r2, r3
   b5200:	4669      	mov	r1, sp
   b5202:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b5204:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b5208:	f8ad 4000 	strh.w	r4, [sp]
   b520c:	f7ff fe24 	bl	b4e58 <spark_function>
}
   b5210:	b004      	add	sp, #16
   b5212:	bd10      	pop	{r4, pc}

000b5214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5214:	680b      	ldr	r3, [r1, #0]
   b5216:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5218:	684b      	ldr	r3, [r1, #4]
   b521a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b521c:	b113      	cbz	r3, b5224 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b521e:	685a      	ldr	r2, [r3, #4]
   b5220:	3201      	adds	r2, #1
   b5222:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5224:	4770      	bx	lr

000b5226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5226:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5228:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b522a:	4668      	mov	r0, sp
   b522c:	460d      	mov	r5, r1
   b522e:	f7ff fff1 	bl	b5214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5232:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5234:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5236:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5238:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b523a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b523c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b523e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5240:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5242:	f7fe ff4e 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5246:	b135      	cbz	r5, b5256 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5248:	1d28      	adds	r0, r5, #4
   b524a:	f7fe ff4a 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b524e:	2108      	movs	r1, #8
   b5250:	4628      	mov	r0, r5
   b5252:	f7fe ff24 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5256:	4620      	mov	r0, r4
   b5258:	b003      	add	sp, #12
   b525a:	bd30      	pop	{r4, r5, pc}

000b525c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b525c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b525e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5260:	b90a      	cbnz	r2, b5266 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5262:	f002 fab3 	bl	b77cc <_ZSt25__throw_bad_function_callv>
    }
   b5266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b526a:	68c3      	ldr	r3, [r0, #12]
   b526c:	4718      	bx	r3

000b526e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b526e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5270:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5272:	f100 0110 	add.w	r1, r0, #16
   b5276:	f7ff fff1 	bl	b525c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b527a:	bd08      	pop	{r3, pc}

000b527c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b527c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b527e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5280:	b90a      	cbnz	r2, b5286 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5282:	f002 faa3 	bl	b77cc <_ZSt25__throw_bad_function_callv>
    }
   b5286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b528a:	68c3      	ldr	r3, [r0, #12]
   b528c:	4718      	bx	r3

000b528e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b528e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5290:	6800      	ldr	r0, [r0, #0]
   b5292:	f100 0110 	add.w	r1, r0, #16
   b5296:	f7ff fff1 	bl	b527c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b529a:	bd08      	pop	{r3, pc}

000b529c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b529c:	b538      	push	{r3, r4, r5, lr}
   b529e:	2300      	movs	r3, #0
   b52a0:	4604      	mov	r4, r0
   b52a2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52a4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b52a6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52a8:	f7fe fef5 	bl	b4096 <_Znwj>
   b52ac:	b128      	cbz	r0, b52ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b52ae:	2301      	movs	r3, #1
   b52b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b52b4:	4b02      	ldr	r3, [pc, #8]	; (b52c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b52b6:	6003      	str	r3, [r0, #0]
   b52b8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52ba:	6020      	str	r0, [r4, #0]
	}
   b52bc:	4620      	mov	r0, r4
   b52be:	bd38      	pop	{r3, r4, r5, pc}
   b52c0:	000b860c 	.word	0x000b860c

000b52c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b52c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52c6:	2300      	movs	r3, #0
   b52c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52cc:	4604      	mov	r4, r0
   b52ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52d0:	b12b      	cbz	r3, b52de <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52d2:	2202      	movs	r2, #2
   b52d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52d6:	68eb      	ldr	r3, [r5, #12]
   b52d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52da:	68ab      	ldr	r3, [r5, #8]
   b52dc:	60a3      	str	r3, [r4, #8]
    }
   b52de:	4620      	mov	r0, r4
   b52e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b52e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52e6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b52e8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b52ea:	4668      	mov	r0, sp
   b52ec:	f7ff ff36 	bl	b515c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b52f0:	f04f 0302 	mov.w	r3, #2
   b52f4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b52f8:	2a00      	cmp	r2, #0
   b52fa:	d103      	bne.n	b5304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b52fc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5300:	2900      	cmp	r1, #0
   b5302:	d1f7      	bne.n	b52f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5304:	d125      	bne.n	b5352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5306:	f104 050c 	add.w	r5, r4, #12
   b530a:	4669      	mov	r1, sp
   b530c:	4628      	mov	r0, r5
   b530e:	f7ff ff25 	bl	b515c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5312:	f3bf 8f5b 	dmb	ish
   b5316:	2301      	movs	r3, #1
   b5318:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b531a:	2000      	movs	r0, #0
   b531c:	f104 0308 	add.w	r3, r4, #8
   b5320:	f3bf 8f5b 	dmb	ish
   b5324:	e853 6f00 	ldrex	r6, [r3]
   b5328:	e843 0200 	strex	r2, r0, [r3]
   b532c:	2a00      	cmp	r2, #0
   b532e:	d1f9      	bne.n	b5324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5330:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5334:	b16e      	cbz	r6, b5352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5336:	f7ff fd63 	bl	b4e00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b533a:	b178      	cbz	r0, b535c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b533c:	4629      	mov	r1, r5
   b533e:	4630      	mov	r0, r6
   b5340:	f7ff ff8c 	bl	b525c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5344:	4630      	mov	r0, r6
   b5346:	f7ff fe66 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b534a:	2110      	movs	r1, #16
   b534c:	4630      	mov	r0, r6
   b534e:	f7fe fea6 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5352:	4668      	mov	r0, sp
   b5354:	f7ff ff0f 	bl	b5176 <_ZN8particle5ErrorD1Ev>
    }
   b5358:	b009      	add	sp, #36	; 0x24
   b535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b535c:	4631      	mov	r1, r6
   b535e:	a802      	add	r0, sp, #8
   b5360:	f7ff ffb0 	bl	b52c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5364:	68e0      	ldr	r0, [r4, #12]
   b5366:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b536a:	b108      	cbz	r0, b5370 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b536c:	f002 feea 	bl	b8144 <strdup>
        type_(type) {
   b5370:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5372:	2010      	movs	r0, #16
   b5374:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5378:	f7fe fe8d 	bl	b4096 <_Znwj>
   b537c:	4605      	mov	r5, r0
   b537e:	b1e8      	cbz	r0, b53bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5380:	2700      	movs	r7, #0
   b5382:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5384:	2018      	movs	r0, #24
   b5386:	f7fe fe86 	bl	b4096 <_Znwj>
   b538a:	4604      	mov	r4, r0
   b538c:	b188      	cbz	r0, b53b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b538e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5390:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5392:	a802      	add	r0, sp, #8
   b5394:	f7ff fe6e 	bl	b5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5398:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b539a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b539c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b539e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b53a0:	9204      	str	r2, [sp, #16]
   b53a2:	a906      	add	r1, sp, #24
   b53a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b53a6:	60e3      	str	r3, [r4, #12]
   b53a8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b53ac:	9205      	str	r2, [sp, #20]
   b53ae:	f7ff fed5 	bl	b515c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b53b2:	4b08      	ldr	r3, [pc, #32]	; (b53d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b53b4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b53b6:	4b08      	ldr	r3, [pc, #32]	; (b53d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b53b8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b53ba:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b53bc:	a806      	add	r0, sp, #24
   b53be:	f7ff feda 	bl	b5176 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b53c2:	a802      	add	r0, sp, #8
   b53c4:	f7ff fe27 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b53c8:	2200      	movs	r2, #0
   b53ca:	4629      	mov	r1, r5
   b53cc:	4803      	ldr	r0, [pc, #12]	; (b53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b53ce:	f7ff fd1f 	bl	b4e10 <application_thread_invoke>
   b53d2:	e7b7      	b.n	b5344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b53d4:	000b526f 	.word	0x000b526f
   b53d8:	000b54f1 	.word	0x000b54f1
   b53dc:	000b4fef 	.word	0x000b4fef

000b53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b53e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e4:	b08b      	sub	sp, #44	; 0x2c
   b53e6:	4605      	mov	r5, r0
   b53e8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b53ec:	460f      	mov	r7, r1
   b53ee:	4690      	mov	r8, r2
   b53f0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b53f2:	f7ff fd39 	bl	b4e68 <spark_cloud_flag_connected>
   b53f6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b53f8:	4683      	mov	fp, r0
   b53fa:	bb38      	cbnz	r0, b544c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b53fc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5400:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5402:	a905      	add	r1, sp, #20
   b5404:	4630      	mov	r0, r6
   b5406:	f8ad 3018 	strh.w	r3, [sp, #24]
   b540a:	f7ff fea7 	bl	b515c <_ZN8particle5ErrorC1EOS0_>
   b540e:	2014      	movs	r0, #20
   b5410:	f7fe fe41 	bl	b4096 <_Znwj>
   b5414:	4604      	mov	r4, r0
   b5416:	b148      	cbz	r0, b542c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5418:	2302      	movs	r3, #2
   b541a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b541c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b541e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5422:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5424:	4631      	mov	r1, r6
   b5426:	300c      	adds	r0, #12
   b5428:	f7ff fe98 	bl	b515c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b542c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b542e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5430:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5434:	f7ff ff32 	bl	b529c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5438:	4630      	mov	r0, r6
   b543a:	f7ff fe9c 	bl	b5176 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b543e:	a805      	add	r0, sp, #20
   b5440:	f7ff fe99 	bl	b5176 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5444:	4628      	mov	r0, r5
   b5446:	b00b      	add	sp, #44	; 0x2c
   b5448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b544c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b544e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5450:	2014      	movs	r0, #20
   b5452:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5456:	9307      	str	r3, [sp, #28]
   b5458:	f7fe fe1d 	bl	b4096 <_Znwj>
   b545c:	4601      	mov	r1, r0
   b545e:	b118      	cbz	r0, b5468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5460:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5464:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5466:	7044      	strb	r4, [r0, #1]
   b5468:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b546a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b546c:	f7ff ff16 	bl	b529c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5470:	4b1e      	ldr	r3, [pc, #120]	; (b54ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5472:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5474:	2008      	movs	r0, #8
   b5476:	f7fe fe0e 	bl	b4096 <_Znwj>
   b547a:	4604      	mov	r4, r0
   b547c:	b110      	cbz	r0, b5484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b547e:	a903      	add	r1, sp, #12
   b5480:	f7ff fec8 	bl	b5214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5484:	9600      	str	r6, [sp, #0]
   b5486:	fa5f f38a 	uxtb.w	r3, sl
   b548a:	464a      	mov	r2, r9
   b548c:	4641      	mov	r1, r8
   b548e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5490:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5492:	f7ff fcf1 	bl	b4e78 <spark_send_event>
   b5496:	b9b8      	cbnz	r0, b54c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5498:	9b03      	ldr	r3, [sp, #12]
   b549a:	785b      	ldrb	r3, [r3, #1]
   b549c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b54a0:	b993      	cbnz	r3, b54c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b54a2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b54a6:	a905      	add	r1, sp, #20
   b54a8:	a803      	add	r0, sp, #12
   b54aa:	9205      	str	r2, [sp, #20]
   b54ac:	f8ad 3018 	strh.w	r3, [sp, #24]
   b54b0:	f7ff ff18 	bl	b52e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b54b4:	a805      	add	r0, sp, #20
   b54b6:	f7ff fe5e 	bl	b5176 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b54ba:	a805      	add	r0, sp, #20
   b54bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   b54be:	f7ff feb2 	bl	b5226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b54c2:	a806      	add	r0, sp, #24
   b54c4:	f7fe fe0d 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54c8:	a903      	add	r1, sp, #12
   b54ca:	a805      	add	r0, sp, #20
   b54cc:	f7ff fea2 	bl	b5214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54d0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b54d2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54d4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b54d6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b54d8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b54da:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b54dc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b54de:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b54e0:	f7fe fdff 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54e4:	a804      	add	r0, sp, #16
   b54e6:	f7fe fdfc 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b54ea:	e7ab      	b.n	b5444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b54ec:	000b556d 	.word	0x000b556d

000b54f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b54f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b54f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54f4:	4605      	mov	r5, r0
	switch (__op)
   b54f6:	d103      	bne.n	b5500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b54f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54fa:	6003      	str	r3, [r0, #0]
      }
   b54fc:	2000      	movs	r0, #0
   b54fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5500:	2a02      	cmp	r2, #2
   b5502:	d010      	beq.n	b5526 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5504:	2a03      	cmp	r2, #3
   b5506:	d1f9      	bne.n	b54fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5508:	6804      	ldr	r4, [r0, #0]
   b550a:	2c00      	cmp	r4, #0
   b550c:	d0f6      	beq.n	b54fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b550e:	f104 0010 	add.w	r0, r4, #16
   b5512:	f7ff fe30 	bl	b5176 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5516:	4620      	mov	r0, r4
   b5518:	f7ff fd7d 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b551c:	2118      	movs	r1, #24
   b551e:	4620      	mov	r0, r4
   b5520:	f7fe fdbd 	bl	b409e <_ZdlPvj>
   b5524:	e7ea      	b.n	b54fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5526:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5528:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b552a:	f7fe fdb4 	bl	b4096 <_Znwj>
   b552e:	4604      	mov	r4, r0
   b5530:	b150      	cbz	r0, b5548 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b5532:	4631      	mov	r1, r6
   b5534:	f7ff fec6 	bl	b52c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5538:	6930      	ldr	r0, [r6, #16]
   b553a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b553e:	b108      	cbz	r0, b5544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5540:	f002 fe00 	bl	b8144 <strdup>
        type_(type) {
   b5544:	6120      	str	r0, [r4, #16]
   b5546:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5548:	602c      	str	r4, [r5, #0]
	}
   b554a:	e7d7      	b.n	b54fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b554c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b554c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b554e:	2300      	movs	r3, #0
   b5550:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5552:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5554:	4604      	mov	r4, r0
   b5556:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5558:	b12b      	cbz	r3, b5566 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b555a:	2202      	movs	r2, #2
   b555c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b555e:	68eb      	ldr	r3, [r5, #12]
   b5560:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5562:	68ab      	ldr	r3, [r5, #8]
   b5564:	60a3      	str	r3, [r4, #8]
    }
   b5566:	4620      	mov	r0, r4
   b5568:	bd38      	pop	{r3, r4, r5, pc}
	...

000b556c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b556c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b556e:	b089      	sub	sp, #36	; 0x24
   b5570:	4604      	mov	r4, r0
   b5572:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5574:	a801      	add	r0, sp, #4
   b5576:	4611      	mov	r1, r2
   b5578:	f7ff fe55 	bl	b5226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b557c:	b1a4      	cbz	r4, b55a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b557e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5580:	b11d      	cbz	r5, b558a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5582:	4628      	mov	r0, r5
   b5584:	f002 fdde 	bl	b8144 <strdup>
   b5588:	4605      	mov	r5, r0
   b558a:	a801      	add	r0, sp, #4
   b558c:	a903      	add	r1, sp, #12
        type_(type) {
   b558e:	9503      	str	r5, [sp, #12]
   b5590:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5594:	f7ff fea6 	bl	b52e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5598:	a803      	add	r0, sp, #12
   b559a:	f7ff fdec 	bl	b5176 <_ZN8particle5ErrorD1Ev>
   b559e:	a802      	add	r0, sp, #8
   b55a0:	f7fe fd9f 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55a4:	b009      	add	sp, #36	; 0x24
   b55a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b55a8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b55aa:	2301      	movs	r3, #1
   b55ac:	e8d5 2f4f 	ldrexb	r2, [r5]
   b55b0:	2a00      	cmp	r2, #0
   b55b2:	d103      	bne.n	b55bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b55b4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b55b8:	2900      	cmp	r1, #0
   b55ba:	d1f7      	bne.n	b55ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b55bc:	d1ef      	bne.n	b559e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b55be:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b55c0:	f3bf 8f5b 	dmb	ish
   b55c4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b55c6:	1d2b      	adds	r3, r5, #4
   b55c8:	f3bf 8f5b 	dmb	ish
   b55cc:	e853 6f00 	ldrex	r6, [r3]
   b55d0:	e843 4200 	strex	r2, r4, [r3]
   b55d4:	2a00      	cmp	r2, #0
   b55d6:	d1f9      	bne.n	b55cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b55d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b55dc:	2e00      	cmp	r6, #0
   b55de:	d0de      	beq.n	b559e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b55e0:	4620      	mov	r0, r4
   b55e2:	f7ff fc0d 	bl	b4e00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b55e6:	4607      	mov	r7, r0
   b55e8:	b160      	cbz	r0, b5604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b55ea:	f105 010c 	add.w	r1, r5, #12
   b55ee:	4630      	mov	r0, r6
   b55f0:	f7ff fe44 	bl	b527c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b55f4:	4630      	mov	r0, r6
   b55f6:	f7ff fd0e 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b55fa:	2110      	movs	r1, #16
   b55fc:	4630      	mov	r0, r6
   b55fe:	f7fe fd4e 	bl	b409e <_ZdlPvj>
   b5602:	e7cc      	b.n	b559e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5604:	4631      	mov	r1, r6
   b5606:	a803      	add	r0, sp, #12
   b5608:	f7ff ffa0 	bl	b554c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b560c:	7b2b      	ldrb	r3, [r5, #12]
   b560e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5612:	2010      	movs	r0, #16
   b5614:	f7fe fd3f 	bl	b4096 <_Znwj>
   b5618:	4605      	mov	r5, r0
   b561a:	b1d0      	cbz	r0, b5652 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b561c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b561e:	2014      	movs	r0, #20
   b5620:	f7fe fd39 	bl	b4096 <_Znwj>
   b5624:	4604      	mov	r4, r0
   b5626:	b178      	cbz	r0, b5648 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5628:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b562a:	4601      	mov	r1, r0
   b562c:	a803      	add	r0, sp, #12
   b562e:	f7ff fd21 	bl	b5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5632:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5634:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5636:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5638:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b563a:	9205      	str	r2, [sp, #20]
   b563c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b563e:	60e3      	str	r3, [r4, #12]
   b5640:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5644:	9206      	str	r2, [sp, #24]
   b5646:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5648:	4b06      	ldr	r3, [pc, #24]	; (b5664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b564a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b564c:	4b06      	ldr	r3, [pc, #24]	; (b5668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b564e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5650:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5652:	a803      	add	r0, sp, #12
   b5654:	f7ff fcdf 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5658:	2200      	movs	r2, #0
   b565a:	4629      	mov	r1, r5
   b565c:	4803      	ldr	r0, [pc, #12]	; (b566c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b565e:	f7ff fbd7 	bl	b4e10 <application_thread_invoke>
   b5662:	e7c7      	b.n	b55f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5664:	000b528f 	.word	0x000b528f
   b5668:	000b5671 	.word	0x000b5671
   b566c:	000b4fef 	.word	0x000b4fef

000b5670 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5670:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5672:	b570      	push	{r4, r5, r6, lr}
   b5674:	4604      	mov	r4, r0
	switch (__op)
   b5676:	d103      	bne.n	b5680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5678:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b567a:	6003      	str	r3, [r0, #0]
      }
   b567c:	2000      	movs	r0, #0
   b567e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5680:	2a02      	cmp	r2, #2
   b5682:	d00c      	beq.n	b569e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5684:	2a03      	cmp	r2, #3
   b5686:	d1f9      	bne.n	b567c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5688:	6804      	ldr	r4, [r0, #0]
   b568a:	2c00      	cmp	r4, #0
   b568c:	d0f6      	beq.n	b567c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b568e:	4620      	mov	r0, r4
   b5690:	f7ff fcc1 	bl	b5016 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5694:	2114      	movs	r1, #20
   b5696:	4620      	mov	r0, r4
   b5698:	f7fe fd01 	bl	b409e <_ZdlPvj>
   b569c:	e7ee      	b.n	b567c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b569e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b56a0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b56a2:	f7fe fcf8 	bl	b4096 <_Znwj>
   b56a6:	4605      	mov	r5, r0
   b56a8:	b120      	cbz	r0, b56b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b56aa:	4631      	mov	r1, r6
   b56ac:	f7ff ff4e 	bl	b554c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b56b0:	7c33      	ldrb	r3, [r6, #16]
   b56b2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b56b4:	6025      	str	r5, [r4, #0]
	}
   b56b6:	e7e1      	b.n	b567c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b56b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56b8:	2200      	movs	r2, #0
   b56ba:	6840      	ldr	r0, [r0, #4]
   b56bc:	4611      	mov	r1, r2
   b56be:	f7ff bc23 	b.w	b4f08 <network_listening>

000b56c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56c2:	2200      	movs	r2, #0
   b56c4:	6840      	ldr	r0, [r0, #4]
   b56c6:	4611      	mov	r1, r2
   b56c8:	f7ff bc2e 	b.w	b4f28 <network_get_listen_timeout>

000b56cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56cc:	6840      	ldr	r0, [r0, #4]
   b56ce:	2200      	movs	r2, #0
   b56d0:	f7ff bc22 	b.w	b4f18 <network_set_listen_timeout>

000b56d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56d4:	6840      	ldr	r0, [r0, #4]
   b56d6:	2200      	movs	r2, #0
   b56d8:	f081 0101 	eor.w	r1, r1, #1
   b56dc:	f7ff bc0c 	b.w	b4ef8 <network_listen>

000b56e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56e0:	2300      	movs	r3, #0
   b56e2:	6840      	ldr	r0, [r0, #4]
   b56e4:	461a      	mov	r2, r3
   b56e6:	4619      	mov	r1, r3
   b56e8:	f7ff bbfe 	b.w	b4ee8 <network_off>

000b56ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b56ec:	2300      	movs	r3, #0
   b56ee:	6840      	ldr	r0, [r0, #4]
   b56f0:	461a      	mov	r2, r3
   b56f2:	4619      	mov	r1, r3
   b56f4:	f7ff bbf0 	b.w	b4ed8 <network_on>

000b56f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b56f8:	2200      	movs	r2, #0
   b56fa:	6840      	ldr	r0, [r0, #4]
   b56fc:	4611      	mov	r1, r2
   b56fe:	f7ff bbe3 	b.w	b4ec8 <network_ready>

000b5702 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5702:	2200      	movs	r2, #0
   b5704:	6840      	ldr	r0, [r0, #4]
   b5706:	4611      	mov	r1, r2
   b5708:	f7ff bbce 	b.w	b4ea8 <network_connecting>

000b570c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b570c:	6840      	ldr	r0, [r0, #4]
   b570e:	2200      	movs	r2, #0
   b5710:	2102      	movs	r1, #2
   b5712:	f7ff bbd1 	b.w	b4eb8 <network_disconnect>

000b5716 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5716:	2300      	movs	r3, #0
   b5718:	6840      	ldr	r0, [r0, #4]
   b571a:	461a      	mov	r2, r3
   b571c:	f7ff bbbc 	b.w	b4e98 <network_connect>

000b5720 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5720:	4b02      	ldr	r3, [pc, #8]	; (b572c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5722:	2203      	movs	r2, #3
   b5724:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5726:	4a02      	ldr	r2, [pc, #8]	; (b5730 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5728:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b572a:	4770      	bx	lr
   b572c:	2003e690 	.word	0x2003e690
   b5730:	000b8628 	.word	0x000b8628

000b5734 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5734:	4770      	bx	lr

000b5736 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5738:	4606      	mov	r6, r0
   b573a:	4615      	mov	r5, r2
   b573c:	460c      	mov	r4, r1
   b573e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5740:	42bc      	cmp	r4, r7
   b5742:	d006      	beq.n	b5752 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5744:	6833      	ldr	r3, [r6, #0]
   b5746:	f814 1b01 	ldrb.w	r1, [r4], #1
   b574a:	689b      	ldr	r3, [r3, #8]
   b574c:	4630      	mov	r0, r6
   b574e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5750:	e7f6      	b.n	b5740 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5752:	4628      	mov	r0, r5
   b5754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5756 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5756:	7c00      	ldrb	r0, [r0, #16]
   b5758:	2200      	movs	r2, #0
   b575a:	f7ff ba29 	b.w	b4bb0 <hal_i2c_write>

000b575e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b575e:	7c00      	ldrb	r0, [r0, #16]
   b5760:	2100      	movs	r1, #0
   b5762:	f7ff ba2d 	b.w	b4bc0 <hal_i2c_available>

000b5766 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5766:	7c00      	ldrb	r0, [r0, #16]
   b5768:	2100      	movs	r1, #0
   b576a:	f7ff ba31 	b.w	b4bd0 <hal_i2c_read>

000b576e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b576e:	7c00      	ldrb	r0, [r0, #16]
   b5770:	2100      	movs	r1, #0
   b5772:	f7ff ba35 	b.w	b4be0 <hal_i2c_peek>

000b5776 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5776:	7c00      	ldrb	r0, [r0, #16]
   b5778:	2100      	movs	r1, #0
   b577a:	f7ff ba39 	b.w	b4bf0 <hal_i2c_flush>

000b577e <_ZN7TwoWireD0Ev>:
   b577e:	b510      	push	{r4, lr}
   b5780:	2114      	movs	r1, #20
   b5782:	4604      	mov	r4, r0
   b5784:	f7fe fc8b 	bl	b409e <_ZdlPvj>
   b5788:	4620      	mov	r0, r4
   b578a:	bd10      	pop	{r4, pc}

000b578c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b578c:	b538      	push	{r3, r4, r5, lr}
   b578e:	4604      	mov	r4, r0
   b5790:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5796:	2200      	movs	r2, #0
   b5798:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b579c:	4b09      	ldr	r3, [pc, #36]	; (b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b579e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57a0:	4608      	mov	r0, r1
   b57a2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57a4:	4629      	mov	r1, r5
   b57a6:	f7ff fa33 	bl	b4c10 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57aa:	30bf      	adds	r0, #191	; 0xbf
   b57ac:	d108      	bne.n	b57c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57ae:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57b0:	07db      	lsls	r3, r3, #31
   b57b2:	d505      	bpl.n	b57c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57b4:	6868      	ldr	r0, [r5, #4]
   b57b6:	f7ff fbd7 	bl	b4f68 <free>
    free(conf.tx_buffer);
   b57ba:	68e8      	ldr	r0, [r5, #12]
   b57bc:	f7ff fbd4 	bl	b4f68 <free>
}
   b57c0:	4620      	mov	r0, r4
   b57c2:	bd38      	pop	{r3, r4, r5, pc}
   b57c4:	000b8664 	.word	0x000b8664

000b57c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b57c8:	4770      	bx	lr

000b57ca <_ZN9IPAddressD0Ev>:
   b57ca:	b510      	push	{r4, lr}
   b57cc:	2118      	movs	r1, #24
   b57ce:	4604      	mov	r4, r0
   b57d0:	f7fe fc65 	bl	b409e <_ZdlPvj>
   b57d4:	4620      	mov	r0, r4
   b57d6:	bd10      	pop	{r4, pc}

000b57d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b57da:	7d03      	ldrb	r3, [r0, #20]
   b57dc:	2b06      	cmp	r3, #6
{
   b57de:	b08d      	sub	sp, #52	; 0x34
   b57e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57e2:	f100 0704 	add.w	r7, r0, #4
   b57e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b57ea:	d012      	beq.n	b5812 <_ZNK9IPAddress7printToER5Print+0x3a>
   b57ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b57f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b57f4:	220a      	movs	r2, #10
   b57f6:	4630      	mov	r0, r6
   b57f8:	f001 fa9d 	bl	b6d36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b57fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b57fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5800:	d019      	beq.n	b5836 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5802:	2c00      	cmp	r4, #0
   b5804:	d0f4      	beq.n	b57f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5806:	212e      	movs	r1, #46	; 0x2e
   b5808:	4630      	mov	r0, r6
   b580a:	f001 fa7b 	bl	b6d04 <_ZN5Print5printEc>
   b580e:	4404      	add	r4, r0
   b5810:	e7ee      	b.n	b57f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5812:	232f      	movs	r3, #47	; 0x2f
   b5814:	466a      	mov	r2, sp
   b5816:	4639      	mov	r1, r7
   b5818:	200a      	movs	r0, #10
		buf[0] = 0;
   b581a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b581e:	f7ff f9ff 	bl	b4c20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5822:	4668      	mov	r0, sp
   b5824:	f002 fcab 	bl	b817e <strlen>
   b5828:	6833      	ldr	r3, [r6, #0]
   b582a:	4602      	mov	r2, r0
   b582c:	68db      	ldr	r3, [r3, #12]
   b582e:	4669      	mov	r1, sp
   b5830:	4630      	mov	r0, r6
   b5832:	4798      	blx	r3
   b5834:	4604      	mov	r4, r0
    }
    return n;
}
   b5836:	4620      	mov	r0, r4
   b5838:	b00d      	add	sp, #52	; 0x34
   b583a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b583c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b583c:	b510      	push	{r4, lr}
   b583e:	4b05      	ldr	r3, [pc, #20]	; (b5854 <_ZN9IPAddressC1Ev+0x18>)
   b5840:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5842:	2211      	movs	r2, #17
   b5844:	f840 3b04 	str.w	r3, [r0], #4
   b5848:	2100      	movs	r1, #0
   b584a:	f002 fc1b 	bl	b8084 <memset>
}
   b584e:	4620      	mov	r0, r4
   b5850:	bd10      	pop	{r4, pc}
   b5852:	bf00      	nop
   b5854:	000b868c 	.word	0x000b868c

000b5858 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5858:	4603      	mov	r3, r0
   b585a:	4a07      	ldr	r2, [pc, #28]	; (b5878 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b585c:	b510      	push	{r4, lr}
   b585e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5862:	f101 0210 	add.w	r2, r1, #16
   b5866:	f851 4b04 	ldr.w	r4, [r1], #4
   b586a:	f843 4b04 	str.w	r4, [r3], #4
   b586e:	4291      	cmp	r1, r2
   b5870:	d1f9      	bne.n	b5866 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5872:	780a      	ldrb	r2, [r1, #0]
   b5874:	701a      	strb	r2, [r3, #0]
}
   b5876:	bd10      	pop	{r4, pc}
   b5878:	000b868c 	.word	0x000b868c

000b587c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b587c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b587e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5882:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5886:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b588a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b588e:	2304      	movs	r3, #4
   b5890:	6041      	str	r1, [r0, #4]
   b5892:	7503      	strb	r3, [r0, #20]
}
   b5894:	bd10      	pop	{r4, pc}
	...

000b5898 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5898:	b507      	push	{r0, r1, r2, lr}
   b589a:	4b06      	ldr	r3, [pc, #24]	; (b58b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b589c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b589e:	78cb      	ldrb	r3, [r1, #3]
   b58a0:	9300      	str	r3, [sp, #0]
   b58a2:	788b      	ldrb	r3, [r1, #2]
   b58a4:	784a      	ldrb	r2, [r1, #1]
   b58a6:	7809      	ldrb	r1, [r1, #0]
   b58a8:	f7ff ffe8 	bl	b587c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b58ac:	b003      	add	sp, #12
   b58ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b58b2:	bf00      	nop
   b58b4:	000b868c 	.word	0x000b868c

000b58b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b58b8:	f100 0310 	add.w	r3, r0, #16
   b58bc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b58be:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b58c2:	2901      	cmp	r1, #1
   b58c4:	4618      	mov	r0, r3
   b58c6:	d108      	bne.n	b58da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b58c8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b58cc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b58d0:	3a01      	subs	r2, #1
   b58d2:	f103 0310 	add.w	r3, r3, #16
   b58d6:	d1f2      	bne.n	b58be <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b58d8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b58da:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b58dc:	bf04      	itt	eq
   b58de:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b58e2:	1852      	addeq	r2, r2, r1
   b58e4:	e7f4      	b.n	b58d0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b58e6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b58e6:	b40e      	push	{r1, r2, r3}
   b58e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58ea:	b088      	sub	sp, #32
   b58ec:	af00      	add	r7, sp, #0
   b58ee:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b58f2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b58f4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b58f8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b58fa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b58fc:	462b      	mov	r3, r5
   b58fe:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5900:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5902:	f7ff fb41 	bl	b4f88 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5906:	280f      	cmp	r0, #15
   b5908:	687a      	ldr	r2, [r7, #4]
   b590a:	d91a      	bls.n	b5942 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b590c:	f100 0308 	add.w	r3, r0, #8
   b5910:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5914:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5916:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b591a:	1c41      	adds	r1, r0, #1
   b591c:	462b      	mov	r3, r5
   b591e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5920:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5922:	f7ff fb31 	bl	b4f88 <vsnprintf>
        if (n > 0) {
   b5926:	1e02      	subs	r2, r0, #0
   b5928:	dd04      	ble.n	b5934 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b592a:	6823      	ldr	r3, [r4, #0]
   b592c:	4669      	mov	r1, sp
   b592e:	689b      	ldr	r3, [r3, #8]
   b5930:	4620      	mov	r0, r4
   b5932:	4798      	blx	r3
   b5934:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5936:	3720      	adds	r7, #32
   b5938:	46bd      	mov	sp, r7
   b593a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b593e:	b003      	add	sp, #12
   b5940:	4770      	bx	lr
    } else if (n > 0) {
   b5942:	2800      	cmp	r0, #0
   b5944:	d0f7      	beq.n	b5936 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5946:	6823      	ldr	r3, [r4, #0]
   b5948:	4602      	mov	r2, r0
   b594a:	689b      	ldr	r3, [r3, #8]
   b594c:	f107 0110 	add.w	r1, r7, #16
   b5950:	4620      	mov	r0, r4
   b5952:	4798      	blx	r3
}
   b5954:	e7ef      	b.n	b5936 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5956 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5956:	b538      	push	{r3, r4, r5, lr}
   b5958:	680b      	ldr	r3, [r1, #0]
   b595a:	6003      	str	r3, [r0, #0]
   b595c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b595e:	6843      	ldr	r3, [r0, #4]
   b5960:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5962:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5964:	d008      	beq.n	b5978 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5966:	b115      	cbz	r5, b596e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5968:	686b      	ldr	r3, [r5, #4]
   b596a:	3301      	adds	r3, #1
   b596c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b596e:	6860      	ldr	r0, [r4, #4]
   b5970:	b108      	cbz	r0, b5976 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5972:	f7ff fb59 	bl	b5028 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5976:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5978:	bd38      	pop	{r3, r4, r5, pc}

000b597a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b597a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b597c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b597e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5982:	689b      	ldr	r3, [r3, #8]
   b5984:	2201      	movs	r2, #1
   b5986:	f10d 0107 	add.w	r1, sp, #7
   b598a:	4798      	blx	r3
}
   b598c:	b003      	add	sp, #12
   b598e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5992 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5992:	460b      	mov	r3, r1
   b5994:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5996:	2200      	movs	r2, #0
   b5998:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b599a:	e9c0 2200 	strd	r2, r2, [r0]
   b599e:	4604      	mov	r4, r0
        t_ = t;
   b59a0:	6083      	str	r3, [r0, #8]
    if (t) {
   b59a2:	b90b      	cbnz	r3, b59a8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b59a4:	4620      	mov	r0, r4
   b59a6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b59a8:	f7ff ffd5 	bl	b5956 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b59ac:	e7fa      	b.n	b59a4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b59ae <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b59ae:	6883      	ldr	r3, [r0, #8]
   b59b0:	b1eb      	cbz	r3, b59ee <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b59b2:	781a      	ldrb	r2, [r3, #0]
   b59b4:	2a03      	cmp	r2, #3
   b59b6:	d81a      	bhi.n	b59ee <_ZNK5spark9JSONValue4typeEv+0x40>
   b59b8:	e8df f002 	tbb	[pc, r2]
   b59bc:	1b021704 	.word	0x1b021704
   b59c0:	2005      	movs	r0, #5
   b59c2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b59c4:	6802      	ldr	r2, [r0, #0]
   b59c6:	685b      	ldr	r3, [r3, #4]
   b59c8:	6852      	ldr	r2, [r2, #4]
   b59ca:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b59cc:	282d      	cmp	r0, #45	; 0x2d
   b59ce:	d012      	beq.n	b59f6 <_ZNK5spark9JSONValue4typeEv+0x48>
   b59d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b59d4:	2b09      	cmp	r3, #9
   b59d6:	d90e      	bls.n	b59f6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b59d8:	2874      	cmp	r0, #116	; 0x74
   b59da:	d00e      	beq.n	b59fa <_ZNK5spark9JSONValue4typeEv+0x4c>
   b59dc:	2866      	cmp	r0, #102	; 0x66
   b59de:	d00c      	beq.n	b59fa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b59e0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b59e4:	4258      	negs	r0, r3
   b59e6:	4158      	adcs	r0, r3
   b59e8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b59ea:	2006      	movs	r0, #6
   b59ec:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b59ee:	2000      	movs	r0, #0
   b59f0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b59f2:	2004      	movs	r0, #4
   b59f4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b59f6:	2003      	movs	r0, #3
   b59f8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b59fa:	2002      	movs	r0, #2
}
   b59fc:	4770      	bx	lr

000b59fe <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b59fe:	b510      	push	{r4, lr}
   b5a00:	4604      	mov	r4, r0
    switch (type()) {
   b5a02:	f7ff ffd4 	bl	b59ae <_ZNK5spark9JSONValue4typeEv>
   b5a06:	2802      	cmp	r0, #2
   b5a08:	d00e      	beq.n	b5a28 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b5a0a:	1ec3      	subs	r3, r0, #3
   b5a0c:	b2db      	uxtb	r3, r3
   b5a0e:	2b01      	cmp	r3, #1
   b5a10:	d814      	bhi.n	b5a3c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5a12:	6822      	ldr	r2, [r4, #0]
   b5a14:	68a3      	ldr	r3, [r4, #8]
   b5a16:	6850      	ldr	r0, [r2, #4]
   b5a18:	685b      	ldr	r3, [r3, #4]
}
   b5a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5a1e:	220a      	movs	r2, #10
   b5a20:	2100      	movs	r1, #0
   b5a22:	4418      	add	r0, r3
   b5a24:	f002 bc5e 	b.w	b82e4 <strtol>
        const char* const s = d_->json + t_->start;
   b5a28:	6822      	ldr	r2, [r4, #0]
   b5a2a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5a2c:	6852      	ldr	r2, [r2, #4]
   b5a2e:	685b      	ldr	r3, [r3, #4]
   b5a30:	5cd0      	ldrb	r0, [r2, r3]
   b5a32:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b5a36:	4258      	negs	r0, r3
   b5a38:	4158      	adcs	r0, r3
}
   b5a3a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5a3c:	2000      	movs	r0, #0
   b5a3e:	e7fc      	b.n	b5a3a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5a40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5a40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5a42:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5a44:	e9c0 3300 	strd	r3, r3, [r0]
   b5a48:	4604      	mov	r4, r0
        n_(0) {
   b5a4a:	480e      	ldr	r0, [pc, #56]	; (b5a84 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5a4c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5a50:	b1a9      	cbz	r1, b5a7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5a52:	780b      	ldrb	r3, [r1, #0]
   b5a54:	2b03      	cmp	r3, #3
   b5a56:	d006      	beq.n	b5a66 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5a58:	b98b      	cbnz	r3, b5a7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5a5a:	6813      	ldr	r3, [r2, #0]
   b5a5c:	6858      	ldr	r0, [r3, #4]
   b5a5e:	684b      	ldr	r3, [r1, #4]
   b5a60:	5cc3      	ldrb	r3, [r0, r3]
   b5a62:	2b6e      	cmp	r3, #110	; 0x6e
   b5a64:	d007      	beq.n	b5a76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5a66:	6813      	ldr	r3, [r2, #0]
   b5a68:	684d      	ldr	r5, [r1, #4]
   b5a6a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5a6c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5a6e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5a70:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5a72:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5a74:	60e3      	str	r3, [r4, #12]
   b5a76:	4611      	mov	r1, r2
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ff6c 	bl	b5956 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5a7e:	4620      	mov	r0, r4
   b5a80:	bd38      	pop	{r3, r4, r5, pc}
   b5a82:	bf00      	nop
   b5a84:	000b86fb 	.word	0x000b86fb

000b5a88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5a88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5a8a:	2500      	movs	r5, #0
   b5a8c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5a8e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5a92:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5a96:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5a9a:	4604      	mov	r4, r0
   b5a9c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5a9e:	b14b      	cbz	r3, b5ab4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5aa0:	781a      	ldrb	r2, [r3, #0]
   b5aa2:	2a01      	cmp	r2, #1
   b5aa4:	d106      	bne.n	b5ab4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5aa6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5aaa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5aac:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5aae:	6143      	str	r3, [r0, #20]
   b5ab0:	f7ff ff51 	bl	b5956 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	bd38      	pop	{r3, r4, r5, pc}

000b5ab8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5ab8:	b510      	push	{r4, lr}
    if (!n_) {
   b5aba:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5abc:	4604      	mov	r4, r0
    if (!n_) {
   b5abe:	b163      	cbz	r3, b5ada <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5ac0:	6880      	ldr	r0, [r0, #8]
   b5ac2:	60e0      	str	r0, [r4, #12]
    --n_;
   b5ac4:	3b01      	subs	r3, #1
    ++t_;
   b5ac6:	3010      	adds	r0, #16
   b5ac8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5aca:	6120      	str	r0, [r4, #16]
    --n_;
   b5acc:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5ace:	b113      	cbz	r3, b5ad6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5ad0:	f7ff fef2 	bl	b58b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5ad4:	60a0      	str	r0, [r4, #8]
    return true;
   b5ad6:	2001      	movs	r0, #1
   b5ad8:	e000      	b.n	b5adc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5ada:	4618      	mov	r0, r3
}
   b5adc:	bd10      	pop	{r4, pc}

000b5ade <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5ade:	b510      	push	{r4, lr}
    write('}');
   b5ae0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5ae2:	4604      	mov	r4, r0
    write('}');
   b5ae4:	f7ff ff49 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5ae8:	2301      	movs	r3, #1
   b5aea:	7123      	strb	r3, [r4, #4]
}
   b5aec:	4620      	mov	r0, r4
   b5aee:	bd10      	pop	{r4, pc}

000b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5af0:	b508      	push	{r3, lr}
    switch (state_) {
   b5af2:	7903      	ldrb	r3, [r0, #4]
   b5af4:	2b01      	cmp	r3, #1
   b5af6:	d002      	beq.n	b5afe <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5af8:	2b02      	cmp	r3, #2
   b5afa:	d004      	beq.n	b5b06 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5afc:	bd08      	pop	{r3, pc}
        write(',');
   b5afe:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5b00:	f7ff ff3b 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
}
   b5b04:	e7fa      	b.n	b5afc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b5b06:	213a      	movs	r1, #58	; 0x3a
   b5b08:	e7fa      	b.n	b5b00 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b5b0a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b5b0a:	b510      	push	{r4, lr}
   b5b0c:	4604      	mov	r4, r0
    writeSeparator();
   b5b0e:	f7ff ffef 	bl	b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5b12:	4620      	mov	r0, r4
   b5b14:	217b      	movs	r1, #123	; 0x7b
   b5b16:	f7ff ff30 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5b1a:	2300      	movs	r3, #0
   b5b1c:	7123      	strb	r3, [r4, #4]
}
   b5b1e:	4620      	mov	r0, r4
   b5b20:	bd10      	pop	{r4, pc}
	...

000b5b24 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5b24:	b513      	push	{r0, r1, r4, lr}
   b5b26:	4604      	mov	r4, r0
   b5b28:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5b2a:	f7ff ffe1 	bl	b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5b2e:	6823      	ldr	r3, [r4, #0]
   b5b30:	9a01      	ldr	r2, [sp, #4]
   b5b32:	68db      	ldr	r3, [r3, #12]
   b5b34:	4903      	ldr	r1, [pc, #12]	; (b5b44 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5b36:	4620      	mov	r0, r4
   b5b38:	4798      	blx	r3
    state_ = NEXT;
   b5b3a:	2301      	movs	r3, #1
}
   b5b3c:	4620      	mov	r0, r4
    state_ = NEXT;
   b5b3e:	7123      	strb	r3, [r4, #4]
}
   b5b40:	b002      	add	sp, #8
   b5b42:	bd10      	pop	{r4, pc}
   b5b44:	000b8487 	.word	0x000b8487

000b5b48 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5b48:	b513      	push	{r0, r1, r4, lr}
   b5b4a:	4604      	mov	r4, r0
   b5b4c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5b4e:	f7ff ffcf 	bl	b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5b52:	6823      	ldr	r3, [r4, #0]
   b5b54:	9a01      	ldr	r2, [sp, #4]
   b5b56:	68db      	ldr	r3, [r3, #12]
   b5b58:	4903      	ldr	r1, [pc, #12]	; (b5b68 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	4798      	blx	r3
    state_ = NEXT;
   b5b5e:	2301      	movs	r3, #1
}
   b5b60:	4620      	mov	r0, r4
    state_ = NEXT;
   b5b62:	7123      	strb	r3, [r4, #4]
}
   b5b64:	b002      	add	sp, #8
   b5b66:	bd10      	pop	{r4, pc}
   b5b68:	000b8698 	.word	0x000b8698

000b5b6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5b70:	460d      	mov	r5, r1
    write('"');
   b5b72:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5b74:	4690      	mov	r8, r2
   b5b76:	4604      	mov	r4, r0
    write('"');
   b5b78:	f7ff feff 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5b7c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5b80:	44a8      	add	r8, r5
    const char *s = str;
   b5b82:	462f      	mov	r7, r5
    while (s != end) {
   b5b84:	4547      	cmp	r7, r8
   b5b86:	46ba      	mov	sl, r7
   b5b88:	d03d      	beq.n	b5c06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5b8a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5b8e:	2e22      	cmp	r6, #34	; 0x22
   b5b90:	d006      	beq.n	b5ba0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5b92:	2e5c      	cmp	r6, #92	; 0x5c
   b5b94:	d004      	beq.n	b5ba0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5b96:	4630      	mov	r0, r6
   b5b98:	f002 fa44 	bl	b8024 <isprint>
   b5b9c:	2800      	cmp	r0, #0
   b5b9e:	d1f1      	bne.n	b5b84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5ba0:	6823      	ldr	r3, [r4, #0]
   b5ba2:	ebaa 0205 	sub.w	r2, sl, r5
   b5ba6:	689b      	ldr	r3, [r3, #8]
   b5ba8:	4629      	mov	r1, r5
   b5baa:	4620      	mov	r0, r4
   b5bac:	4798      	blx	r3
            write('\\');
   b5bae:	215c      	movs	r1, #92	; 0x5c
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f7ff fee2 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5bb6:	2e0d      	cmp	r6, #13
   b5bb8:	d80a      	bhi.n	b5bd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5bba:	2e07      	cmp	r6, #7
   b5bbc:	d91c      	bls.n	b5bf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5bbe:	f1a6 0308 	sub.w	r3, r6, #8
   b5bc2:	2b05      	cmp	r3, #5
   b5bc4:	d818      	bhi.n	b5bf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5bc6:	e8df f003 	tbb	[pc, r3]
   b5bca:	0f0d      	.short	0x0f0d
   b5bcc:	15131711 	.word	0x15131711
   b5bd0:	2e22      	cmp	r6, #34	; 0x22
   b5bd2:	d001      	beq.n	b5bd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5bd4:	2e5c      	cmp	r6, #92	; 0x5c
   b5bd6:	d10f      	bne.n	b5bf8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5bd8:	4631      	mov	r1, r6
                write('b');
   b5bda:	4620      	mov	r0, r4
   b5bdc:	f7ff fecd 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5be0:	463d      	mov	r5, r7
    while (s != end) {
   b5be2:	e7cf      	b.n	b5b84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5be4:	2162      	movs	r1, #98	; 0x62
   b5be6:	e7f8      	b.n	b5bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5be8:	2174      	movs	r1, #116	; 0x74
   b5bea:	e7f6      	b.n	b5bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5bec:	216e      	movs	r1, #110	; 0x6e
   b5bee:	e7f4      	b.n	b5bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5bf0:	2166      	movs	r1, #102	; 0x66
   b5bf2:	e7f2      	b.n	b5bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5bf4:	2172      	movs	r1, #114	; 0x72
   b5bf6:	e7f0      	b.n	b5bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5bf8:	6823      	ldr	r3, [r4, #0]
   b5bfa:	4632      	mov	r2, r6
   b5bfc:	68db      	ldr	r3, [r3, #12]
   b5bfe:	4649      	mov	r1, r9
   b5c00:	4620      	mov	r0, r4
   b5c02:	4798      	blx	r3
                break;
   b5c04:	e7ec      	b.n	b5be0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5c06:	42bd      	cmp	r5, r7
   b5c08:	d005      	beq.n	b5c16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5c0a:	6823      	ldr	r3, [r4, #0]
   b5c0c:	1b7a      	subs	r2, r7, r5
   b5c0e:	689b      	ldr	r3, [r3, #8]
   b5c10:	4629      	mov	r1, r5
   b5c12:	4620      	mov	r0, r4
   b5c14:	4798      	blx	r3
    }
    write('"');
   b5c16:	2122      	movs	r1, #34	; 0x22
   b5c18:	4620      	mov	r0, r4
   b5c1a:	f7ff feae 	bl	b597a <_ZN5spark10JSONWriter5writeEc>
}
   b5c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5c22:	bf00      	nop
   b5c24:	000b869b 	.word	0x000b869b

000b5c28 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5c28:	b513      	push	{r0, r1, r4, lr}
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5c30:	f7ff ff5e 	bl	b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5c34:	4620      	mov	r0, r4
   b5c36:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5c3a:	f7ff ff97 	bl	b5b6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5c3e:	2302      	movs	r3, #2
}
   b5c40:	4620      	mov	r0, r4
    state_ = VALUE;
   b5c42:	7123      	strb	r3, [r4, #4]
}
   b5c44:	b002      	add	sp, #8
   b5c46:	bd10      	pop	{r4, pc}

000b5c48 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5c48:	b513      	push	{r0, r1, r4, lr}
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5c50:	f7ff ff4e 	bl	b5af0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5c54:	4620      	mov	r0, r4
   b5c56:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5c5a:	f7ff ff87 	bl	b5b6c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5c5e:	2301      	movs	r3, #1
}
   b5c60:	4620      	mov	r0, r4
    state_ = NEXT;
   b5c62:	7123      	strb	r3, [r4, #4]
}
   b5c64:	b002      	add	sp, #8
   b5c66:	bd10      	pop	{r4, pc}

000b5c68 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5c68:	6880      	ldr	r0, [r0, #8]
   b5c6a:	6803      	ldr	r3, [r0, #0]
   b5c6c:	68db      	ldr	r3, [r3, #12]
   b5c6e:	4718      	bx	r3

000b5c70 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5c70:	4770      	bx	lr

000b5c72 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5c72:	4608      	mov	r0, r1
   b5c74:	b111      	cbz	r1, b5c7c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5c76:	680b      	ldr	r3, [r1, #0]
   b5c78:	685b      	ldr	r3, [r3, #4]
   b5c7a:	4718      	bx	r3
}
   b5c7c:	4770      	bx	lr

000b5c7e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5c7e:	4770      	bx	lr

000b5c80 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5c80:	4770      	bx	lr

000b5c82 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5c82:	4770      	bx	lr

000b5c84 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5c84:	4770      	bx	lr

000b5c86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5c86:	b538      	push	{r3, r4, r5, lr}
   b5c88:	4604      	mov	r4, r0
   b5c8a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5c8c:	6800      	ldr	r0, [r0, #0]
   b5c8e:	212e      	movs	r1, #46	; 0x2e
   b5c90:	f002 fa3b 	bl	b810a <strchrnul>
    size = s - category;
   b5c94:	6823      	ldr	r3, [r4, #0]
   b5c96:	1ac3      	subs	r3, r0, r3
   b5c98:	602b      	str	r3, [r5, #0]
    if (size) {
   b5c9a:	b123      	cbz	r3, b5ca6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5c9c:	7803      	ldrb	r3, [r0, #0]
   b5c9e:	b103      	cbz	r3, b5ca2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5ca0:	3001      	adds	r0, #1
   b5ca2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ca4:	6020      	str	r0, [r4, #0]
}
   b5ca6:	4618      	mov	r0, r3
   b5ca8:	bd38      	pop	{r3, r4, r5, pc}

000b5caa <_ZN5spark16JSONStreamWriterD0Ev>:
   b5caa:	b510      	push	{r4, lr}
   b5cac:	210c      	movs	r1, #12
   b5cae:	4604      	mov	r4, r0
   b5cb0:	f7fe f9f5 	bl	b409e <_ZdlPvj>
   b5cb4:	4620      	mov	r0, r4
   b5cb6:	bd10      	pop	{r4, pc}

000b5cb8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5cb8:	b510      	push	{r4, lr}
   b5cba:	2104      	movs	r1, #4
   b5cbc:	4604      	mov	r4, r0
   b5cbe:	f7fe f9ee 	bl	b409e <_ZdlPvj>
   b5cc2:	4620      	mov	r0, r4
   b5cc4:	bd10      	pop	{r4, pc}

000b5cc6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5cc6:	b510      	push	{r4, lr}
   b5cc8:	2104      	movs	r1, #4
   b5cca:	4604      	mov	r4, r0
   b5ccc:	f7fe f9e7 	bl	b409e <_ZdlPvj>
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd10      	pop	{r4, pc}

000b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5cd4:	f7fe bf24 	b.w	b4b20 <os_mutex_recursive_lock>

000b5cd8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5cd8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5cda:	f002 fa20 	bl	b811e <strcmp>
}
   b5cde:	fab0 f080 	clz	r0, r0
   b5ce2:	0940      	lsrs	r0, r0, #5
   b5ce4:	bd08      	pop	{r3, pc}

000b5ce6 <__tcf_1>:
   b5ce6:	4770      	bx	lr

000b5ce8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5ce8:	b510      	push	{r4, lr}
   b5cea:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5cec:	f001 fb5c 	bl	b73a8 <_Z16_fetch_usbserialv>
   b5cf0:	4284      	cmp	r4, r0
   b5cf2:	d010      	beq.n	b5d16 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5cf4:	f001 fd42 	bl	b777c <_Z22__fetch_global_Serial1v>
   b5cf8:	4284      	cmp	r4, r0
   b5cfa:	d105      	bne.n	b5d08 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5cfc:	f001 fd3e 	bl	b777c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5d04:	f001 baeb 	b.w	b72de <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5d08:	b12c      	cbz	r4, b5d16 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5d0a:	6823      	ldr	r3, [r4, #0]
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	685b      	ldr	r3, [r3, #4]
}
   b5d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d14:	4718      	bx	r3
   b5d16:	bd10      	pop	{r4, pc}

000b5d18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d18:	680b      	ldr	r3, [r1, #0]
   b5d1a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5d1c:	684b      	ldr	r3, [r1, #4]
   b5d1e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5d20:	b113      	cbz	r3, b5d28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5d22:	685a      	ldr	r2, [r3, #4]
   b5d24:	3201      	adds	r2, #1
   b5d26:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d28:	4770      	bx	lr

000b5d2a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5d2a:	b513      	push	{r0, r1, r4, lr}
   b5d2c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5d2e:	4608      	mov	r0, r1
   b5d30:	9101      	str	r1, [sp, #4]
   b5d32:	f002 fa24 	bl	b817e <strlen>
   b5d36:	9901      	ldr	r1, [sp, #4]
   b5d38:	4602      	mov	r2, r0
   b5d3a:	4620      	mov	r0, r4
}
   b5d3c:	b002      	add	sp, #8
   b5d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5d42:	f7ff bf81 	b.w	b5c48 <_ZN5spark10JSONWriter5valueEPKcj>

000b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5d46:	b513      	push	{r0, r1, r4, lr}
   b5d48:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5d4a:	4608      	mov	r0, r1
   b5d4c:	9101      	str	r1, [sp, #4]
   b5d4e:	f002 fa16 	bl	b817e <strlen>
   b5d52:	6823      	ldr	r3, [r4, #0]
   b5d54:	9901      	ldr	r1, [sp, #4]
   b5d56:	68db      	ldr	r3, [r3, #12]
   b5d58:	4602      	mov	r2, r0
   b5d5a:	4620      	mov	r0, r4
}
   b5d5c:	b002      	add	sp, #8
   b5d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5d62:	4718      	bx	r3

000b5d64 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5d64:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5d66:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5d68:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5d6c:	68db      	ldr	r3, [r3, #12]
   b5d6e:	2201      	movs	r2, #1
   b5d70:	f10d 0107 	add.w	r1, sp, #7
   b5d74:	4798      	blx	r3
}
   b5d76:	b003      	add	sp, #12
   b5d78:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d7c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5d7c:	b40e      	push	{r1, r2, r3}
   b5d7e:	b503      	push	{r0, r1, lr}
   b5d80:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5d82:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5d84:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5d88:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5d8a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5d8c:	f000 fff1 	bl	b6d72 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5d90:	b002      	add	sp, #8
   b5d92:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d96:	b003      	add	sp, #12
   b5d98:	4770      	bx	lr

000b5d9a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5d9a:	680a      	ldr	r2, [r1, #0]
   b5d9c:	6002      	str	r2, [r0, #0]
   b5d9e:	684a      	ldr	r2, [r1, #4]
   b5da0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5da2:	2200      	movs	r2, #0
   b5da4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5da8:	b510      	push	{r4, lr}
   b5daa:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5dac:	688c      	ldr	r4, [r1, #8]
   b5dae:	6084      	str	r4, [r0, #8]
   b5db0:	68cc      	ldr	r4, [r1, #12]
   b5db2:	60c4      	str	r4, [r0, #12]
   b5db4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5db6:	608a      	str	r2, [r1, #8]
   b5db8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5dba:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dbc:	610a      	str	r2, [r1, #16]
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5dc4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5dc8:	f04f 0a14 	mov.w	sl, #20
   b5dcc:	9300      	str	r3, [sp, #0]
   b5dce:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5dd2:	4b18      	ldr	r3, [pc, #96]	; (b5e34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5dd4:	10a4      	asrs	r4, r4, #2
   b5dd6:	4617      	mov	r7, r2
   b5dd8:	435c      	muls	r4, r3
   b5dda:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5ddc:	2c00      	cmp	r4, #0
   b5dde:	dd21      	ble.n	b5e24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5de0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5de2:	fb0a f006 	mul.w	r0, sl, r6
   b5de6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5dea:	463a      	mov	r2, r7
   b5dec:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5df0:	5828      	ldr	r0, [r5, r0]
   b5df2:	9101      	str	r1, [sp, #4]
   b5df4:	455f      	cmp	r7, fp
   b5df6:	bf28      	it	cs
   b5df8:	465a      	movcs	r2, fp
   b5dfa:	f002 f9c8 	bl	b818e <strncmp>
                if (cmp == 0) {
   b5dfe:	2800      	cmp	r0, #0
   b5e00:	9901      	ldr	r1, [sp, #4]
   b5e02:	f04f 0301 	mov.w	r3, #1
   b5e06:	d10b      	bne.n	b5e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5e08:	455f      	cmp	r7, fp
   b5e0a:	d103      	bne.n	b5e14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5e0c:	9a00      	ldr	r2, [sp, #0]
   b5e0e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5e10:	4634      	mov	r4, r6
   b5e12:	e7e3      	b.n	b5ddc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5e14:	d9fc      	bls.n	b5e10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5e16:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5e18:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5e1c:	3e01      	subs	r6, #1
   b5e1e:	e7f7      	b.n	b5e10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5e20:	dbf9      	blt.n	b5e16 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5e22:	e7f5      	b.n	b5e10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5e24:	eba5 0508 	sub.w	r5, r5, r8
}
   b5e28:	4802      	ldr	r0, [pc, #8]	; (b5e34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5e2a:	10ad      	asrs	r5, r5, #2
   b5e2c:	4368      	muls	r0, r5
   b5e2e:	b003      	add	sp, #12
   b5e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e34:	cccccccd 	.word	0xcccccccd

000b5e38 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5e3a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5e3c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5e3e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5e40:	b303      	cbz	r3, b5e84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5e42:	b1f9      	cbz	r1, b5e84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5e44:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5e46:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5e4a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5e4c:	a903      	add	r1, sp, #12
   b5e4e:	a801      	add	r0, sp, #4
   b5e50:	f7ff ff19 	bl	b5c86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5e54:	4601      	mov	r1, r0
   b5e56:	b1a8      	cbz	r0, b5e84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5e58:	f10d 030b 	add.w	r3, sp, #11
   b5e5c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5e5e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5e62:	4620      	mov	r0, r4
   b5e64:	f7ff ffac 	bl	b5dc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5e68:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5e6c:	b153      	cbz	r3, b5e84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5e6e:	6823      	ldr	r3, [r4, #0]
   b5e70:	2414      	movs	r4, #20
   b5e72:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5e76:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5e78:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5e7c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5e7e:	bfa8      	it	ge
   b5e80:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5e82:	e7e3      	b.n	b5e4c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5e84:	4628      	mov	r0, r5
   b5e86:	b004      	add	sp, #16
   b5e88:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5e8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5e8c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5e8e:	4c09      	ldr	r4, [pc, #36]	; (b5eb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5e90:	7823      	ldrb	r3, [r4, #0]
   b5e92:	f3bf 8f5b 	dmb	ish
   b5e96:	07db      	lsls	r3, r3, #31
   b5e98:	d409      	bmi.n	b5eae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5e9a:	4620      	mov	r0, r4
   b5e9c:	f7fe f90e 	bl	b40bc <__cxa_guard_acquire>
   b5ea0:	b128      	cbz	r0, b5eae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5ea2:	4620      	mov	r0, r4
   b5ea4:	f7fe f90f 	bl	b40c6 <__cxa_guard_release>
   b5ea8:	4803      	ldr	r0, [pc, #12]	; (b5eb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5eaa:	f002 f8b1 	bl	b8010 <atexit>
}
   b5eae:	4803      	ldr	r0, [pc, #12]	; (b5ebc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5eb0:	bd10      	pop	{r4, pc}
   b5eb2:	bf00      	nop
   b5eb4:	2003e69c 	.word	0x2003e69c
   b5eb8:	000b5c7f 	.word	0x000b5c7f
   b5ebc:	2003e558 	.word	0x2003e558

000b5ec0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5ec0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5ec2:	4c09      	ldr	r4, [pc, #36]	; (b5ee8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5ec4:	7823      	ldrb	r3, [r4, #0]
   b5ec6:	f3bf 8f5b 	dmb	ish
   b5eca:	07db      	lsls	r3, r3, #31
   b5ecc:	d409      	bmi.n	b5ee2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5ece:	4620      	mov	r0, r4
   b5ed0:	f7fe f8f4 	bl	b40bc <__cxa_guard_acquire>
   b5ed4:	b128      	cbz	r0, b5ee2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	f7fe f8f5 	bl	b40c6 <__cxa_guard_release>
   b5edc:	4803      	ldr	r0, [pc, #12]	; (b5eec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5ede:	f002 f897 	bl	b8010 <atexit>
    return &factory;
}
   b5ee2:	4803      	ldr	r0, [pc, #12]	; (b5ef0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5ee4:	bd10      	pop	{r4, pc}
   b5ee6:	bf00      	nop
   b5ee8:	2003e6a0 	.word	0x2003e6a0
   b5eec:	000b5ce7 	.word	0x000b5ce7
   b5ef0:	2003e55c 	.word	0x2003e55c

000b5ef4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5ef4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5ef6:	2500      	movs	r5, #0
   b5ef8:	4604      	mov	r4, r0
   b5efa:	e9c0 5500 	strd	r5, r5, [r0]
   b5efe:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5f02:	6085      	str	r5, [r0, #8]
   b5f04:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5f06:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5f0a:	f7fe fdf9 	bl	b4b00 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b5f0e:	f7ff ffbd 	bl	b5e8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5f12:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5f14:	f7ff ffd4 	bl	b5ec0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5f18:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5f1a:	6220      	str	r0, [r4, #32]
}
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	bd38      	pop	{r3, r4, r5, pc}

000b5f20 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5f20:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5f22:	4c0a      	ldr	r4, [pc, #40]	; (b5f4c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5f24:	7823      	ldrb	r3, [r4, #0]
   b5f26:	f3bf 8f5b 	dmb	ish
   b5f2a:	07db      	lsls	r3, r3, #31
   b5f2c:	d40c      	bmi.n	b5f48 <_ZN5spark10LogManager8instanceEv+0x28>
   b5f2e:	4620      	mov	r0, r4
   b5f30:	f7fe f8c4 	bl	b40bc <__cxa_guard_acquire>
   b5f34:	b140      	cbz	r0, b5f48 <_ZN5spark10LogManager8instanceEv+0x28>
   b5f36:	4806      	ldr	r0, [pc, #24]	; (b5f50 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5f38:	f7ff ffdc 	bl	b5ef4 <_ZN5spark10LogManagerC1Ev>
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f7fe f8c2 	bl	b40c6 <__cxa_guard_release>
   b5f42:	4804      	ldr	r0, [pc, #16]	; (b5f54 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5f44:	f002 f864 	bl	b8010 <atexit>
    return &mgr;
}
   b5f48:	4801      	ldr	r0, [pc, #4]	; (b5f50 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5f4a:	bd10      	pop	{r4, pc}
   b5f4c:	2003e698 	.word	0x2003e698
   b5f50:	2003e6a8 	.word	0x2003e6a8
   b5f54:	000b6475 	.word	0x000b6475

000b5f58 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5f58:	4a02      	ldr	r2, [pc, #8]	; (b5f64 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5f5a:	4903      	ldr	r1, [pc, #12]	; (b5f68 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5f5c:	4803      	ldr	r0, [pc, #12]	; (b5f6c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5f5e:	2300      	movs	r3, #0
   b5f60:	f7fe bf2e 	b.w	b4dc0 <log_set_callbacks>
   b5f64:	000b6259 	.word	0x000b6259
   b5f68:	000b61e5 	.word	0x000b61e5
   b5f6c:	000b6165 	.word	0x000b6165

000b5f70 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5f70:	2300      	movs	r3, #0
   b5f72:	461a      	mov	r2, r3
   b5f74:	4619      	mov	r1, r3
   b5f76:	4618      	mov	r0, r3
   b5f78:	f7fe bf22 	b.w	b4dc0 <log_set_callbacks>

000b5f7c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5f7e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5f80:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5f82:	4668      	mov	r0, sp
   b5f84:	f7ff fec8 	bl	b5d18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5f88:	466a      	mov	r2, sp
   b5f8a:	4629      	mov	r1, r5
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	f7ff fd7b 	bl	b5a88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5f92:	a801      	add	r0, sp, #4
   b5f94:	f7fe f8a5 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5f98:	4620      	mov	r0, r4
   b5f9a:	b003      	add	sp, #12
   b5f9c:	bd30      	pop	{r4, r5, pc}

000b5f9e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5fa0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5fa2:	4604      	mov	r4, r0
   b5fa4:	4668      	mov	r0, sp
   b5fa6:	f7ff feb7 	bl	b5d18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5faa:	466a      	mov	r2, sp
   b5fac:	4629      	mov	r1, r5
   b5fae:	4620      	mov	r0, r4
   b5fb0:	f7ff fd46 	bl	b5a40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5fb4:	a801      	add	r0, sp, #4
   b5fb6:	f7fe f894 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5fba:	4620      	mov	r0, r4
   b5fbc:	b003      	add	sp, #12
   b5fbe:	bd30      	pop	{r4, r5, pc}

000b5fc0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5fc2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5fc4:	4604      	mov	r4, r0
   b5fc6:	4668      	mov	r0, sp
   b5fc8:	f7ff fea6 	bl	b5d18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5fcc:	466a      	mov	r2, sp
   b5fce:	4629      	mov	r1, r5
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	f7ff fcde 	bl	b5992 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5fd6:	a801      	add	r0, sp, #4
   b5fd8:	f7fe f883 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	b003      	add	sp, #12
   b5fe0:	bd30      	pop	{r4, r5, pc}
	...

000b5fe4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5fe4:	b570      	push	{r4, r5, r6, lr}
   b5fe6:	b08a      	sub	sp, #40	; 0x28
   b5fe8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5fea:	4601      	mov	r1, r0
   b5fec:	a804      	add	r0, sp, #16
   b5fee:	f7ff ffc5 	bl	b5f7c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5ff2:	4e14      	ldr	r6, [pc, #80]	; (b6044 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5ff4:	a804      	add	r0, sp, #16
   b5ff6:	f7ff fd5f 	bl	b5ab8 <_ZN5spark18JSONObjectIterator4nextEv>
   b5ffa:	b1e8      	cbz	r0, b6038 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5ffc:	a904      	add	r1, sp, #16
   b5ffe:	4668      	mov	r0, sp
   b6000:	f7ff ffcd 	bl	b5f9e <_ZNK5spark18JSONObjectIterator4nameEv>
   b6004:	9802      	ldr	r0, [sp, #8]
   b6006:	4631      	mov	r1, r6
   b6008:	f7ff fe66 	bl	b5cd8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b600c:	4604      	mov	r4, r0
   b600e:	b110      	cbz	r0, b6016 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6010:	1e2c      	subs	r4, r5, #0
   b6012:	bf18      	it	ne
   b6014:	2401      	movne	r4, #1
   b6016:	a801      	add	r0, sp, #4
   b6018:	f7fe f863 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b601c:	2c00      	cmp	r4, #0
   b601e:	d0e9      	beq.n	b5ff4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6020:	a904      	add	r1, sp, #16
   b6022:	4668      	mov	r0, sp
   b6024:	f7ff ffcc 	bl	b5fc0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b6028:	4668      	mov	r0, sp
   b602a:	f7ff fce8 	bl	b59fe <_ZNK5spark9JSONValue5toIntEv>
   b602e:	6028      	str	r0, [r5, #0]
   b6030:	a801      	add	r0, sp, #4
   b6032:	f7fe f856 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6036:	e7dd      	b.n	b5ff4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6038:	a805      	add	r0, sp, #20
   b603a:	f7fe f852 	bl	b40e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b603e:	b00a      	add	sp, #40	; 0x28
   b6040:	bd70      	pop	{r4, r5, r6, pc}
   b6042:	bf00      	nop
   b6044:	000b86a1 	.word	0x000b86a1

000b6048 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6048:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b604a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b604c:	4620      	mov	r0, r4
   b604e:	4913      	ldr	r1, [pc, #76]	; (b609c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6050:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6052:	f002 f864 	bl	b811e <strcmp>
   b6056:	b950      	cbnz	r0, b606e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6058:	f001 f9a6 	bl	b73a8 <_Z16_fetch_usbserialv>
   b605c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6060:	f001 f992 	bl	b7388 <_ZN9USBSerial5beginEl>
}
   b6064:	b003      	add	sp, #12
   b6066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b606a:	f001 b99d 	b.w	b73a8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b606e:	490c      	ldr	r1, [pc, #48]	; (b60a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6070:	4620      	mov	r0, r4
   b6072:	f002 f854 	bl	b811e <strcmp>
   b6076:	b978      	cbnz	r0, b6098 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6078:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b607c:	a901      	add	r1, sp, #4
   b607e:	4628      	mov	r0, r5
        int baud = 9600;
   b6080:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6082:	f7ff ffaf 	bl	b5fe4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b6086:	f001 fb79 	bl	b777c <_Z22__fetch_global_Serial1v>
   b608a:	9901      	ldr	r1, [sp, #4]
   b608c:	f001 f924 	bl	b72d8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6090:	f001 fb74 	bl	b777c <_Z22__fetch_global_Serial1v>
}
   b6094:	b003      	add	sp, #12
   b6096:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6098:	2000      	movs	r0, #0
   b609a:	e7fb      	b.n	b6094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b609c:	000b86a6 	.word	0x000b86a6
   b60a0:	000b86ad 	.word	0x000b86ad

000b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b60a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b60a6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b60aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b60ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b60ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b60b2:	42ae      	cmp	r6, r5
   b60b4:	d005      	beq.n	b60c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b60b6:	f105 0008 	add.w	r0, r5, #8
   b60ba:	f7ff fff3 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b60be:	3514      	adds	r5, #20
   b60c0:	e7f7      	b.n	b60b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b60c2:	6820      	ldr	r0, [r4, #0]
   b60c4:	f7fe ff50 	bl	b4f68 <free>
}
   b60c8:	4620      	mov	r0, r4
   b60ca:	bd70      	pop	{r4, r5, r6, pc}

000b60cc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b60cc:	b510      	push	{r4, lr}
   b60ce:	4604      	mov	r4, r0
   b60d0:	300c      	adds	r0, #12
   b60d2:	f7ff ffe7 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b60d6:	4620      	mov	r0, r4
   b60d8:	f7fe ffba 	bl	b5050 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b60dc:	4620      	mov	r0, r4
   b60de:	bd10      	pop	{r4, pc}

000b60e0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b60e0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b60e2:	4b04      	ldr	r3, [pc, #16]	; (b60f4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b60e4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b60e6:	f840 3b04 	str.w	r3, [r0], #4
   b60ea:	f7ff ffef 	bl	b60cc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b60ee:	4620      	mov	r0, r4
   b60f0:	bd10      	pop	{r4, pc}
   b60f2:	bf00      	nop
   b60f4:	000b8590 	.word	0x000b8590

000b60f8 <_ZN5spark16StreamLogHandlerD0Ev>:
   b60f8:	b510      	push	{r4, lr}
   b60fa:	4604      	mov	r4, r0
   b60fc:	f7ff fff0 	bl	b60e0 <_ZN5spark16StreamLogHandlerD1Ev>
   b6100:	4620      	mov	r0, r4
   b6102:	2124      	movs	r1, #36	; 0x24
   b6104:	f7fd ffcb 	bl	b409e <_ZdlPvj>
   b6108:	4620      	mov	r0, r4
   b610a:	bd10      	pop	{r4, pc}

000b610c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b610c:	b510      	push	{r4, lr}
   b610e:	4b03      	ldr	r3, [pc, #12]	; (b611c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6110:	6003      	str	r3, [r0, #0]
   b6112:	4604      	mov	r4, r0
   b6114:	f7ff ffe4 	bl	b60e0 <_ZN5spark16StreamLogHandlerD1Ev>
   b6118:	4620      	mov	r0, r4
   b611a:	bd10      	pop	{r4, pc}
   b611c:	000b8748 	.word	0x000b8748

000b6120 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6120:	b510      	push	{r4, lr}
   b6122:	4604      	mov	r4, r0
   b6124:	f7ff fff2 	bl	b610c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b6128:	4620      	mov	r0, r4
   b612a:	2124      	movs	r1, #36	; 0x24
   b612c:	f7fd ffb7 	bl	b409e <_ZdlPvj>
   b6130:	4620      	mov	r0, r4
   b6132:	bd10      	pop	{r4, pc}

000b6134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6134:	2200      	movs	r2, #0
   b6136:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b613a:	b510      	push	{r4, lr}
        capacity_(0) {
   b613c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b613e:	680c      	ldr	r4, [r1, #0]
   b6140:	6004      	str	r4, [r0, #0]
   b6142:	684c      	ldr	r4, [r1, #4]
   b6144:	6044      	str	r4, [r0, #4]
   b6146:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6148:	600a      	str	r2, [r1, #0]
   b614a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b614c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b614e:	608a      	str	r2, [r1, #8]
}
   b6150:	bd10      	pop	{r4, pc}

000b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6152:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6154:	6803      	ldr	r3, [r0, #0]
   b6156:	4604      	mov	r4, r0
   b6158:	6818      	ldr	r0, [r3, #0]
   b615a:	f7fe fce9 	bl	b4b30 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b615e:	4620      	mov	r0, r4
   b6160:	bd10      	pop	{r4, pc}
	...

000b6164 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6168:	b087      	sub	sp, #28
   b616a:	4680      	mov	r8, r0
   b616c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b616e:	4b1c      	ldr	r3, [pc, #112]	; (b61e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6170:	685b      	ldr	r3, [r3, #4]
   b6172:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6176:	4689      	mov	r9, r1
   b6178:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b617a:	b96b      	cbnz	r3, b6198 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b617c:	f7ff fed0 	bl	b5f20 <_ZN5spark10LogManager8instanceEv>
   b6180:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6182:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b6186:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6188:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b618a:	f7ff fda3 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b618e:	7b23      	ldrb	r3, [r4, #12]
   b6190:	b12b      	cbz	r3, b619e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6192:	a805      	add	r0, sp, #20
   b6194:	f7ff ffdd 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b6198:	b007      	add	sp, #28
   b619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b619e:	2301      	movs	r3, #1
   b61a0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b61a2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b61a6:	fa5f f989 	uxtb.w	r9, r9
   b61aa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b61ae:	45aa      	cmp	sl, r5
   b61b0:	d012      	beq.n	b61d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b61b2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b61b6:	4631      	mov	r1, r6
   b61b8:	1d38      	adds	r0, r7, #4
   b61ba:	f7ff fe3d 	bl	b5e38 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b61be:	4581      	cmp	r9, r0
   b61c0:	d3f5      	bcc.n	b61ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b61c2:	683b      	ldr	r3, [r7, #0]
   b61c4:	9a03      	ldr	r2, [sp, #12]
   b61c6:	9200      	str	r2, [sp, #0]
   b61c8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b61cc:	464a      	mov	r2, r9
   b61ce:	4633      	mov	r3, r6
   b61d0:	4641      	mov	r1, r8
   b61d2:	4638      	mov	r0, r7
   b61d4:	47d8      	blx	fp
   b61d6:	e7ea      	b.n	b61ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b61d8:	2300      	movs	r3, #0
   b61da:	7323      	strb	r3, [r4, #12]
   b61dc:	e7d9      	b.n	b6192 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b61de:	bf00      	nop
   b61e0:	e000ed00 	.word	0xe000ed00

000b61e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b61e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61e8:	469b      	mov	fp, r3
   b61ea:	4b1a      	ldr	r3, [pc, #104]	; (b6254 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b61ec:	685b      	ldr	r3, [r3, #4]
   b61ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b61f2:	4680      	mov	r8, r0
   b61f4:	4689      	mov	r9, r1
   b61f6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b61f8:	b96b      	cbnz	r3, b6216 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b61fa:	f7ff fe91 	bl	b5f20 <_ZN5spark10LogManager8instanceEv>
   b61fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6200:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6204:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6206:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6208:	f7ff fd64 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b620c:	7b23      	ldrb	r3, [r4, #12]
   b620e:	b12b      	cbz	r3, b621c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6210:	a801      	add	r0, sp, #4
   b6212:	f7ff ff9e 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6216:	b003      	add	sp, #12
   b6218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b621c:	2301      	movs	r3, #1
   b621e:	7323      	strb	r3, [r4, #12]
   b6220:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6224:	b2f6      	uxtb	r6, r6
   b6226:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b622a:	4555      	cmp	r5, sl
   b622c:	d00e      	beq.n	b624c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b622e:	f855 7b04 	ldr.w	r7, [r5], #4
   b6232:	4659      	mov	r1, fp
   b6234:	1d38      	adds	r0, r7, #4
   b6236:	f7ff fdff 	bl	b5e38 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b623a:	4286      	cmp	r6, r0
   b623c:	d3f5      	bcc.n	b622a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b623e:	683b      	ldr	r3, [r7, #0]
   b6240:	464a      	mov	r2, r9
   b6242:	68db      	ldr	r3, [r3, #12]
   b6244:	4641      	mov	r1, r8
   b6246:	4638      	mov	r0, r7
   b6248:	4798      	blx	r3
   b624a:	e7ee      	b.n	b622a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b624c:	2300      	movs	r3, #0
   b624e:	7323      	strb	r3, [r4, #12]
   b6250:	e7de      	b.n	b6210 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6252:	bf00      	nop
   b6254:	e000ed00 	.word	0xe000ed00

000b6258 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b625c:	4b16      	ldr	r3, [pc, #88]	; (b62b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b625e:	685b      	ldr	r3, [r3, #4]
   b6260:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6264:	4605      	mov	r5, r0
   b6266:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b6268:	bb1b      	cbnz	r3, b62b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b626a:	f7ff fe59 	bl	b5f20 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b626e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6272:	4604      	mov	r4, r0
   b6274:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6276:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6278:	f7ff fd2c 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b627c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6280:	2446      	movs	r4, #70	; 0x46
   b6282:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6286:	45b0      	cmp	r8, r6
   b6288:	d109      	bne.n	b629e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b628a:	a801      	add	r0, sp, #4
   b628c:	f7ff ff61 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6290:	42a5      	cmp	r5, r4
   b6292:	bfb4      	ite	lt
   b6294:	2000      	movlt	r0, #0
   b6296:	2001      	movge	r0, #1
}
   b6298:	b002      	add	sp, #8
   b629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b629e:	f856 0b04 	ldr.w	r0, [r6], #4
   b62a2:	4639      	mov	r1, r7
   b62a4:	3004      	adds	r0, #4
   b62a6:	f7ff fdc7 	bl	b5e38 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b62aa:	4284      	cmp	r4, r0
   b62ac:	bfa8      	it	ge
   b62ae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b62b0:	e7e9      	b.n	b6286 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b62b2:	2000      	movs	r0, #0
   b62b4:	e7f0      	b.n	b6298 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b62b6:	bf00      	nop
   b62b8:	e000ed00 	.word	0xe000ed00

000b62bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b62bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b62be:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b62c2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b62c4:	4604      	mov	r4, r0
   b62c6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b62c8:	db0d      	blt.n	b62e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b62ca:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b62cc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b62ce:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b62d0:	dd04      	ble.n	b62dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b62d2:	00b9      	lsls	r1, r7, #2
   b62d4:	f7fe fe50 	bl	b4f78 <realloc>
            if (!d) {
   b62d8:	b918      	cbnz	r0, b62e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b62da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b62dc:	f7fe fe44 	bl	b4f68 <free>
        T* d = nullptr;
   b62e0:	2000      	movs	r0, #0
        data_ = d;
   b62e2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b62e4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b62e6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b62e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b62ea:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b62ee:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b62f0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b62f4:	1d08      	adds	r0, r1, #4
   b62f6:	f001 feab 	bl	b8050 <memmove>
    new(p) T(std::move(value));
   b62fa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b62fe:	6863      	ldr	r3, [r4, #4]
   b6300:	3301      	adds	r3, #1
   b6302:	6063      	str	r3, [r4, #4]
    return true;
   b6304:	2001      	movs	r0, #1
   b6306:	e7e8      	b.n	b62da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6308 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6308:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b630a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b630e:	4604      	mov	r4, r0
   b6310:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6312:	9301      	str	r3, [sp, #4]
   b6314:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6316:	f7ff fcdd 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b631a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b631e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6322:	4293      	cmp	r3, r2
   b6324:	4619      	mov	r1, r3
   b6326:	d00b      	beq.n	b6340 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6328:	6809      	ldr	r1, [r1, #0]
   b632a:	42a9      	cmp	r1, r5
   b632c:	f103 0304 	add.w	r3, r3, #4
   b6330:	d1f7      	bne.n	b6322 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6332:	a801      	add	r0, sp, #4
   b6334:	f7ff ff0d 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6338:	2500      	movs	r5, #0
}
   b633a:	4628      	mov	r0, r5
   b633c:	b003      	add	sp, #12
   b633e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6340:	4629      	mov	r1, r5
   b6342:	4620      	mov	r0, r4
   b6344:	f7ff ffba 	bl	b62bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6348:	4605      	mov	r5, r0
   b634a:	2800      	cmp	r0, #0
   b634c:	d0f1      	beq.n	b6332 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b634e:	6863      	ldr	r3, [r4, #4]
   b6350:	2b01      	cmp	r3, #1
   b6352:	d101      	bne.n	b6358 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6354:	f7ff fe00 	bl	b5f58 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6358:	a801      	add	r0, sp, #4
   b635a:	f7ff fefa 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b635e:	e7ec      	b.n	b633a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6360 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6360:	b570      	push	{r4, r5, r6, lr}
   b6362:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6364:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6368:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b636a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b636e:	4282      	cmp	r2, r0
   b6370:	d00f      	beq.n	b6392 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6372:	4601      	mov	r1, r0
            if (*p == value) {
   b6374:	681d      	ldr	r5, [r3, #0]
   b6376:	f851 6b04 	ldr.w	r6, [r1], #4
   b637a:	42ae      	cmp	r6, r5
   b637c:	d107      	bne.n	b638e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b637e:	1a52      	subs	r2, r2, r1
   b6380:	f001 fe66 	bl	b8050 <memmove>
    --size_;
   b6384:	6863      	ldr	r3, [r4, #4]
   b6386:	3b01      	subs	r3, #1
   b6388:	6063      	str	r3, [r4, #4]
    return true;
   b638a:	2001      	movs	r0, #1
}
   b638c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b638e:	4608      	mov	r0, r1
   b6390:	e7ed      	b.n	b636e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6392:	2000      	movs	r0, #0
   b6394:	e7fa      	b.n	b638c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b6396 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6398:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b639c:	4604      	mov	r4, r0
   b639e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b63a0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b63a2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b63a4:	f7ff fc96 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b63a8:	a901      	add	r1, sp, #4
   b63aa:	4620      	mov	r0, r4
   b63ac:	f7ff ffd8 	bl	b6360 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b63b0:	b118      	cbz	r0, b63ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b63b2:	6863      	ldr	r3, [r4, #4]
   b63b4:	b90b      	cbnz	r3, b63ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b63b6:	f7ff fddb 	bl	b5f70 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b63ba:	a803      	add	r0, sp, #12
   b63bc:	f7ff fec9 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b63c0:	b004      	add	sp, #16
   b63c2:	bd10      	pop	{r4, pc}

000b63c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b63c4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b63c6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b63ca:	2318      	movs	r3, #24
   b63cc:	4604      	mov	r4, r0
   b63ce:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b63d2:	42ae      	cmp	r6, r5
   b63d4:	d015      	beq.n	b6402 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b63d6:	f105 0110 	add.w	r1, r5, #16
   b63da:	4620      	mov	r0, r4
   b63dc:	f7ff ffc0 	bl	b6360 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b63e0:	6863      	ldr	r3, [r4, #4]
   b63e2:	b90b      	cbnz	r3, b63e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b63e4:	f7ff fdc4 	bl	b5f70 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b63e8:	69e0      	ldr	r0, [r4, #28]
   b63ea:	6929      	ldr	r1, [r5, #16]
   b63ec:	6803      	ldr	r3, [r0, #0]
   b63ee:	68db      	ldr	r3, [r3, #12]
   b63f0:	4798      	blx	r3
        if (h.stream) {
   b63f2:	6969      	ldr	r1, [r5, #20]
   b63f4:	b119      	cbz	r1, b63fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b63f6:	6a20      	ldr	r0, [r4, #32]
   b63f8:	6803      	ldr	r3, [r0, #0]
   b63fa:	68db      	ldr	r3, [r3, #12]
   b63fc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b63fe:	3518      	adds	r5, #24
   b6400:	e7e7      	b.n	b63d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b6402:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6406:	2618      	movs	r6, #24
   b6408:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b640c:	42ae      	cmp	r6, r5
   b640e:	d004      	beq.n	b641a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6410:	4628      	mov	r0, r5
   b6412:	f000 fdd7 	bl	b6fc4 <_ZN6StringD1Ev>
   b6416:	3518      	adds	r5, #24
   b6418:	e7f8      	b.n	b640c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b641a:	2300      	movs	r3, #0
   b641c:	6163      	str	r3, [r4, #20]
}
   b641e:	bd70      	pop	{r4, r5, r6, pc}

000b6420 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6420:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6422:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6424:	f7ff fda4 	bl	b5f70 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6428:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b642c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b642e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6430:	f7ff fc50 	bl	b5cd4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6434:	4620      	mov	r0, r4
   b6436:	f7ff ffc5 	bl	b63c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b643a:	a801      	add	r0, sp, #4
   b643c:	f7ff fe89 	bl	b6152 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6440:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6442:	b108      	cbz	r0, b6448 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6444:	f7fe fb64 	bl	b4b10 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6448:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b644c:	2618      	movs	r6, #24
   b644e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6452:	42ae      	cmp	r6, r5
   b6454:	d004      	beq.n	b6460 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6456:	4628      	mov	r0, r5
   b6458:	f000 fdb4 	bl	b6fc4 <_ZN6StringD1Ev>
   b645c:	3518      	adds	r5, #24
   b645e:	e7f8      	b.n	b6452 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6460:	6920      	ldr	r0, [r4, #16]
   b6462:	f7fe fd81 	bl	b4f68 <free>
   b6466:	6820      	ldr	r0, [r4, #0]
   b6468:	f7fe fd7e 	bl	b4f68 <free>
}
   b646c:	4620      	mov	r0, r4
   b646e:	b002      	add	sp, #8
   b6470:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6474 <__tcf_2>:
    static LogManager mgr;
   b6474:	4801      	ldr	r0, [pc, #4]	; (b647c <__tcf_2+0x8>)
   b6476:	f7ff bfd3 	b.w	b6420 <_ZN5spark10LogManagerD1Ev>
   b647a:	bf00      	nop
   b647c:	2003e6a8 	.word	0x2003e6a8

000b6480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6480:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6484:	4604      	mov	r4, r0
   b6486:	460d      	mov	r5, r1
   b6488:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b648a:	d915      	bls.n	b64b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b648c:	4290      	cmp	r0, r2
   b648e:	d214      	bcs.n	b64ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6490:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6494:	1a75      	subs	r5, r6, r1
   b6496:	f1a1 0714 	sub.w	r7, r1, #20
   b649a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b649c:	42b7      	cmp	r7, r6
   b649e:	d01a      	beq.n	b64d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b64a0:	b11c      	cbz	r4, b64aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b64a2:	4631      	mov	r1, r6
   b64a4:	4620      	mov	r0, r4
   b64a6:	f7ff fc78 	bl	b5d9a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b64aa:	f106 0008 	add.w	r0, r6, #8
   b64ae:	f7ff fdf9 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b64b2:	3e14      	subs	r6, #20
   b64b4:	3c14      	subs	r4, #20
   b64b6:	e7f1      	b.n	b649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b64b8:	d00d      	beq.n	b64d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b64ba:	42b5      	cmp	r5, r6
   b64bc:	d00b      	beq.n	b64d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b64be:	b11c      	cbz	r4, b64c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b64c0:	4629      	mov	r1, r5
   b64c2:	4620      	mov	r0, r4
   b64c4:	f7ff fc69 	bl	b5d9a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b64c8:	f105 0008 	add.w	r0, r5, #8
   b64cc:	f7ff fdea 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b64d0:	3514      	adds	r5, #20
   b64d2:	3414      	adds	r4, #20
   b64d4:	e7f1      	b.n	b64ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b64d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b64d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b64da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64dc:	4604      	mov	r4, r0
   b64de:	460d      	mov	r5, r1
   b64e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b64e2:	d914      	bls.n	b650e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b64e4:	4290      	cmp	r0, r2
   b64e6:	d213      	bcs.n	b6510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b64e8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b64ec:	1a75      	subs	r5, r6, r1
   b64ee:	f1a1 0710 	sub.w	r7, r1, #16
   b64f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b64f4:	42b7      	cmp	r7, r6
   b64f6:	d018      	beq.n	b652a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b64f8:	b11c      	cbz	r4, b6502 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b64fa:	4631      	mov	r1, r6
   b64fc:	4620      	mov	r0, r4
   b64fe:	f000 fddd 	bl	b70bc <_ZN6StringC1EOS_>
                end->~T();
   b6502:	4630      	mov	r0, r6
   b6504:	f000 fd5e 	bl	b6fc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6508:	3e10      	subs	r6, #16
   b650a:	3c10      	subs	r4, #16
   b650c:	e7f2      	b.n	b64f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b650e:	d00c      	beq.n	b652a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6510:	42b5      	cmp	r5, r6
   b6512:	d00a      	beq.n	b652a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6514:	b11c      	cbz	r4, b651e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6516:	4629      	mov	r1, r5
   b6518:	4620      	mov	r0, r4
   b651a:	f000 fdcf 	bl	b70bc <_ZN6StringC1EOS_>
                p->~T();
   b651e:	4628      	mov	r0, r5
   b6520:	f000 fd50 	bl	b6fc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6524:	3510      	adds	r5, #16
   b6526:	3410      	adds	r4, #16
   b6528:	e7f2      	b.n	b6510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b652c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b652c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b652e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6530:	4605      	mov	r5, r0
        if (n > 0) {
   b6532:	dd11      	ble.n	b6558 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6534:	0130      	lsls	r0, r6, #4
   b6536:	f7fe fd0f 	bl	b4f58 <malloc>
            if (!d) {
   b653a:	4604      	mov	r4, r0
   b653c:	b158      	cbz	r0, b6556 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b653e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6542:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6546:	f7ff ffc7 	bl	b64d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b654a:	6828      	ldr	r0, [r5, #0]
   b654c:	f7fe fd0c 	bl	b4f68 <free>
        data_ = d;
   b6550:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6552:	60ae      	str	r6, [r5, #8]
        return true;
   b6554:	2001      	movs	r0, #1
    }
   b6556:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6558:	2400      	movs	r4, #0
   b655a:	e7f6      	b.n	b654a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b655c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6560:	4690      	mov	r8, r2
   b6562:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6564:	2300      	movs	r3, #0
   b6566:	9103      	str	r1, [sp, #12]
    return size_;
   b6568:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b656c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b656e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6570:	4299      	cmp	r1, r3
        capacity_(0) {
   b6572:	e9c0 3300 	strd	r3, r3, [r0]
   b6576:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b657a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b657e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6582:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6584:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6586:	dc23      	bgt.n	b65d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6588:	e9d8 5700 	ldrd	r5, r7, [r8]
   b658c:	2314      	movs	r3, #20
   b658e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6592:	42af      	cmp	r7, r5
   b6594:	d03b      	beq.n	b660e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6596:	4629      	mov	r1, r5
   b6598:	a80b      	add	r0, sp, #44	; 0x2c
   b659a:	f000 fd8f 	bl	b70bc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b659e:	a90b      	add	r1, sp, #44	; 0x2c
   b65a0:	a80f      	add	r0, sp, #60	; 0x3c
   b65a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b65a4:	f000 fd8a 	bl	b70bc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65a8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b65ac:	4299      	cmp	r1, r3
   b65ae:	da1b      	bge.n	b65e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b65b0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b65b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b65b4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b65b8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b65bc:	4631      	mov	r1, r6
   b65be:	f106 0010 	add.w	r0, r6, #16
   b65c2:	f7ff ff89 	bl	b64d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b65c6:	b9ee      	cbnz	r6, b6604 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b65c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b65ca:	3301      	adds	r3, #1
   b65cc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b65ce:	e011      	b.n	b65f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b65d0:	a808      	add	r0, sp, #32
   b65d2:	f7ff ffab 	bl	b652c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b65d6:	2800      	cmp	r0, #0
   b65d8:	d1d6      	bne.n	b6588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b65da:	a808      	add	r0, sp, #32
   b65dc:	f7fe fd38 	bl	b5050 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b65e0:	4620      	mov	r0, r4
   b65e2:	b015      	add	sp, #84	; 0x54
   b65e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65e8:	3101      	adds	r1, #1
   b65ea:	a808      	add	r0, sp, #32
   b65ec:	f7ff ff9e 	bl	b652c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b65f0:	2800      	cmp	r0, #0
   b65f2:	d1dd      	bne.n	b65b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b65f4:	a80f      	add	r0, sp, #60	; 0x3c
   b65f6:	f000 fce5 	bl	b6fc4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b65fa:	a80b      	add	r0, sp, #44	; 0x2c
   b65fc:	f000 fce2 	bl	b6fc4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6600:	3514      	adds	r5, #20
   b6602:	e7c6      	b.n	b6592 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6604:	a90f      	add	r1, sp, #60	; 0x3c
   b6606:	4630      	mov	r0, r6
   b6608:	f000 fd58 	bl	b70bc <_ZN6StringC1EOS_>
   b660c:	e7dc      	b.n	b65c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b660e:	2600      	movs	r6, #0
   b6610:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6614:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6616:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b661a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b661e:	429e      	cmp	r6, r3
   b6620:	da7c      	bge.n	b671c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6622:	0133      	lsls	r3, r6, #4
   b6624:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6626:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6628:	b90b      	cbnz	r3, b662e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b662a:	3601      	adds	r6, #1
   b662c:	e7f5      	b.n	b661a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b662e:	2300      	movs	r3, #0
   b6630:	9307      	str	r3, [sp, #28]
   b6632:	fb09 f306 	mul.w	r3, r9, r6
   b6636:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6638:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b663a:	a907      	add	r1, sp, #28
   b663c:	a806      	add	r0, sp, #24
   b663e:	f7ff fb22 	bl	b5c86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6642:	4682      	mov	sl, r0
   b6644:	2800      	cmp	r0, #0
   b6646:	d0f0      	beq.n	b662a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6648:	f04f 0300 	mov.w	r3, #0
   b664c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6650:	4601      	mov	r1, r0
   b6652:	9a07      	ldr	r2, [sp, #28]
   b6654:	f10d 0317 	add.w	r3, sp, #23
   b6658:	4628      	mov	r0, r5
   b665a:	f7ff fbb1 	bl	b5dc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b665e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6662:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6664:	2f00      	cmp	r7, #0
   b6666:	d14a      	bne.n	b66fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6668:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b666c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6670:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6674:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6678:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b667c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6680:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6682:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6686:	4293      	cmp	r3, r2
   b6688:	db17      	blt.n	b66ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b668a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b668e:	f1ba 0f00 	cmp.w	sl, #0
   b6692:	dd30      	ble.n	b66f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6694:	fb09 f00a 	mul.w	r0, r9, sl
   b6698:	f7fe fc5e 	bl	b4f58 <malloc>
            if (!d) {
   b669c:	4683      	mov	fp, r0
   b669e:	b360      	cbz	r0, b66fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b66a0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b66a4:	fb09 1202 	mla	r2, r9, r2, r1
   b66a8:	f7ff feea 	bl	b6480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b66ac:	6828      	ldr	r0, [r5, #0]
   b66ae:	f7fe fc5b 	bl	b4f68 <free>
        data_ = d;
   b66b2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b66b6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b66ba:	682b      	ldr	r3, [r5, #0]
   b66bc:	9a01      	ldr	r2, [sp, #4]
   b66be:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b66c2:	686a      	ldr	r2, [r5, #4]
   b66c4:	4651      	mov	r1, sl
   b66c6:	fb09 3202 	mla	r2, r9, r2, r3
   b66ca:	f10a 0014 	add.w	r0, sl, #20
   b66ce:	f7ff fed7 	bl	b6480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b66d2:	f1ba 0f00 	cmp.w	sl, #0
   b66d6:	d003      	beq.n	b66e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b66d8:	a90f      	add	r1, sp, #60	; 0x3c
   b66da:	4650      	mov	r0, sl
   b66dc:	f7ff fb5d 	bl	b5d9a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b66e0:	686b      	ldr	r3, [r5, #4]
   b66e2:	3301      	adds	r3, #1
   b66e4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b66e6:	a811      	add	r0, sp, #68	; 0x44
   b66e8:	f7ff fcdc 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b66ec:	b13f      	cbz	r7, b66fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b66ee:	a80b      	add	r0, sp, #44	; 0x2c
   b66f0:	f7ff fcd8 	bl	b60a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b66f4:	e771      	b.n	b65da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b66f6:	46bb      	mov	fp, r7
   b66f8:	e7d8      	b.n	b66ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b66fa:	2701      	movs	r7, #1
   b66fc:	e7f3      	b.n	b66e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b66fe:	9b01      	ldr	r3, [sp, #4]
   b6700:	682d      	ldr	r5, [r5, #0]
   b6702:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6706:	9b06      	ldr	r3, [sp, #24]
   b6708:	781b      	ldrb	r3, [r3, #0]
   b670a:	b92b      	cbnz	r3, b6718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b670c:	f8d8 3000 	ldr.w	r3, [r8]
   b6710:	9a02      	ldr	r2, [sp, #8]
   b6712:	4413      	add	r3, r2
   b6714:	7c1b      	ldrb	r3, [r3, #16]
   b6716:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6718:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b671a:	e78e      	b.n	b663a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b671c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b671e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6720:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6722:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6724:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6726:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b672a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b672c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b672e:	60a2      	str	r2, [r4, #8]
   b6730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6732:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6734:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6736:	60e2      	str	r2, [r4, #12]
   b6738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b673a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b673c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b673e:	6122      	str	r2, [r4, #16]
   b6740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6742:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6744:	9b03      	ldr	r3, [sp, #12]
   b6746:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6748:	6162      	str	r2, [r4, #20]
   b674a:	7623      	strb	r3, [r4, #24]
   b674c:	e7cf      	b.n	b66ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6750 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6750:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6752:	4604      	mov	r4, r0
   b6754:	b087      	sub	sp, #28
   b6756:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6758:	4626      	mov	r6, r4
        stream_(&stream) {
   b675a:	4619      	mov	r1, r3
   b675c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b675e:	4617      	mov	r7, r2
        stream_(&stream) {
   b6760:	f7fe f941 	bl	b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6764:	4b0b      	ldr	r3, [pc, #44]	; (b6794 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6766:	f846 3b04 	str.w	r3, [r6], #4
   b676a:	4669      	mov	r1, sp
   b676c:	a803      	add	r0, sp, #12
   b676e:	f7fe f93a 	bl	b49e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6772:	aa03      	add	r2, sp, #12
   b6774:	4639      	mov	r1, r7
   b6776:	4630      	mov	r0, r6
   b6778:	f7ff fef0 	bl	b655c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b677c:	a803      	add	r0, sp, #12
   b677e:	f7fe f8f1 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6782:	4668      	mov	r0, sp
   b6784:	f7fe f8ee 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6788:	4b03      	ldr	r3, [pc, #12]	; (b6798 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b678a:	6023      	str	r3, [r4, #0]
}
   b678c:	4620      	mov	r0, r4
        stream_(&stream) {
   b678e:	6225      	str	r5, [r4, #32]
}
   b6790:	b007      	add	sp, #28
   b6792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6794:	000b8590 	.word	0x000b8590
   b6798:	000b8730 	.word	0x000b8730

000b679c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b679c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b679e:	460f      	mov	r7, r1
   b67a0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b67a2:	491d      	ldr	r1, [pc, #116]	; (b6818 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b67a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b67a6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b67a8:	4616      	mov	r6, r2
   b67aa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b67ac:	f001 fcb7 	bl	b811e <strcmp>
   b67b0:	b9c0      	cbnz	r0, b67e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b67b2:	b1a4      	cbz	r4, b67de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b67b4:	4629      	mov	r1, r5
   b67b6:	a801      	add	r0, sp, #4
   b67b8:	f7ff fcbc 	bl	b6134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b67bc:	4917      	ldr	r1, [pc, #92]	; (b681c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b67be:	2024      	movs	r0, #36	; 0x24
   b67c0:	f001 f800 	bl	b77c4 <_ZnwjRKSt9nothrow_t>
   b67c4:	4605      	mov	r5, r0
   b67c6:	b130      	cbz	r0, b67d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b67c8:	ab01      	add	r3, sp, #4
   b67ca:	4632      	mov	r2, r6
   b67cc:	4621      	mov	r1, r4
   b67ce:	f7ff ffbf 	bl	b6750 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b67d2:	4b13      	ldr	r3, [pc, #76]	; (b6820 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b67d4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b67d6:	a801      	add	r0, sp, #4
   b67d8:	f7fe f8c4 	bl	b4964 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b67dc:	462c      	mov	r4, r5
}
   b67de:	4620      	mov	r0, r4
   b67e0:	b005      	add	sp, #20
   b67e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b67e4:	490f      	ldr	r1, [pc, #60]	; (b6824 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b67e6:	4638      	mov	r0, r7
   b67e8:	f001 fc99 	bl	b811e <strcmp>
   b67ec:	b990      	cbnz	r0, b6814 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b67ee:	2c00      	cmp	r4, #0
   b67f0:	d0f5      	beq.n	b67de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b67f2:	4629      	mov	r1, r5
   b67f4:	a801      	add	r0, sp, #4
   b67f6:	f7ff fc9d 	bl	b6134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b67fa:	4908      	ldr	r1, [pc, #32]	; (b681c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b67fc:	2024      	movs	r0, #36	; 0x24
   b67fe:	f000 ffe1 	bl	b77c4 <_ZnwjRKSt9nothrow_t>
   b6802:	4605      	mov	r5, r0
   b6804:	2800      	cmp	r0, #0
   b6806:	d0e6      	beq.n	b67d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6808:	ab01      	add	r3, sp, #4
   b680a:	4632      	mov	r2, r6
   b680c:	4621      	mov	r1, r4
   b680e:	f7ff ff9f 	bl	b6750 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6812:	e7e0      	b.n	b67d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6814:	2400      	movs	r4, #0
   b6816:	e7e2      	b.n	b67de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6818:	000b86b5 	.word	0x000b86b5
   b681c:	000b8840 	.word	0x000b8840
   b6820:	000b8748 	.word	0x000b8748
   b6824:	000b86b9 	.word	0x000b86b9

000b6828 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6828:	4b01      	ldr	r3, [pc, #4]	; (b6830 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b682a:	4a02      	ldr	r2, [pc, #8]	; (b6834 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b682c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b682e:	4770      	bx	lr
   b6830:	2003e6a4 	.word	0x2003e6a4
   b6834:	000b86ca 	.word	0x000b86ca

000b6838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b683c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b683e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6842:	4604      	mov	r4, r0
   b6844:	460e      	mov	r6, r1
   b6846:	4617      	mov	r7, r2
   b6848:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b684a:	f000 fdad 	bl	b73a8 <_Z16_fetch_usbserialv>
   b684e:	4581      	cmp	r9, r0
   b6850:	d04c      	beq.n	b68ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6852:	792b      	ldrb	r3, [r5, #4]
   b6854:	0719      	lsls	r1, r3, #28
   b6856:	d504      	bpl.n	b6862 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6858:	696a      	ldr	r2, [r5, #20]
   b685a:	4954      	ldr	r1, [pc, #336]	; (b69ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b685c:	4620      	mov	r0, r4
   b685e:	f7ff fa8d 	bl	b5d7c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6862:	f1b8 0f00 	cmp.w	r8, #0
   b6866:	d00d      	beq.n	b6884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6868:	215b      	movs	r1, #91	; 0x5b
   b686a:	4620      	mov	r0, r4
   b686c:	f7ff fa7a 	bl	b5d64 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6870:	4641      	mov	r1, r8
   b6872:	4620      	mov	r0, r4
   b6874:	f7ff fa67 	bl	b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6878:	6823      	ldr	r3, [r4, #0]
   b687a:	494d      	ldr	r1, [pc, #308]	; (b69b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b687c:	68db      	ldr	r3, [r3, #12]
   b687e:	2202      	movs	r2, #2
   b6880:	4620      	mov	r0, r4
   b6882:	4798      	blx	r3
    if (attr.has_file) {
   b6884:	792b      	ldrb	r3, [r5, #4]
   b6886:	07da      	lsls	r2, r3, #31
   b6888:	d523      	bpl.n	b68d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b688a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b688e:	212f      	movs	r1, #47	; 0x2f
   b6890:	4640      	mov	r0, r8
   b6892:	f001 fc90 	bl	b81b6 <strrchr>
    if (s1) {
   b6896:	b108      	cbz	r0, b689c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6898:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b689c:	4641      	mov	r1, r8
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff fa51 	bl	b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b68a4:	792b      	ldrb	r3, [r5, #4]
   b68a6:	079b      	lsls	r3, r3, #30
   b68a8:	d508      	bpl.n	b68bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b68aa:	213a      	movs	r1, #58	; 0x3a
   b68ac:	4620      	mov	r0, r4
   b68ae:	f7ff fa59 	bl	b5d64 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b68b2:	68ea      	ldr	r2, [r5, #12]
   b68b4:	493f      	ldr	r1, [pc, #252]	; (b69b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b68b6:	4620      	mov	r0, r4
   b68b8:	f7ff fa60 	bl	b5d7c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b68bc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b68be:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b68c0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b68c4:	68db      	ldr	r3, [r3, #12]
   b68c6:	bf14      	ite	ne
   b68c8:	493b      	ldrne	r1, [pc, #236]	; (b69b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b68ca:	493c      	ldreq	r1, [pc, #240]	; (b69bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b68cc:	2202      	movs	r2, #2
            write(": ", 2);
   b68ce:	4620      	mov	r0, r4
   b68d0:	4798      	blx	r3
    if (attr.has_function) {
   b68d2:	792b      	ldrb	r3, [r5, #4]
   b68d4:	0758      	lsls	r0, r3, #29
   b68d6:	d51d      	bpl.n	b6914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b68d8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b68da:	460b      	mov	r3, r1
   b68dc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b68de:	f813 0b01 	ldrb.w	r0, [r3], #1
   b68e2:	b160      	cbz	r0, b68fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b68e4:	2820      	cmp	r0, #32
   b68e6:	d108      	bne.n	b68fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b68e8:	4619      	mov	r1, r3
   b68ea:	e7f7      	b.n	b68dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b68ec:	4834      	ldr	r0, [pc, #208]	; (b69c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b68ee:	f000 f966 	bl	b6bbe <_ZN5spark12NetworkClass9listeningEv>
   b68f2:	2800      	cmp	r0, #0
   b68f4:	d0ad      	beq.n	b6852 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b68f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b68fa:	2828      	cmp	r0, #40	; 0x28
   b68fc:	d1ee      	bne.n	b68dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b68fe:	6823      	ldr	r3, [r4, #0]
   b6900:	1a52      	subs	r2, r2, r1
   b6902:	68db      	ldr	r3, [r3, #12]
   b6904:	4620      	mov	r0, r4
   b6906:	4798      	blx	r3
        write("(): ", 4);
   b6908:	6823      	ldr	r3, [r4, #0]
   b690a:	492e      	ldr	r1, [pc, #184]	; (b69c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b690c:	68db      	ldr	r3, [r3, #12]
   b690e:	2204      	movs	r2, #4
   b6910:	4620      	mov	r0, r4
   b6912:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6914:	2100      	movs	r1, #0
   b6916:	4638      	mov	r0, r7
   b6918:	f7fe fa4a 	bl	b4db0 <log_level_name>
   b691c:	4601      	mov	r1, r0
    write(s);
   b691e:	4620      	mov	r0, r4
   b6920:	f7ff fa11 	bl	b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6924:	6823      	ldr	r3, [r4, #0]
   b6926:	4925      	ldr	r1, [pc, #148]	; (b69bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6928:	68db      	ldr	r3, [r3, #12]
   b692a:	2202      	movs	r2, #2
   b692c:	4620      	mov	r0, r4
   b692e:	4798      	blx	r3
    if (msg) {
   b6930:	b11e      	cbz	r6, b693a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6932:	4631      	mov	r1, r6
   b6934:	4620      	mov	r0, r4
   b6936:	f7ff fa06 	bl	b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b693a:	792b      	ldrb	r3, [r5, #4]
   b693c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6940:	d02c      	beq.n	b699c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6942:	6823      	ldr	r3, [r4, #0]
   b6944:	4920      	ldr	r1, [pc, #128]	; (b69c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6946:	68db      	ldr	r3, [r3, #12]
   b6948:	2202      	movs	r2, #2
   b694a:	4620      	mov	r0, r4
   b694c:	4798      	blx	r3
        if (attr.has_code) {
   b694e:	792b      	ldrb	r3, [r5, #4]
   b6950:	06d9      	lsls	r1, r3, #27
   b6952:	d50a      	bpl.n	b696a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6954:	6823      	ldr	r3, [r4, #0]
   b6956:	491d      	ldr	r1, [pc, #116]	; (b69cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6958:	68db      	ldr	r3, [r3, #12]
   b695a:	2207      	movs	r2, #7
   b695c:	4620      	mov	r0, r4
   b695e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6960:	69aa      	ldr	r2, [r5, #24]
   b6962:	491b      	ldr	r1, [pc, #108]	; (b69d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6964:	4620      	mov	r0, r4
   b6966:	f7ff fa09 	bl	b5d7c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b696a:	792b      	ldrb	r3, [r5, #4]
   b696c:	069a      	lsls	r2, r3, #26
   b696e:	d511      	bpl.n	b6994 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6970:	06db      	lsls	r3, r3, #27
   b6972:	d505      	bpl.n	b6980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6974:	6823      	ldr	r3, [r4, #0]
   b6976:	4910      	ldr	r1, [pc, #64]	; (b69b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6978:	68db      	ldr	r3, [r3, #12]
   b697a:	2202      	movs	r2, #2
   b697c:	4620      	mov	r0, r4
   b697e:	4798      	blx	r3
            write("details = ", 10);
   b6980:	6823      	ldr	r3, [r4, #0]
   b6982:	4914      	ldr	r1, [pc, #80]	; (b69d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6984:	68db      	ldr	r3, [r3, #12]
   b6986:	4620      	mov	r0, r4
   b6988:	220a      	movs	r2, #10
   b698a:	4798      	blx	r3
            write(attr.details);
   b698c:	69e9      	ldr	r1, [r5, #28]
   b698e:	4620      	mov	r0, r4
   b6990:	f7ff f9d9 	bl	b5d46 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6994:	215d      	movs	r1, #93	; 0x5d
   b6996:	4620      	mov	r0, r4
   b6998:	f7ff f9e4 	bl	b5d64 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b699c:	6823      	ldr	r3, [r4, #0]
   b699e:	490e      	ldr	r1, [pc, #56]	; (b69d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b69a0:	68db      	ldr	r3, [r3, #12]
   b69a2:	4620      	mov	r0, r4
   b69a4:	2202      	movs	r2, #2
}
   b69a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b69aa:	4718      	bx	r3
   b69ac:	000b86ce 	.word	0x000b86ce
   b69b0:	000b86d5 	.word	0x000b86d5
   b69b4:	000b8487 	.word	0x000b8487
   b69b8:	000b86d8 	.word	0x000b86d8
   b69bc:	000b86dd 	.word	0x000b86dd
   b69c0:	2003e6d0 	.word	0x2003e6d0
   b69c4:	000b86db 	.word	0x000b86db
   b69c8:	000b86e0 	.word	0x000b86e0
   b69cc:	000b86e3 	.word	0x000b86e3
   b69d0:	000b86eb 	.word	0x000b86eb
   b69d4:	000b86ee 	.word	0x000b86ee
   b69d8:	000b86f9 	.word	0x000b86f9

000b69dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b69dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b69e0:	b085      	sub	sp, #20
    return stream_;
   b69e2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b69e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b69e8:	4605      	mov	r5, r0
   b69ea:	460f      	mov	r7, r1
   b69ec:	4690      	mov	r8, r2
   b69ee:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b69f0:	f000 fcda 	bl	b73a8 <_Z16_fetch_usbserialv>
   b69f4:	4581      	cmp	r9, r0
   b69f6:	d105      	bne.n	b6a04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b69f8:	4849      	ldr	r0, [pc, #292]	; (b6b20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b69fa:	f000 f8e0 	bl	b6bbe <_ZN5spark12NetworkClass9listeningEv>
   b69fe:	2800      	cmp	r0, #0
   b6a00:	f040 808a 	bne.w	b6b18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6a04:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6a06:	4a47      	ldr	r2, [pc, #284]	; (b6b24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6a08:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6a0a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6a0e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6a10:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6a12:	f88d 9008 	strb.w	r9, [sp, #8]
   b6a16:	f7ff f878 	bl	b5b0a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6a1a:	4649      	mov	r1, r9
   b6a1c:	4640      	mov	r0, r8
   b6a1e:	f7fe f9c7 	bl	b4db0 <log_level_name>
    json.name("l", 1).value(s);
   b6a22:	4941      	ldr	r1, [pc, #260]	; (b6b28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6a24:	4680      	mov	r8, r0
   b6a26:	2201      	movs	r2, #1
   b6a28:	a801      	add	r0, sp, #4
   b6a2a:	f7ff f8fd 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6a2e:	4641      	mov	r1, r8
   b6a30:	f7ff f97b 	bl	b5d2a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6a34:	b13f      	cbz	r7, b6a46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6a36:	493d      	ldr	r1, [pc, #244]	; (b6b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6a38:	2201      	movs	r2, #1
   b6a3a:	a801      	add	r0, sp, #4
   b6a3c:	f7ff f8f4 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6a40:	4639      	mov	r1, r7
   b6a42:	f7ff f972 	bl	b5d2a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6a46:	b13e      	cbz	r6, b6a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6a48:	4939      	ldr	r1, [pc, #228]	; (b6b30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6a4a:	2201      	movs	r2, #1
   b6a4c:	a801      	add	r0, sp, #4
   b6a4e:	f7ff f8eb 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6a52:	4631      	mov	r1, r6
   b6a54:	f7ff f969 	bl	b5d2a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6a58:	7923      	ldrb	r3, [r4, #4]
   b6a5a:	07df      	lsls	r7, r3, #31
   b6a5c:	d50e      	bpl.n	b6a7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6a5e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6a60:	212f      	movs	r1, #47	; 0x2f
   b6a62:	4630      	mov	r0, r6
   b6a64:	f001 fba7 	bl	b81b6 <strrchr>
    if (s1) {
   b6a68:	b100      	cbz	r0, b6a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6a6a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6a6c:	4931      	ldr	r1, [pc, #196]	; (b6b34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6a6e:	2201      	movs	r2, #1
   b6a70:	a801      	add	r0, sp, #4
   b6a72:	f7ff f8d9 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6a76:	4631      	mov	r1, r6
   b6a78:	f7ff f957 	bl	b5d2a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6a7c:	7923      	ldrb	r3, [r4, #4]
   b6a7e:	079e      	lsls	r6, r3, #30
   b6a80:	d507      	bpl.n	b6a92 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6a82:	492d      	ldr	r1, [pc, #180]	; (b6b38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6a84:	2202      	movs	r2, #2
   b6a86:	a801      	add	r0, sp, #4
   b6a88:	f7ff f8ce 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6a8c:	68e1      	ldr	r1, [r4, #12]
   b6a8e:	f7ff f849 	bl	b5b24 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6a92:	7923      	ldrb	r3, [r4, #4]
   b6a94:	0758      	lsls	r0, r3, #29
   b6a96:	d514      	bpl.n	b6ac2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6a98:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6a9a:	4633      	mov	r3, r6
   b6a9c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6aa2:	b12a      	cbz	r2, b6ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6aa4:	2a20      	cmp	r2, #32
   b6aa6:	d101      	bne.n	b6aac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6aa8:	461e      	mov	r6, r3
   b6aaa:	e7f7      	b.n	b6a9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6aac:	2a28      	cmp	r2, #40	; 0x28
   b6aae:	d1f5      	bne.n	b6a9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6ab0:	4922      	ldr	r1, [pc, #136]	; (b6b3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6ab2:	2202      	movs	r2, #2
   b6ab4:	a801      	add	r0, sp, #4
   b6ab6:	f7ff f8b7 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6aba:	1bba      	subs	r2, r7, r6
   b6abc:	4631      	mov	r1, r6
   b6abe:	f7ff f8c3 	bl	b5c48 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6ac2:	7923      	ldrb	r3, [r4, #4]
   b6ac4:	0719      	lsls	r1, r3, #28
   b6ac6:	d507      	bpl.n	b6ad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6ac8:	491d      	ldr	r1, [pc, #116]	; (b6b40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6aca:	2201      	movs	r2, #1
   b6acc:	a801      	add	r0, sp, #4
   b6ace:	f7ff f8ab 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6ad2:	6961      	ldr	r1, [r4, #20]
   b6ad4:	f7ff f838 	bl	b5b48 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6ad8:	7923      	ldrb	r3, [r4, #4]
   b6ada:	06da      	lsls	r2, r3, #27
   b6adc:	d508      	bpl.n	b6af0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6ade:	2204      	movs	r2, #4
   b6ae0:	4918      	ldr	r1, [pc, #96]	; (b6b44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6ae2:	eb0d 0002 	add.w	r0, sp, r2
   b6ae6:	f7ff f89f 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6aea:	69a1      	ldr	r1, [r4, #24]
   b6aec:	f7ff f81a 	bl	b5b24 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6af0:	7923      	ldrb	r3, [r4, #4]
   b6af2:	069b      	lsls	r3, r3, #26
   b6af4:	d507      	bpl.n	b6b06 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6af6:	4914      	ldr	r1, [pc, #80]	; (b6b48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6af8:	2206      	movs	r2, #6
   b6afa:	a801      	add	r0, sp, #4
   b6afc:	f7ff f894 	bl	b5c28 <_ZN5spark10JSONWriter4nameEPKcj>
   b6b00:	69e1      	ldr	r1, [r4, #28]
   b6b02:	f7ff f912 	bl	b5d2a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6b06:	a801      	add	r0, sp, #4
   b6b08:	f7fe ffe9 	bl	b5ade <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6b0c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6b0e:	490f      	ldr	r1, [pc, #60]	; (b6b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6b10:	6803      	ldr	r3, [r0, #0]
   b6b12:	2202      	movs	r2, #2
   b6b14:	68db      	ldr	r3, [r3, #12]
   b6b16:	4798      	blx	r3
}
   b6b18:	b005      	add	sp, #20
   b6b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6b1e:	bf00      	nop
   b6b20:	2003e6d0 	.word	0x2003e6d0
   b6b24:	000b8718 	.word	0x000b8718
   b6b28:	000b86ab 	.word	0x000b86ab
   b6b2c:	000b86fc 	.word	0x000b86fc
   b6b30:	000b88af 	.word	0x000b88af
   b6b34:	000b8470 	.word	0x000b8470
   b6b38:	000b86fe 	.word	0x000b86fe
   b6b3c:	000b8701 	.word	0x000b8701
   b6b40:	000b84be 	.word	0x000b84be
   b6b44:	000b8704 	.word	0x000b8704
   b6b48:	000b8709 	.word	0x000b8709
   b6b4c:	000b86f9 	.word	0x000b86f9

000b6b50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6b50:	2300      	movs	r3, #0
   b6b52:	6840      	ldr	r0, [r0, #4]
   b6b54:	461a      	mov	r2, r3
   b6b56:	f7fe b99f 	b.w	b4e98 <network_connect>

000b6b5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6b5a:	6840      	ldr	r0, [r0, #4]
   b6b5c:	2200      	movs	r2, #0
   b6b5e:	2102      	movs	r1, #2
   b6b60:	f7fe b9aa 	b.w	b4eb8 <network_disconnect>

000b6b64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6b64:	2200      	movs	r2, #0
   b6b66:	6840      	ldr	r0, [r0, #4]
   b6b68:	4611      	mov	r1, r2
   b6b6a:	f7fe b99d 	b.w	b4ea8 <network_connecting>

000b6b6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6b6e:	2200      	movs	r2, #0
   b6b70:	6840      	ldr	r0, [r0, #4]
   b6b72:	4611      	mov	r1, r2
   b6b74:	f7fe b9a8 	b.w	b4ec8 <network_ready>

000b6b78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6b78:	2300      	movs	r3, #0
   b6b7a:	6840      	ldr	r0, [r0, #4]
   b6b7c:	461a      	mov	r2, r3
   b6b7e:	4619      	mov	r1, r3
   b6b80:	f7fe b9aa 	b.w	b4ed8 <network_on>

000b6b84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6b84:	2300      	movs	r3, #0
   b6b86:	6840      	ldr	r0, [r0, #4]
   b6b88:	461a      	mov	r2, r3
   b6b8a:	4619      	mov	r1, r3
   b6b8c:	f7fe b9ac 	b.w	b4ee8 <network_off>

000b6b90 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6b90:	6840      	ldr	r0, [r0, #4]
   b6b92:	2100      	movs	r1, #0
   b6b94:	f7fe b9d0 	b.w	b4f38 <network_is_on>

000b6b98 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6b98:	6840      	ldr	r0, [r0, #4]
   b6b9a:	2100      	movs	r1, #0
   b6b9c:	f7fe b9d4 	b.w	b4f48 <network_is_off>

000b6ba0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6ba0:	6840      	ldr	r0, [r0, #4]
   b6ba2:	2200      	movs	r2, #0
   b6ba4:	f081 0101 	eor.w	r1, r1, #1
   b6ba8:	f7fe b9a6 	b.w	b4ef8 <network_listen>

000b6bac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6bac:	6840      	ldr	r0, [r0, #4]
   b6bae:	2200      	movs	r2, #0
   b6bb0:	f7fe b9b2 	b.w	b4f18 <network_set_listen_timeout>

000b6bb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6bb4:	2200      	movs	r2, #0
   b6bb6:	6840      	ldr	r0, [r0, #4]
   b6bb8:	4611      	mov	r1, r2
   b6bba:	f7fe b9b5 	b.w	b4f28 <network_get_listen_timeout>

000b6bbe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6bbe:	2200      	movs	r2, #0
   b6bc0:	6840      	ldr	r0, [r0, #4]
   b6bc2:	4611      	mov	r1, r2
   b6bc4:	f7fe b9a0 	b.w	b4f08 <network_listening>

000b6bc8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bcc:	b095      	sub	sp, #84	; 0x54
   b6bce:	4614      	mov	r4, r2
   b6bd0:	460d      	mov	r5, r1
   b6bd2:	4607      	mov	r7, r0
    IPAddress addr;
   b6bd4:	f7fe fe32 	bl	b583c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6bd8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6bda:	221c      	movs	r2, #28
   b6bdc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6bde:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6be0:	f001 fa50 	bl	b8084 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6be4:	2340      	movs	r3, #64	; 0x40
   b6be6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6be8:	4620      	mov	r0, r4
   b6bea:	466b      	mov	r3, sp
   b6bec:	aa0c      	add	r2, sp, #48	; 0x30
   b6bee:	2100      	movs	r1, #0
   b6bf0:	f7fe f826 	bl	b4c40 <netdb_getaddrinfo>
    if (!r) {
   b6bf4:	4604      	mov	r4, r0
   b6bf6:	2800      	cmp	r0, #0
   b6bf8:	d14b      	bne.n	b6c92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6bfa:	4602      	mov	r2, r0
   b6bfc:	2101      	movs	r1, #1
   b6bfe:	6868      	ldr	r0, [r5, #4]
   b6c00:	f7fe f962 	bl	b4ec8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c04:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c06:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c08:	4622      	mov	r2, r4
   b6c0a:	6868      	ldr	r0, [r5, #4]
   b6c0c:	f7fe f95c 	bl	b4ec8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c10:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c12:	4681      	mov	r9, r0
        bool ok = false;
   b6c14:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c16:	2e00      	cmp	r6, #0
   b6c18:	d03b      	beq.n	b6c92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6c1a:	2900      	cmp	r1, #0
   b6c1c:	d139      	bne.n	b6c92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6c1e:	6873      	ldr	r3, [r6, #4]
   b6c20:	2b02      	cmp	r3, #2
   b6c22:	d003      	beq.n	b6c2c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6c24:	2b0a      	cmp	r3, #10
   b6c26:	d011      	beq.n	b6c4c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c28:	69f6      	ldr	r6, [r6, #28]
   b6c2a:	e7f4      	b.n	b6c16 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6c2c:	f1b8 0f00 	cmp.w	r8, #0
   b6c30:	d0fa      	beq.n	b6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6c32:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6c34:	a806      	add	r0, sp, #24
   b6c36:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6c38:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6c3a:	f7fe fe2d 	bl	b5898 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c40:	1d3c      	adds	r4, r7, #4
   b6c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c44:	682b      	ldr	r3, [r5, #0]
   b6c46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c48:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6c4a:	e7ed      	b.n	b6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6c4c:	f1b9 0f00 	cmp.w	r9, #0
   b6c50:	d0ea      	beq.n	b6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6c52:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6c54:	2210      	movs	r2, #16
   b6c56:	a801      	add	r0, sp, #4
   b6c58:	f001 fa14 	bl	b8084 <memset>
                    a.v = 6;
   b6c5c:	2306      	movs	r3, #6
   b6c5e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c62:	ad01      	add	r5, sp, #4
   b6c64:	f104 0308 	add.w	r3, r4, #8
   b6c68:	3418      	adds	r4, #24
   b6c6a:	6818      	ldr	r0, [r3, #0]
   b6c6c:	6859      	ldr	r1, [r3, #4]
   b6c6e:	462a      	mov	r2, r5
   b6c70:	c203      	stmia	r2!, {r0, r1}
   b6c72:	3308      	adds	r3, #8
   b6c74:	42a3      	cmp	r3, r4
   b6c76:	4615      	mov	r5, r2
   b6c78:	d1f7      	bne.n	b6c6a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6c7a:	a901      	add	r1, sp, #4
   b6c7c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6c7e:	ad07      	add	r5, sp, #28
   b6c80:	f7fe fdea 	bl	b5858 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c86:	1d3c      	adds	r4, r7, #4
   b6c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c8a:	682b      	ldr	r3, [r5, #0]
   b6c8c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c8e:	4649      	mov	r1, r9
   b6c90:	e7ca      	b.n	b6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6c92:	9800      	ldr	r0, [sp, #0]
   b6c94:	f7fd ffcc 	bl	b4c30 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6c98:	4638      	mov	r0, r7
   b6c9a:	b015      	add	sp, #84	; 0x54
   b6c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ca0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ca0:	4b02      	ldr	r3, [pc, #8]	; (b6cac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6ca2:	4a03      	ldr	r2, [pc, #12]	; (b6cb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6ca4:	601a      	str	r2, [r3, #0]
   b6ca6:	2200      	movs	r2, #0
   b6ca8:	605a      	str	r2, [r3, #4]

} // spark
   b6caa:	4770      	bx	lr
   b6cac:	2003e6d0 	.word	0x2003e6d0
   b6cb0:	000b8790 	.word	0x000b8790

000b6cb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cb6:	4606      	mov	r6, r0
   b6cb8:	460d      	mov	r5, r1
  size_t n = 0;
   b6cba:	188f      	adds	r7, r1, r2
   b6cbc:	2400      	movs	r4, #0
  while (size--) {
   b6cbe:	42bd      	cmp	r5, r7
   b6cc0:	d00c      	beq.n	b6cdc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6cc2:	6833      	ldr	r3, [r6, #0]
   b6cc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6cc8:	689b      	ldr	r3, [r3, #8]
   b6cca:	4630      	mov	r0, r6
   b6ccc:	4798      	blx	r3
     if (chunk>=0)
   b6cce:	1e03      	subs	r3, r0, #0
   b6cd0:	db01      	blt.n	b6cd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6cd2:	441c      	add	r4, r3
  while (size--) {
   b6cd4:	e7f3      	b.n	b6cbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6cd6:	2c00      	cmp	r4, #0
   b6cd8:	bf08      	it	eq
   b6cda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6cdc:	4620      	mov	r0, r4
   b6cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ce0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6ce0:	b513      	push	{r0, r1, r4, lr}
   b6ce2:	4604      	mov	r4, r0
    }
   b6ce4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6ce6:	b159      	cbz	r1, b6d00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ce8:	9101      	str	r1, [sp, #4]
   b6cea:	f001 fa48 	bl	b817e <strlen>
   b6cee:	6823      	ldr	r3, [r4, #0]
   b6cf0:	9901      	ldr	r1, [sp, #4]
   b6cf2:	68db      	ldr	r3, [r3, #12]
   b6cf4:	4602      	mov	r2, r0
   b6cf6:	4620      	mov	r0, r4
    }
   b6cf8:	b002      	add	sp, #8
   b6cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6cfe:	4718      	bx	r3
    }
   b6d00:	b002      	add	sp, #8
   b6d02:	bd10      	pop	{r4, pc}

000b6d04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6d04:	6803      	ldr	r3, [r0, #0]
   b6d06:	689b      	ldr	r3, [r3, #8]
   b6d08:	4718      	bx	r3

000b6d0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6d0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6d0c:	210d      	movs	r1, #13
{
   b6d0e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6d10:	f7ff fff8 	bl	b6d04 <_ZN5Print5printEc>
  n += print('\n');
   b6d14:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6d16:	4604      	mov	r4, r0
  n += print('\n');
   b6d18:	4628      	mov	r0, r5
   b6d1a:	f7ff fff3 	bl	b6d04 <_ZN5Print5printEc>
  return n;
}
   b6d1e:	4420      	add	r0, r4
   b6d20:	bd38      	pop	{r3, r4, r5, pc}

000b6d22 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6d22:	b538      	push	{r3, r4, r5, lr}
   b6d24:	4605      	mov	r5, r0
  return write(str);
   b6d26:	f7ff ffdb 	bl	b6ce0 <_ZN5Print5writeEPKc>
   b6d2a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6d2c:	4628      	mov	r0, r5
   b6d2e:	f7ff ffec 	bl	b6d0a <_ZN5Print7printlnEv>
  return n;
}
   b6d32:	4420      	add	r0, r4
   b6d34:	bd38      	pop	{r3, r4, r5, pc}

000b6d36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6d36:	b530      	push	{r4, r5, lr}
   b6d38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6d3a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6d3c:	2a01      	cmp	r2, #1
  *str = '\0';
   b6d3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6d42:	bf98      	it	ls
   b6d44:	220a      	movls	r2, #10
   b6d46:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6d48:	460d      	mov	r5, r1
   b6d4a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6d4e:	fb01 5312 	mls	r3, r1, r2, r5
   b6d52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6d56:	2b09      	cmp	r3, #9
   b6d58:	bf94      	ite	ls
   b6d5a:	3330      	addls	r3, #48	; 0x30
   b6d5c:	3337      	addhi	r3, #55	; 0x37
   b6d5e:	b2db      	uxtb	r3, r3
  } while(n);
   b6d60:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6d62:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6d66:	d9ef      	bls.n	b6d48 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6d68:	4621      	mov	r1, r4
   b6d6a:	f7ff ffb9 	bl	b6ce0 <_ZN5Print5writeEPKc>
}
   b6d6e:	b00b      	add	sp, #44	; 0x2c
   b6d70:	bd30      	pop	{r4, r5, pc}

000b6d72 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d76:	b086      	sub	sp, #24
   b6d78:	af00      	add	r7, sp, #0
   b6d7a:	4605      	mov	r5, r0
   b6d7c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6d7e:	1d38      	adds	r0, r7, #4
   b6d80:	2114      	movs	r1, #20
{
   b6d82:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6d84:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6d86:	f7fe f8ff 	bl	b4f88 <vsnprintf>

    if (n<bufsize)
   b6d8a:	2813      	cmp	r0, #19
   b6d8c:	d80e      	bhi.n	b6dac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6d8e:	1d39      	adds	r1, r7, #4
   b6d90:	4628      	mov	r0, r5
   b6d92:	f7ff ffa5 	bl	b6ce0 <_ZN5Print5writeEPKc>
   b6d96:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6d98:	b11e      	cbz	r6, b6da2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6d9a:	4628      	mov	r0, r5
   b6d9c:	f7ff ffb5 	bl	b6d0a <_ZN5Print7printlnEv>
   b6da0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6da2:	4620      	mov	r0, r4
   b6da4:	3718      	adds	r7, #24
   b6da6:	46bd      	mov	sp, r7
   b6da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6dac:	f100 0308 	add.w	r3, r0, #8
   b6db0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6db4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6db6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6dba:	4622      	mov	r2, r4
   b6dbc:	1c41      	adds	r1, r0, #1
   b6dbe:	683b      	ldr	r3, [r7, #0]
   b6dc0:	4668      	mov	r0, sp
   b6dc2:	f7fe f8e1 	bl	b4f88 <vsnprintf>
  return write(str);
   b6dc6:	4669      	mov	r1, sp
   b6dc8:	4628      	mov	r0, r5
   b6dca:	f7ff ff89 	bl	b6ce0 <_ZN5Print5writeEPKc>
   b6dce:	4604      	mov	r4, r0
   b6dd0:	46c5      	mov	sp, r8
   b6dd2:	e7e1      	b.n	b6d98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6dd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6dd4:	4b01      	ldr	r3, [pc, #4]	; (b6ddc <_GLOBAL__sub_I_RGB+0x8>)
   b6dd6:	2200      	movs	r2, #0
   b6dd8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6dda:	4770      	bx	lr
   b6ddc:	2003e6d8 	.word	0x2003e6d8

000b6de0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6de0:	b510      	push	{r4, lr}
   b6de2:	4604      	mov	r4, r0
   b6de4:	4608      	mov	r0, r1
{
    _spi = spi;
   b6de6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6de8:	f7fd ff32 	bl	b4c50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6dec:	2300      	movs	r3, #0
   b6dee:	6063      	str	r3, [r4, #4]
}
   b6df0:	4620      	mov	r0, r4
   b6df2:	bd10      	pop	{r4, pc}

000b6df4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6df4:	b510      	push	{r4, lr}
   b6df6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6df8:	f7fd feba 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6dfc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6dfe:	6823      	ldr	r3, [r4, #0]
   b6e00:	4620      	mov	r0, r4
   b6e02:	695b      	ldr	r3, [r3, #20]
   b6e04:	4798      	blx	r3
    if (c >= 0) return c;
   b6e06:	2800      	cmp	r0, #0
   b6e08:	da08      	bge.n	b6e1c <_ZN6Stream9timedReadEv+0x28>
   b6e0a:	f7fd feb1 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6e0e:	68e3      	ldr	r3, [r4, #12]
   b6e10:	1ac0      	subs	r0, r0, r3
   b6e12:	68a3      	ldr	r3, [r4, #8]
   b6e14:	4298      	cmp	r0, r3
   b6e16:	d3f2      	bcc.n	b6dfe <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6e1c:	bd10      	pop	{r4, pc}

000b6e1e <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   b6e1e:	b510      	push	{r4, lr}
   b6e20:	4604      	mov	r4, r0
   b6e22:	f7fd fea5 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6e26:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   b6e28:	6823      	ldr	r3, [r4, #0]
   b6e2a:	4620      	mov	r0, r4
   b6e2c:	699b      	ldr	r3, [r3, #24]
   b6e2e:	4798      	blx	r3
    if (c >= 0) return c;
   b6e30:	2800      	cmp	r0, #0
   b6e32:	da08      	bge.n	b6e46 <_ZN6Stream9timedPeekEv+0x28>
   b6e34:	f7fd fe9c 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6e38:	68e3      	ldr	r3, [r4, #12]
   b6e3a:	1ac0      	subs	r0, r0, r3
   b6e3c:	68a3      	ldr	r3, [r4, #8]
   b6e3e:	4298      	cmp	r0, r3
   b6e40:	d3f2      	bcc.n	b6e28 <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   b6e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6e46:	bd10      	pop	{r4, pc}

000b6e48 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   b6e48:	b510      	push	{r4, lr}
   b6e4a:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	f7ff ffe6 	bl	b6e1e <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   b6e52:	2800      	cmp	r0, #0
   b6e54:	db0a      	blt.n	b6e6c <_ZN6Stream13peekNextDigitEv+0x24>
   b6e56:	282d      	cmp	r0, #45	; 0x2d
   b6e58:	d008      	beq.n	b6e6c <_ZN6Stream13peekNextDigitEv+0x24>
   b6e5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6e5e:	2b09      	cmp	r3, #9
   b6e60:	d904      	bls.n	b6e6c <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   b6e62:	6823      	ldr	r3, [r4, #0]
   b6e64:	4620      	mov	r0, r4
   b6e66:	695b      	ldr	r3, [r3, #20]
   b6e68:	4798      	blx	r3
    c = timedPeek();
   b6e6a:	e7ef      	b.n	b6e4c <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   b6e6c:	bd10      	pop	{r4, pc}

000b6e6e <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   b6e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e72:	4605      	mov	r5, r0
   b6e74:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   b6e76:	f7ff ffe7 	bl	b6e48 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b6e7a:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   b6e7c:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   b6e80:	db1c      	blt.n	b6ebc <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   b6e82:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   b6e84:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   b6e88:	4286      	cmp	r6, r0
   b6e8a:	d008      	beq.n	b6e9e <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   b6e8c:	282d      	cmp	r0, #45	; 0x2d
   b6e8e:	d018      	beq.n	b6ec2 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   b6e90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6e94:	2b09      	cmp	r3, #9
   b6e96:	d802      	bhi.n	b6e9e <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   b6e98:	fb08 0404 	mla	r4, r8, r4, r0
   b6e9c:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   b6e9e:	682b      	ldr	r3, [r5, #0]
   b6ea0:	4628      	mov	r0, r5
   b6ea2:	695b      	ldr	r3, [r3, #20]
   b6ea4:	4798      	blx	r3
    c = timedPeek();
   b6ea6:	4628      	mov	r0, r5
   b6ea8:	f7ff ffb9 	bl	b6e1e <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   b6eac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6eb0:	2b09      	cmp	r3, #9
   b6eb2:	d9e9      	bls.n	b6e88 <_ZN6Stream8parseIntEc+0x1a>
   b6eb4:	4286      	cmp	r6, r0
   b6eb6:	d0f2      	beq.n	b6e9e <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   b6eb8:	b107      	cbz	r7, b6ebc <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   b6eba:	4264      	negs	r4, r4
  return value;
}
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   b6ec2:	2701      	movs	r7, #1
   b6ec4:	e7eb      	b.n	b6e9e <_ZN6Stream8parseIntEc+0x30>

000b6ec6 <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   b6ec6:	2101      	movs	r1, #1
   b6ec8:	f7ff bfd1 	b.w	b6e6e <_ZN6Stream8parseIntEc>
   b6ecc:	0000      	movs	r0, r0
	...

000b6ed0 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   b6ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ed4:	ed2d 8b02 	vpush	{d8}
   b6ed8:	4605      	mov	r5, r0
   b6eda:	460e      	mov	r6, r1
  bool isNegative = false;
  bool isFraction = false;
  long value = 0;
  float fraction = 1.0;

  int c = peekNextDigit();
   b6edc:	f7ff ffb4 	bl	b6e48 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b6ee0:	2800      	cmp	r0, #0
   b6ee2:	db47      	blt.n	b6f74 <_ZN6Stream10parseFloatEc+0xa4>
    } else if (c == '.') {
      isFraction = true;
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
   b6ee4:	f20f 099c 	addw	r9, pc, #156	; 0x9c
   b6ee8:	e9d9 8900 	ldrd	r8, r9, [r9]
  long value = 0;
   b6eec:	2400      	movs	r4, #0
  float fraction = 1.0;
   b6eee:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  bool isFraction = false;
   b6ef2:	4627      	mov	r7, r4
  bool isNegative = false;
   b6ef4:	46a2      	mov	sl, r4
      value = value * 10 + c - '0';
   b6ef6:	f04f 0b0a 	mov.w	fp, #10
    if(c == skipChar) {
   b6efa:	4286      	cmp	r6, r0
   b6efc:	d017      	beq.n	b6f2e <_ZN6Stream10parseFloatEc+0x5e>
    } else if(c == '-') {
   b6efe:	282d      	cmp	r0, #45	; 0x2d
   b6f00:	d033      	beq.n	b6f6a <_ZN6Stream10parseFloatEc+0x9a>
    } else if (c == '.') {
   b6f02:	282e      	cmp	r0, #46	; 0x2e
   b6f04:	d034      	beq.n	b6f70 <_ZN6Stream10parseFloatEc+0xa0>
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
   b6f06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f0a:	2b09      	cmp	r3, #9
   b6f0c:	d80f      	bhi.n	b6f2e <_ZN6Stream10parseFloatEc+0x5e>
      value = value * 10 + c - '0';
   b6f0e:	fb0b 0404 	mla	r4, fp, r4, r0
   b6f12:	3c30      	subs	r4, #48	; 0x30
      if(isFraction)
   b6f14:	b15f      	cbz	r7, b6f2e <_ZN6Stream10parseFloatEc+0x5e>
         fraction *= 0.1;
   b6f16:	ee18 0a10 	vmov	r0, s16
   b6f1a:	f000 fdbf 	bl	b7a9c <__aeabi_f2d>
   b6f1e:	4642      	mov	r2, r8
   b6f20:	464b      	mov	r3, r9
   b6f22:	f000 fe13 	bl	b7b4c <__aeabi_dmul>
   b6f26:	f001 f823 	bl	b7f70 <__aeabi_d2f>
   b6f2a:	ee08 0a10 	vmov	s16, r0
    }
    read();  // consume the character we got with peek
   b6f2e:	682b      	ldr	r3, [r5, #0]
   b6f30:	4628      	mov	r0, r5
   b6f32:	695b      	ldr	r3, [r3, #20]
   b6f34:	4798      	blx	r3
    c = timedPeek();
   b6f36:	4628      	mov	r0, r5
   b6f38:	f7ff ff71 	bl	b6e1e <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
   b6f3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f40:	2b09      	cmp	r3, #9
   b6f42:	d9da      	bls.n	b6efa <_ZN6Stream10parseFloatEc+0x2a>
   b6f44:	282e      	cmp	r0, #46	; 0x2e
   b6f46:	d0d8      	beq.n	b6efa <_ZN6Stream10parseFloatEc+0x2a>
   b6f48:	4286      	cmp	r6, r0
   b6f4a:	d0f0      	beq.n	b6f2e <_ZN6Stream10parseFloatEc+0x5e>

  if(isNegative)
   b6f4c:	f1ba 0f00 	cmp.w	sl, #0
   b6f50:	d000      	beq.n	b6f54 <_ZN6Stream10parseFloatEc+0x84>
    value = -value;
   b6f52:	4264      	negs	r4, r4
  if(isFraction)
    return value * fraction;
   b6f54:	ee07 4a90 	vmov	s15, r4
   b6f58:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  if(isFraction)
   b6f5c:	b10f      	cbz	r7, b6f62 <_ZN6Stream10parseFloatEc+0x92>
    return value * fraction;
   b6f5e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
   b6f62:	ecbd 8b02 	vpop	{d8}
   b6f66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      isNegative = true;
   b6f6a:	f04f 0a01 	mov.w	sl, #1
   b6f6e:	e7de      	b.n	b6f2e <_ZN6Stream10parseFloatEc+0x5e>
      isFraction = true;
   b6f70:	2701      	movs	r7, #1
   b6f72:	e7dc      	b.n	b6f2e <_ZN6Stream10parseFloatEc+0x5e>
    return 0; // zero returned if timeout
   b6f74:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6f80 <_ZN6Stream10parseFloatEc+0xb0>
   b6f78:	e7f3      	b.n	b6f62 <_ZN6Stream10parseFloatEc+0x92>
   b6f7a:	bf00      	nop
   b6f7c:	f3af 8000 	nop.w
   b6f80:	00000000 	.word	0x00000000
   b6f84:	9999999a 	.word	0x9999999a
   b6f88:	3fb99999 	.word	0x3fb99999

000b6f8c <_ZN6Stream10parseFloatEv>:
  return parseFloat(NO_SKIP_CHAR);
   b6f8c:	2101      	movs	r1, #1
   b6f8e:	f7ff bf9f 	b.w	b6ed0 <_ZN6Stream10parseFloatEc>
	...

000b6f94 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b6f94:	b570      	push	{r4, r5, r6, lr}
   b6f96:	460d      	mov	r5, r1
  String ret;
   b6f98:	4909      	ldr	r1, [pc, #36]	; (b6fc0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b6f9a:	4604      	mov	r4, r0
   b6f9c:	4616      	mov	r6, r2
  String ret;
   b6f9e:	f000 f85c 	bl	b705a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6fa2:	4628      	mov	r0, r5
   b6fa4:	f7ff ff26 	bl	b6df4 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b6fa8:	2800      	cmp	r0, #0
   b6faa:	db06      	blt.n	b6fba <_ZN6Stream15readStringUntilEc+0x26>
   b6fac:	4286      	cmp	r6, r0
   b6fae:	d004      	beq.n	b6fba <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   b6fb0:	b2c1      	uxtb	r1, r0
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	f000 f8e3 	bl	b717e <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6fb8:	e7f3      	b.n	b6fa2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b6fba:	4620      	mov	r0, r4
   b6fbc:	bd70      	pop	{r4, r5, r6, pc}
   b6fbe:	bf00      	nop
   b6fc0:	000b86fb 	.word	0x000b86fb

000b6fc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6fc4:	b510      	push	{r4, lr}
   b6fc6:	4604      	mov	r4, r0
{
	free(buffer);
   b6fc8:	6800      	ldr	r0, [r0, #0]
   b6fca:	f7fd ffcd 	bl	b4f68 <free>
}
   b6fce:	4620      	mov	r0, r4
   b6fd0:	bd10      	pop	{r4, pc}

000b6fd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6fd2:	b510      	push	{r4, lr}
   b6fd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6fd6:	6800      	ldr	r0, [r0, #0]
   b6fd8:	b108      	cbz	r0, b6fde <_ZN6String10invalidateEv+0xc>
   b6fda:	f7fd ffc5 	bl	b4f68 <free>
	buffer = NULL;
   b6fde:	2300      	movs	r3, #0
	capacity = len = 0;
   b6fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6fe4:	6023      	str	r3, [r4, #0]
}
   b6fe6:	bd10      	pop	{r4, pc}

000b6fe8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6fe8:	b538      	push	{r3, r4, r5, lr}
   b6fea:	4604      	mov	r4, r0
   b6fec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6fee:	6800      	ldr	r0, [r0, #0]
   b6ff0:	3101      	adds	r1, #1
   b6ff2:	f7fd ffc1 	bl	b4f78 <realloc>
	if (newbuffer) {
   b6ff6:	b110      	cbz	r0, b6ffe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6ff8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6ffc:	2001      	movs	r0, #1
	}
	return 0;
}
   b6ffe:	bd38      	pop	{r3, r4, r5, pc}

000b7000 <_ZN6String7reserveEj>:
{
   b7000:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7002:	6803      	ldr	r3, [r0, #0]
{
   b7004:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7006:	b123      	cbz	r3, b7012 <_ZN6String7reserveEj+0x12>
   b7008:	6843      	ldr	r3, [r0, #4]
   b700a:	428b      	cmp	r3, r1
   b700c:	d301      	bcc.n	b7012 <_ZN6String7reserveEj+0x12>
   b700e:	2001      	movs	r0, #1
}
   b7010:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7012:	4620      	mov	r0, r4
   b7014:	f7ff ffe8 	bl	b6fe8 <_ZN6String12changeBufferEj>
   b7018:	2800      	cmp	r0, #0
   b701a:	d0f9      	beq.n	b7010 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b701c:	68a3      	ldr	r3, [r4, #8]
   b701e:	2b00      	cmp	r3, #0
   b7020:	d1f5      	bne.n	b700e <_ZN6String7reserveEj+0xe>
   b7022:	6822      	ldr	r2, [r4, #0]
   b7024:	7013      	strb	r3, [r2, #0]
   b7026:	e7f2      	b.n	b700e <_ZN6String7reserveEj+0xe>

000b7028 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b702a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b702c:	4611      	mov	r1, r2
   b702e:	9201      	str	r2, [sp, #4]
{
   b7030:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7032:	f7ff ffe5 	bl	b7000 <_ZN6String7reserveEj>
   b7036:	9a01      	ldr	r2, [sp, #4]
   b7038:	b928      	cbnz	r0, b7046 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b703a:	4620      	mov	r0, r4
   b703c:	f7ff ffc9 	bl	b6fd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7040:	4620      	mov	r0, r4
   b7042:	b003      	add	sp, #12
   b7044:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7046:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7048:	4629      	mov	r1, r5
   b704a:	6820      	ldr	r0, [r4, #0]
   b704c:	f000 fff2 	bl	b8034 <memcpy>
	buffer[len] = 0;
   b7050:	6822      	ldr	r2, [r4, #0]
   b7052:	68a3      	ldr	r3, [r4, #8]
   b7054:	2100      	movs	r1, #0
   b7056:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7058:	e7f2      	b.n	b7040 <_ZN6String4copyEPKcj+0x18>

000b705a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b705a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b705c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b705e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7062:	4604      	mov	r4, r0
	len = 0;
   b7064:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7066:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7068:	b141      	cbz	r1, b707c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b706a:	4608      	mov	r0, r1
   b706c:	9101      	str	r1, [sp, #4]
   b706e:	f001 f886 	bl	b817e <strlen>
   b7072:	9901      	ldr	r1, [sp, #4]
   b7074:	4602      	mov	r2, r0
   b7076:	4620      	mov	r0, r4
   b7078:	f7ff ffd6 	bl	b7028 <_ZN6String4copyEPKcj>
}
   b707c:	4620      	mov	r0, r4
   b707e:	b002      	add	sp, #8
   b7080:	bd10      	pop	{r4, pc}

000b7082 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7082:	b538      	push	{r3, r4, r5, lr}
   b7084:	4605      	mov	r5, r0
	if (buffer) {
   b7086:	6800      	ldr	r0, [r0, #0]
{
   b7088:	460c      	mov	r4, r1
	if (buffer) {
   b708a:	b168      	cbz	r0, b70a8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b708c:	686a      	ldr	r2, [r5, #4]
   b708e:	688b      	ldr	r3, [r1, #8]
   b7090:	429a      	cmp	r2, r3
   b7092:	d307      	bcc.n	b70a4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7094:	6809      	ldr	r1, [r1, #0]
   b7096:	f001 f84c 	bl	b8132 <strcpy>
			len = rhs.len;
   b709a:	68a3      	ldr	r3, [r4, #8]
   b709c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b709e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b70a0:	60a3      	str	r3, [r4, #8]
}
   b70a2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b70a4:	f7fd ff60 	bl	b4f68 <free>
	buffer = rhs.buffer;
   b70a8:	6823      	ldr	r3, [r4, #0]
   b70aa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b70ac:	6863      	ldr	r3, [r4, #4]
   b70ae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b70b0:	68a3      	ldr	r3, [r4, #8]
   b70b2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b70b4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b70b6:	e9c4 3300 	strd	r3, r3, [r4]
   b70ba:	e7f1      	b.n	b70a0 <_ZN6String4moveERS_+0x1e>

000b70bc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b70bc:	b510      	push	{r4, lr}
	buffer = NULL;
   b70be:	2300      	movs	r3, #0
	capacity = 0;
   b70c0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b70c4:	4604      	mov	r4, r0
	len = 0;
   b70c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b70c8:	7303      	strb	r3, [r0, #12]
	move(rval);
   b70ca:	f7ff ffda 	bl	b7082 <_ZN6String4moveERS_>
}
   b70ce:	4620      	mov	r0, r4
   b70d0:	bd10      	pop	{r4, pc}

000b70d2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b70d2:	4288      	cmp	r0, r1
{
   b70d4:	b510      	push	{r4, lr}
   b70d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b70d8:	d005      	beq.n	b70e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b70da:	680b      	ldr	r3, [r1, #0]
   b70dc:	b12b      	cbz	r3, b70ea <_ZN6StringaSERKS_+0x18>
   b70de:	688a      	ldr	r2, [r1, #8]
   b70e0:	4619      	mov	r1, r3
   b70e2:	f7ff ffa1 	bl	b7028 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b70e6:	4620      	mov	r0, r4
   b70e8:	bd10      	pop	{r4, pc}
	else invalidate();
   b70ea:	f7ff ff72 	bl	b6fd2 <_ZN6String10invalidateEv>
   b70ee:	e7fa      	b.n	b70e6 <_ZN6StringaSERKS_+0x14>

000b70f0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b70f0:	b510      	push	{r4, lr}
	buffer = NULL;
   b70f2:	2300      	movs	r3, #0
String::String(const String &value)
   b70f4:	4604      	mov	r4, r0
	capacity = 0;
   b70f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b70fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   b70fc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b70fe:	f7ff ffe8 	bl	b70d2 <_ZN6StringaSERKS_>
}
   b7102:	4620      	mov	r0, r4
   b7104:	bd10      	pop	{r4, pc}

000b7106 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7106:	b513      	push	{r0, r1, r4, lr}
   b7108:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b710a:	b159      	cbz	r1, b7124 <_ZN6StringaSEPKc+0x1e>
   b710c:	4608      	mov	r0, r1
   b710e:	9101      	str	r1, [sp, #4]
   b7110:	f001 f835 	bl	b817e <strlen>
   b7114:	9901      	ldr	r1, [sp, #4]
   b7116:	4602      	mov	r2, r0
   b7118:	4620      	mov	r0, r4
   b711a:	f7ff ff85 	bl	b7028 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b711e:	4620      	mov	r0, r4
   b7120:	b002      	add	sp, #8
   b7122:	bd10      	pop	{r4, pc}
	else invalidate();
   b7124:	f7ff ff55 	bl	b6fd2 <_ZN6String10invalidateEv>
   b7128:	e7f9      	b.n	b711e <_ZN6StringaSEPKc+0x18>

000b712a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b712a:	b510      	push	{r4, lr}
   b712c:	4604      	mov	r4, r0
   b712e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7130:	2300      	movs	r3, #0
	capacity = 0;
   b7132:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7136:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7138:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b713a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b713c:	a901      	add	r1, sp, #4
   b713e:	f000 f98f 	bl	b7460 <itoa>
	*this = buf;
   b7142:	a901      	add	r1, sp, #4
   b7144:	4620      	mov	r0, r4
   b7146:	f7ff ffde 	bl	b7106 <_ZN6StringaSEPKc>
}
   b714a:	4620      	mov	r0, r4
   b714c:	b00a      	add	sp, #40	; 0x28
   b714e:	bd10      	pop	{r4, pc}

000b7150 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7150:	b570      	push	{r4, r5, r6, lr}
   b7152:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7154:	460e      	mov	r6, r1
   b7156:	b909      	cbnz	r1, b715c <_ZN6String6concatEPKcj+0xc>
   b7158:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b715a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b715c:	b16a      	cbz	r2, b717a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b715e:	6884      	ldr	r4, [r0, #8]
   b7160:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7162:	4621      	mov	r1, r4
   b7164:	f7ff ff4c 	bl	b7000 <_ZN6String7reserveEj>
   b7168:	2800      	cmp	r0, #0
   b716a:	d0f5      	beq.n	b7158 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b716c:	6828      	ldr	r0, [r5, #0]
   b716e:	68ab      	ldr	r3, [r5, #8]
   b7170:	4631      	mov	r1, r6
   b7172:	4418      	add	r0, r3
   b7174:	f000 ffdd 	bl	b8132 <strcpy>
	len = newlen;
   b7178:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b717a:	2001      	movs	r0, #1
   b717c:	e7ed      	b.n	b715a <_ZN6String6concatEPKcj+0xa>

000b717e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b717e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7180:	2300      	movs	r3, #0
	buf[0] = c;
   b7182:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7186:	2201      	movs	r2, #1
   b7188:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b718a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b718e:	f7ff ffdf 	bl	b7150 <_ZN6String6concatEPKcj>
}
   b7192:	b003      	add	sp, #12
   b7194:	f85d fb04 	ldr.w	pc, [sp], #4

000b7198 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b7198:	6800      	ldr	r0, [r0, #0]
   b719a:	b108      	cbz	r0, b71a0 <_ZNK6String5toIntEv+0x8>
   b719c:	f000 bf3e 	b.w	b801c <atol>
	return 0;
}
   b71a0:	4770      	bx	lr
	...

000b71a4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b71a4:	b40e      	push	{r1, r2, r3}
   b71a6:	b570      	push	{r4, r5, r6, lr}
   b71a8:	b087      	sub	sp, #28
   b71aa:	ad0b      	add	r5, sp, #44	; 0x2c
   b71ac:	4604      	mov	r4, r0
   b71ae:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b71b2:	9201      	str	r2, [sp, #4]
   b71b4:	462b      	mov	r3, r5
   b71b6:	2105      	movs	r1, #5
   b71b8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b71ba:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b71bc:	f7fd fee4 	bl	b4f88 <vsnprintf>
    va_end(marker);

    String result;
   b71c0:	490b      	ldr	r1, [pc, #44]	; (b71f0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b71c2:	4606      	mov	r6, r0
    String result;
   b71c4:	4620      	mov	r0, r4
   b71c6:	f7ff ff48 	bl	b705a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b71ca:	4631      	mov	r1, r6
   b71cc:	4620      	mov	r0, r4
   b71ce:	f7ff ff17 	bl	b7000 <_ZN6String7reserveEj>
    if (result.buffer) {
   b71d2:	6820      	ldr	r0, [r4, #0]
   b71d4:	b130      	cbz	r0, b71e4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b71d6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b71d8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b71da:	462b      	mov	r3, r5
   b71dc:	1c71      	adds	r1, r6, #1
   b71de:	f7fd fed3 	bl	b4f88 <vsnprintf>
        va_end(marker);
        result.len = n;
   b71e2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b71e4:	4620      	mov	r0, r4
   b71e6:	b007      	add	sp, #28
   b71e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b71ec:	b003      	add	sp, #12
   b71ee:	4770      	bx	lr
   b71f0:	000b86fb 	.word	0x000b86fb

000b71f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b71f4:	4b05      	ldr	r3, [pc, #20]	; (b720c <_GLOBAL__sub_I_System+0x18>)
   b71f6:	2202      	movs	r2, #2
   b71f8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b71fa:	4b05      	ldr	r3, [pc, #20]	; (b7210 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b71fc:	4a05      	ldr	r2, [pc, #20]	; (b7214 <_GLOBAL__sub_I_System+0x20>)
   b71fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7200:	2000      	movs	r0, #0
   b7202:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7206:	f7fd bde3 	b.w	b4dd0 <set_system_mode>
   b720a:	bf00      	nop
   b720c:	2003e6f4 	.word	0x2003e6f4
   b7210:	2003e6e8 	.word	0x2003e6e8
   b7214:	ffff0000 	.word	0xffff0000

000b7218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7218:	4b02      	ldr	r3, [pc, #8]	; (b7224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b721a:	681a      	ldr	r2, [r3, #0]
   b721c:	4b02      	ldr	r3, [pc, #8]	; (b7228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b721e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7220:	4770      	bx	lr
   b7222:	bf00      	nop
   b7224:	2003e560 	.word	0x2003e560
   b7228:	2003e6f8 	.word	0x2003e6f8

000b722c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b722c:	4770      	bx	lr

000b722e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b722e:	7441      	strb	r1, [r0, #17]
}
   b7230:	4770      	bx	lr

000b7232 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7232:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7234:	7c00      	ldrb	r0, [r0, #16]
   b7236:	f7fd fd53 	bl	b4ce0 <hal_usart_available_data_for_write>
}
   b723a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b723e:	bd08      	pop	{r3, pc}

000b7240 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7240:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7242:	7c00      	ldrb	r0, [r0, #16]
   b7244:	f7fd fd24 	bl	b4c90 <hal_usart_available>
}
   b7248:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b724c:	bd08      	pop	{r3, pc}

000b724e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b724e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7250:	7c00      	ldrb	r0, [r0, #16]
   b7252:	f7fd fd2d 	bl	b4cb0 <hal_usart_peek>
}
   b7256:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b725a:	bd08      	pop	{r3, pc}

000b725c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b725c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b725e:	7c00      	ldrb	r0, [r0, #16]
   b7260:	f7fd fd1e 	bl	b4ca0 <hal_usart_read>
}
   b7264:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7268:	bd08      	pop	{r3, pc}

000b726a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b726a:	7c00      	ldrb	r0, [r0, #16]
   b726c:	f7fd bd28 	b.w	b4cc0 <hal_usart_flush>

000b7270 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7272:	7c45      	ldrb	r5, [r0, #17]
{
   b7274:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7276:	b12d      	cbz	r5, b7284 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7278:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b727a:	b003      	add	sp, #12
   b727c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7280:	f7fd bcfe 	b.w	b4c80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7284:	7c00      	ldrb	r0, [r0, #16]
   b7286:	9101      	str	r1, [sp, #4]
   b7288:	f7fd fd2a 	bl	b4ce0 <hal_usart_available_data_for_write>
   b728c:	2800      	cmp	r0, #0
   b728e:	9901      	ldr	r1, [sp, #4]
   b7290:	dcf2      	bgt.n	b7278 <_ZN11USARTSerial5writeEh+0x8>
}
   b7292:	4628      	mov	r0, r5
   b7294:	b003      	add	sp, #12
   b7296:	bd30      	pop	{r4, r5, pc}

000b7298 <_ZN11USARTSerialD0Ev>:
   b7298:	b510      	push	{r4, lr}
   b729a:	2114      	movs	r1, #20
   b729c:	4604      	mov	r4, r0
   b729e:	f7fc fefe 	bl	b409e <_ZdlPvj>
   b72a2:	4620      	mov	r0, r4
   b72a4:	bd10      	pop	{r4, pc}
	...

000b72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b72a8:	b510      	push	{r4, lr}
   b72aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72ae:	4604      	mov	r4, r0
   b72b0:	4608      	mov	r0, r1
   b72b2:	4611      	mov	r1, r2
   b72b4:	2200      	movs	r2, #0
   b72b6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b72ba:	4b04      	ldr	r3, [pc, #16]	; (b72cc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b72bc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b72be:	2301      	movs	r3, #1
  _serial = serial;
   b72c0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b72c2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b72c4:	f7fd fd1c 	bl	b4d00 <hal_usart_init_ex>
}
   b72c8:	4620      	mov	r0, r4
   b72ca:	bd10      	pop	{r4, pc}
   b72cc:	000b87e8 	.word	0x000b87e8

000b72d0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b72d0:	7c00      	ldrb	r0, [r0, #16]
   b72d2:	2300      	movs	r3, #0
   b72d4:	f7fd bd0c 	b.w	b4cf0 <hal_usart_begin_config>

000b72d8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b72d8:	2200      	movs	r2, #0
   b72da:	f7ff bff9 	b.w	b72d0 <_ZN11USARTSerial5beginEmm>

000b72de <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b72de:	7c00      	ldrb	r0, [r0, #16]
   b72e0:	f7fd bcc6 	b.w	b4c70 <hal_usart_end>

000b72e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b72e4:	7441      	strb	r1, [r0, #17]
}
   b72e6:	4770      	bx	lr

000b72e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b72e8:	4770      	bx	lr

000b72ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b72ea:	4770      	bx	lr

000b72ec <_ZN9USBSerial4readEv>:
{
   b72ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b72ee:	2100      	movs	r1, #0
   b72f0:	7c00      	ldrb	r0, [r0, #16]
   b72f2:	f7fd fd35 	bl	b4d60 <HAL_USB_USART_Receive_Data>
}
   b72f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b72fa:	bd08      	pop	{r3, pc}

000b72fc <_ZN9USBSerial4peekEv>:
{
   b72fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b72fe:	2101      	movs	r1, #1
   b7300:	7c00      	ldrb	r0, [r0, #16]
   b7302:	f7fd fd2d 	bl	b4d60 <HAL_USB_USART_Receive_Data>
}
   b7306:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b730a:	bd08      	pop	{r3, pc}

000b730c <_ZN9USBSerial17availableForWriteEv>:
{
   b730c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b730e:	7c00      	ldrb	r0, [r0, #16]
   b7310:	f7fd fd1e 	bl	b4d50 <HAL_USB_USART_Available_Data_For_Write>
}
   b7314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7318:	bd08      	pop	{r3, pc}

000b731a <_ZN9USBSerial9availableEv>:
{
   b731a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b731c:	7c00      	ldrb	r0, [r0, #16]
   b731e:	f7fd fd0f 	bl	b4d40 <HAL_USB_USART_Available_Data>
}
   b7322:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7326:	bd08      	pop	{r3, pc}

000b7328 <_ZN9USBSerial5writeEh>:
{
   b7328:	b513      	push	{r0, r1, r4, lr}
   b732a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b732c:	7c00      	ldrb	r0, [r0, #16]
{
   b732e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7330:	f7fd fd0e 	bl	b4d50 <HAL_USB_USART_Available_Data_For_Write>
   b7334:	2800      	cmp	r0, #0
   b7336:	9901      	ldr	r1, [sp, #4]
   b7338:	dc01      	bgt.n	b733e <_ZN9USBSerial5writeEh+0x16>
   b733a:	7c60      	ldrb	r0, [r4, #17]
   b733c:	b120      	cbz	r0, b7348 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b733e:	7c20      	ldrb	r0, [r4, #16]
   b7340:	f7fd fd16 	bl	b4d70 <HAL_USB_USART_Send_Data>
   b7344:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7348:	b002      	add	sp, #8
   b734a:	bd10      	pop	{r4, pc}

000b734c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b734c:	7c00      	ldrb	r0, [r0, #16]
   b734e:	f7fd bd17 	b.w	b4d80 <HAL_USB_USART_Flush_Data>

000b7352 <_ZN9USBSerialD0Ev>:
   b7352:	b510      	push	{r4, lr}
   b7354:	2114      	movs	r1, #20
   b7356:	4604      	mov	r4, r0
   b7358:	f7fc fea1 	bl	b409e <_ZdlPvj>
   b735c:	4620      	mov	r0, r4
   b735e:	bd10      	pop	{r4, pc}

000b7360 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7360:	b510      	push	{r4, lr}
   b7362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7366:	4604      	mov	r4, r0
   b7368:	4608      	mov	r0, r1
   b736a:	2100      	movs	r1, #0
   b736c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7370:	4b04      	ldr	r3, [pc, #16]	; (b7384 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7372:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7374:	2301      	movs	r3, #1
  _serial = serial;
   b7376:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7378:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b737a:	4611      	mov	r1, r2
   b737c:	f7fd fcc8 	bl	b4d10 <HAL_USB_USART_Init>
}
   b7380:	4620      	mov	r0, r4
   b7382:	bd10      	pop	{r4, pc}
   b7384:	000b8818 	.word	0x000b8818

000b7388 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7388:	7c00      	ldrb	r0, [r0, #16]
   b738a:	2200      	movs	r2, #0
   b738c:	f7fd bcc8 	b.w	b4d20 <HAL_USB_USART_Begin>

000b7390 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7390:	7c00      	ldrb	r0, [r0, #16]
   b7392:	f7fd bccd 	b.w	b4d30 <HAL_USB_USART_End>

000b7396 <_Z19acquireSerialBufferv>:
{
   b7396:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7398:	2214      	movs	r2, #20
{
   b739a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b739c:	2100      	movs	r1, #0
   b739e:	f000 fe71 	bl	b8084 <memset>
}
   b73a2:	4620      	mov	r0, r4
   b73a4:	bd10      	pop	{r4, pc}
	...

000b73a8 <_Z16_fetch_usbserialv>:
{
   b73a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73aa:	4c0f      	ldr	r4, [pc, #60]	; (b73e8 <_Z16_fetch_usbserialv+0x40>)
{
   b73ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b73ae:	a803      	add	r0, sp, #12
   b73b0:	f7ff fff1 	bl	b7396 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73b4:	7821      	ldrb	r1, [r4, #0]
   b73b6:	f3bf 8f5b 	dmb	ish
   b73ba:	f011 0101 	ands.w	r1, r1, #1
   b73be:	d10f      	bne.n	b73e0 <_Z16_fetch_usbserialv+0x38>
   b73c0:	4620      	mov	r0, r4
   b73c2:	9101      	str	r1, [sp, #4]
   b73c4:	f7fc fe7a 	bl	b40bc <__cxa_guard_acquire>
   b73c8:	9901      	ldr	r1, [sp, #4]
   b73ca:	b148      	cbz	r0, b73e0 <_Z16_fetch_usbserialv+0x38>
   b73cc:	aa03      	add	r2, sp, #12
   b73ce:	4807      	ldr	r0, [pc, #28]	; (b73ec <_Z16_fetch_usbserialv+0x44>)
   b73d0:	f7ff ffc6 	bl	b7360 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b73d4:	4620      	mov	r0, r4
   b73d6:	f7fc fe76 	bl	b40c6 <__cxa_guard_release>
   b73da:	4805      	ldr	r0, [pc, #20]	; (b73f0 <_Z16_fetch_usbserialv+0x48>)
   b73dc:	f000 fe18 	bl	b8010 <atexit>
	return _usbserial;
}
   b73e0:	4802      	ldr	r0, [pc, #8]	; (b73ec <_Z16_fetch_usbserialv+0x44>)
   b73e2:	b008      	add	sp, #32
   b73e4:	bd10      	pop	{r4, pc}
   b73e6:	bf00      	nop
   b73e8:	2003e6fc 	.word	0x2003e6fc
   b73ec:	2003e700 	.word	0x2003e700
   b73f0:	000b72e9 	.word	0x000b72e9

000b73f4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b73f4:	b510      	push	{r4, lr}
   b73f6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b73f8:	f000 fec1 	bl	b817e <strlen>
   b73fc:	3801      	subs	r0, #1
   b73fe:	1823      	adds	r3, r4, r0
   b7400:	4620      	mov	r0, r4
	while(i<j){
   b7402:	4283      	cmp	r3, r0
   b7404:	d906      	bls.n	b7414 <_Z11str_reversePc+0x20>
		c = *i;
   b7406:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7408:	7819      	ldrb	r1, [r3, #0]
   b740a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b740e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7412:	e7f6      	b.n	b7402 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7414:	bd10      	pop	{r4, pc}

000b7416 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7416:	b570      	push	{r4, r5, r6, lr}
   b7418:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b741a:	1e91      	subs	r1, r2, #2
   b741c:	2922      	cmp	r1, #34	; 0x22
   b741e:	d81d      	bhi.n	b745c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7420:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7422:	b930      	cbnz	r0, b7432 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7424:	4423      	add	r3, r4
            *ptr++ = '0';
   b7426:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7428:	429d      	cmp	r5, r3
   b742a:	d210      	bcs.n	b744e <ultoa+0x38>
            *ptr++ = '0';
   b742c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7430:	e7fa      	b.n	b7428 <ultoa+0x12>
            result.quot = a/radix;
   b7432:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7436:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b743a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b743c:	2809      	cmp	r0, #9
                *ptr += '0';
   b743e:	bf94      	ite	ls
   b7440:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7442:	3157      	addhi	r1, #87	; 0x57
   b7444:	b2c9      	uxtb	r1, r1
   b7446:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b744a:	4630      	mov	r0, r6
	while(a){
   b744c:	e7e9      	b.n	b7422 <ultoa+0xc>

	*ptr = '\0';
   b744e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7450:	4620      	mov	r0, r4
	*ptr = '\0';
   b7452:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7454:	f7ff ffce 	bl	b73f4 <_Z11str_reversePc>
	return buffer;
   b7458:	4620      	mov	r0, r4
}
   b745a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b745c:	2000      	movs	r0, #0
   b745e:	e7fc      	b.n	b745a <ultoa+0x44>

000b7460 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7460:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7462:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7464:	460c      	mov	r4, r1
   b7466:	4615      	mov	r5, r2
	if(a<0){
   b7468:	da0e      	bge.n	b7488 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b746a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b746e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7472:	bf14      	ite	ne
   b7474:	4258      	negne	r0, r3
   b7476:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7478:	2301      	movs	r3, #1
		*buffer = '-';
   b747a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b747c:	462a      	mov	r2, r5
   b747e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7480:	f7ff ffc9 	bl	b7416 <ultoa>
	}
	return buffer;
}
   b7484:	4620      	mov	r0, r4
   b7486:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7488:	2301      	movs	r3, #1
   b748a:	e7f9      	b.n	b7480 <itoa+0x20>

000b748c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b748c:	4b01      	ldr	r3, [pc, #4]	; (b7494 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b748e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7490:	4770      	bx	lr
   b7492:	bf00      	nop
   b7494:	2003e564 	.word	0x2003e564

000b7498 <serialEventRun>:
{
   b7498:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b749a:	4b0b      	ldr	r3, [pc, #44]	; (b74c8 <serialEventRun+0x30>)
   b749c:	b143      	cbz	r3, b74b0 <serialEventRun+0x18>
   b749e:	f7ff ff83 	bl	b73a8 <_Z16_fetch_usbserialv>
   b74a2:	6803      	ldr	r3, [r0, #0]
   b74a4:	691b      	ldr	r3, [r3, #16]
   b74a6:	4798      	blx	r3
   b74a8:	2800      	cmp	r0, #0
   b74aa:	dd01      	ble.n	b74b0 <serialEventRun+0x18>
        serialEvent();
   b74ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b74b0:	4b06      	ldr	r3, [pc, #24]	; (b74cc <serialEventRun+0x34>)
   b74b2:	b143      	cbz	r3, b74c6 <serialEventRun+0x2e>
   b74b4:	f000 f962 	bl	b777c <_Z22__fetch_global_Serial1v>
   b74b8:	6803      	ldr	r3, [r0, #0]
   b74ba:	691b      	ldr	r3, [r3, #16]
   b74bc:	4798      	blx	r3
   b74be:	2800      	cmp	r0, #0
   b74c0:	dd01      	ble.n	b74c6 <serialEventRun+0x2e>
        serialEvent1();
   b74c2:	f3af 8000 	nop.w
}
   b74c6:	bd08      	pop	{r3, pc}
	...

000b74d0 <_post_loop>:
{
   b74d0:	b508      	push	{r3, lr}
	serialEventRun();
   b74d2:	f7ff ffe1 	bl	b7498 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b74d6:	f7fd fb4b 	bl	b4b70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b74da:	4b01      	ldr	r3, [pc, #4]	; (b74e0 <_post_loop+0x10>)
   b74dc:	6018      	str	r0, [r3, #0]
}
   b74de:	bd08      	pop	{r3, pc}
   b74e0:	2003e728 	.word	0x2003e728

000b74e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b74e4:	4805      	ldr	r0, [pc, #20]	; (b74fc <_Z33system_initialize_user_backup_ramv+0x18>)
   b74e6:	4a06      	ldr	r2, [pc, #24]	; (b7500 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b74e8:	4906      	ldr	r1, [pc, #24]	; (b7504 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b74ea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b74ec:	1a12      	subs	r2, r2, r0
   b74ee:	f000 fda1 	bl	b8034 <memcpy>
    __backup_sram_signature = signature;
   b74f2:	4b05      	ldr	r3, [pc, #20]	; (b7508 <_Z33system_initialize_user_backup_ramv+0x24>)
   b74f4:	4a05      	ldr	r2, [pc, #20]	; (b750c <_Z33system_initialize_user_backup_ramv+0x28>)
   b74f6:	601a      	str	r2, [r3, #0]
}
   b74f8:	bd08      	pop	{r3, pc}
   b74fa:	bf00      	nop
   b74fc:	2003f400 	.word	0x2003f400
   b7500:	2003f404 	.word	0x2003f404
   b7504:	000b8a04 	.word	0x000b8a04
   b7508:	2003f400 	.word	0x2003f400
   b750c:	9a271c1e 	.word	0x9a271c1e

000b7510 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7510:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7512:	2300      	movs	r3, #0
   b7514:	9300      	str	r3, [sp, #0]
   b7516:	461a      	mov	r2, r3
   b7518:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b751c:	f7fd fc8a 	bl	b4e34 <system_ctrl_set_result>
}
   b7520:	b003      	add	sp, #12
   b7522:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7528 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7528:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b752a:	8843      	ldrh	r3, [r0, #2]
   b752c:	2b0a      	cmp	r3, #10
   b752e:	d008      	beq.n	b7542 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7530:	2b50      	cmp	r3, #80	; 0x50
   b7532:	d10b      	bne.n	b754c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7534:	4b09      	ldr	r3, [pc, #36]	; (b755c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7536:	681b      	ldr	r3, [r3, #0]
   b7538:	b14b      	cbz	r3, b754e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b753a:	b003      	add	sp, #12
   b753c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7540:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7542:	f7ff ffe5 	bl	b7510 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7546:	b003      	add	sp, #12
   b7548:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b754c:	2300      	movs	r3, #0
   b754e:	9300      	str	r3, [sp, #0]
   b7550:	461a      	mov	r2, r3
   b7552:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7556:	f7fd fc6d 	bl	b4e34 <system_ctrl_set_result>
}
   b755a:	e7f4      	b.n	b7546 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b755c:	2003e718 	.word	0x2003e718

000b7560 <module_user_init_hook>:
{
   b7560:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7562:	4812      	ldr	r0, [pc, #72]	; (b75ac <module_user_init_hook+0x4c>)
   b7564:	2100      	movs	r1, #0
   b7566:	f7fd fd37 	bl	b4fd8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b756a:	4b11      	ldr	r3, [pc, #68]	; (b75b0 <module_user_init_hook+0x50>)
   b756c:	681a      	ldr	r2, [r3, #0]
   b756e:	4b11      	ldr	r3, [pc, #68]	; (b75b4 <module_user_init_hook+0x54>)
   b7570:	429a      	cmp	r2, r3
   b7572:	4b11      	ldr	r3, [pc, #68]	; (b75b8 <module_user_init_hook+0x58>)
   b7574:	bf0c      	ite	eq
   b7576:	2201      	moveq	r2, #1
   b7578:	2200      	movne	r2, #0
   b757a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b757c:	d001      	beq.n	b7582 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b757e:	f7ff ffb1 	bl	b74e4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7582:	f7fd fae5 	bl	b4b50 <HAL_RNG_GetRandomNumber>
   b7586:	4604      	mov	r4, r0
    srand(seed);
   b7588:	f000 fd84 	bl	b8094 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b758c:	4b0b      	ldr	r3, [pc, #44]	; (b75bc <module_user_init_hook+0x5c>)
   b758e:	b113      	cbz	r3, b7596 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7590:	4620      	mov	r0, r4
   b7592:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7596:	2100      	movs	r1, #0
   b7598:	4808      	ldr	r0, [pc, #32]	; (b75bc <module_user_init_hook+0x5c>)
   b759a:	f7fd fc75 	bl	b4e88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b75a2:	4807      	ldr	r0, [pc, #28]	; (b75c0 <module_user_init_hook+0x60>)
   b75a4:	2100      	movs	r1, #0
   b75a6:	f7fd bc3b 	b.w	b4e20 <system_ctrl_set_app_request_handler>
   b75aa:	bf00      	nop
   b75ac:	000b748d 	.word	0x000b748d
   b75b0:	2003f400 	.word	0x2003f400
   b75b4:	9a271c1e 	.word	0x9a271c1e
   b75b8:	2003e714 	.word	0x2003e714
   b75bc:	00000000 	.word	0x00000000
   b75c0:	000b7529 	.word	0x000b7529

000b75c4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b75c4:	b508      	push	{r3, lr}
   b75c6:	4b02      	ldr	r3, [pc, #8]	; (b75d0 <spark_protocol_instance+0xc>)
   b75c8:	681b      	ldr	r3, [r3, #0]
   b75ca:	681b      	ldr	r3, [r3, #0]
   b75cc:	9301      	str	r3, [sp, #4]
   b75ce:	bd08      	pop	{r3, pc}
   b75d0:	0003025c 	.word	0x0003025c

000b75d4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b75d4:	b508      	push	{r3, lr}
   b75d6:	4b02      	ldr	r3, [pc, #8]	; (b75e0 <spark_protocol_set_product_id+0xc>)
   b75d8:	681b      	ldr	r3, [r3, #0]
   b75da:	685b      	ldr	r3, [r3, #4]
   b75dc:	9301      	str	r3, [sp, #4]
   b75de:	bd08      	pop	{r3, pc}
   b75e0:	0003025c 	.word	0x0003025c

000b75e4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b75e4:	b508      	push	{r3, lr}
   b75e6:	4b02      	ldr	r3, [pc, #8]	; (b75f0 <spark_protocol_set_product_firmware_version+0xc>)
   b75e8:	681b      	ldr	r3, [r3, #0]
   b75ea:	689b      	ldr	r3, [r3, #8]
   b75ec:	9301      	str	r3, [sp, #4]
   b75ee:	bd08      	pop	{r3, pc}
   b75f0:	0003025c 	.word	0x0003025c

000b75f4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b75f4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b75f6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b75f8:	d902      	bls.n	b7600 <pinAvailable+0xc>
    return false;
   b75fa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b75fc:	b002      	add	sp, #8
   b75fe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7600:	f1a0 030b 	sub.w	r3, r0, #11
   b7604:	2b02      	cmp	r3, #2
   b7606:	d81a      	bhi.n	b763e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7608:	4c17      	ldr	r4, [pc, #92]	; (b7668 <pinAvailable+0x74>)
   b760a:	7821      	ldrb	r1, [r4, #0]
   b760c:	f3bf 8f5b 	dmb	ish
   b7610:	f011 0101 	ands.w	r1, r1, #1
   b7614:	d10b      	bne.n	b762e <pinAvailable+0x3a>
   b7616:	4620      	mov	r0, r4
   b7618:	9101      	str	r1, [sp, #4]
   b761a:	f7fc fd4f 	bl	b40bc <__cxa_guard_acquire>
   b761e:	9901      	ldr	r1, [sp, #4]
   b7620:	b128      	cbz	r0, b762e <pinAvailable+0x3a>
   b7622:	4812      	ldr	r0, [pc, #72]	; (b766c <pinAvailable+0x78>)
   b7624:	f7ff fbdc 	bl	b6de0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7628:	4620      	mov	r0, r4
   b762a:	f7fc fd4c 	bl	b40c6 <__cxa_guard_release>
   b762e:	4b0f      	ldr	r3, [pc, #60]	; (b766c <pinAvailable+0x78>)
   b7630:	7818      	ldrb	r0, [r3, #0]
   b7632:	f7fd fb15 	bl	b4c60 <hal_spi_is_enabled>
   b7636:	2800      	cmp	r0, #0
   b7638:	d1df      	bne.n	b75fa <pinAvailable+0x6>
  return true; // 'pin' is available
   b763a:	2001      	movs	r0, #1
   b763c:	e7de      	b.n	b75fc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b763e:	2801      	cmp	r0, #1
   b7640:	d809      	bhi.n	b7656 <pinAvailable+0x62>
   b7642:	f000 f85b 	bl	b76fc <_Z19__fetch_global_Wirev>
   b7646:	2100      	movs	r1, #0
   b7648:	7c00      	ldrb	r0, [r0, #16]
   b764a:	f7fd fad9 	bl	b4c00 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b764e:	f080 0001 	eor.w	r0, r0, #1
   b7652:	b2c0      	uxtb	r0, r0
   b7654:	e7d2      	b.n	b75fc <pinAvailable+0x8>
   b7656:	3809      	subs	r0, #9
   b7658:	2801      	cmp	r0, #1
   b765a:	d8ee      	bhi.n	b763a <pinAvailable+0x46>
   b765c:	f000 f88e 	bl	b777c <_Z22__fetch_global_Serial1v>
   b7660:	7c00      	ldrb	r0, [r0, #16]
   b7662:	f7fd fb35 	bl	b4cd0 <hal_usart_is_enabled>
   b7666:	e7f2      	b.n	b764e <pinAvailable+0x5a>
   b7668:	2003e71c 	.word	0x2003e71c
   b766c:	2003e720 	.word	0x2003e720

000b7670 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7670:	2823      	cmp	r0, #35	; 0x23
{
   b7672:	b538      	push	{r3, r4, r5, lr}
   b7674:	4604      	mov	r4, r0
   b7676:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7678:	d80a      	bhi.n	b7690 <pinMode+0x20>
   b767a:	29ff      	cmp	r1, #255	; 0xff
   b767c:	d008      	beq.n	b7690 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b767e:	f7ff ffb9 	bl	b75f4 <pinAvailable>
   b7682:	b128      	cbz	r0, b7690 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7684:	4629      	mov	r1, r5
   b7686:	4620      	mov	r0, r4
}
   b7688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b768c:	f7fd ba78 	b.w	b4b80 <HAL_Pin_Mode>
}
   b7690:	bd38      	pop	{r3, r4, r5, pc}

000b7692 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7692:	b538      	push	{r3, r4, r5, lr}
   b7694:	4604      	mov	r4, r0
   b7696:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7698:	f7fd fa7a 	bl	b4b90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b769c:	28ff      	cmp	r0, #255	; 0xff
   b769e:	d010      	beq.n	b76c2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b76a0:	2806      	cmp	r0, #6
   b76a2:	d804      	bhi.n	b76ae <digitalWrite+0x1c>
   b76a4:	234d      	movs	r3, #77	; 0x4d
   b76a6:	fa23 f000 	lsr.w	r0, r3, r0
   b76aa:	07c3      	lsls	r3, r0, #31
   b76ac:	d409      	bmi.n	b76c2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b76ae:	4620      	mov	r0, r4
   b76b0:	f7ff ffa0 	bl	b75f4 <pinAvailable>
   b76b4:	b128      	cbz	r0, b76c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b76b6:	4629      	mov	r1, r5
   b76b8:	4620      	mov	r0, r4
}
   b76ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b76be:	f7fd ba6f 	b.w	b4ba0 <HAL_GPIO_Write>
}
   b76c2:	bd38      	pop	{r3, r4, r5, pc}

000b76c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b76c4:	4770      	bx	lr
	...

000b76c8 <_Z17acquireWireBufferv>:
{
   b76c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b76ca:	4b0a      	ldr	r3, [pc, #40]	; (b76f4 <_Z17acquireWireBufferv+0x2c>)
   b76cc:	6003      	str	r3, [r0, #0]
   b76ce:	2301      	movs	r3, #1
{
   b76d0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b76d2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b76d4:	4908      	ldr	r1, [pc, #32]	; (b76f8 <_Z17acquireWireBufferv+0x30>)
   b76d6:	2020      	movs	r0, #32
   b76d8:	f000 f876 	bl	b77c8 <_ZnajRKSt9nothrow_t>
	};
   b76dc:	2520      	movs	r5, #32
   b76de:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b76e0:	4905      	ldr	r1, [pc, #20]	; (b76f8 <_Z17acquireWireBufferv+0x30>)
	};
   b76e2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b76e4:	4628      	mov	r0, r5
   b76e6:	f000 f86f 	bl	b77c8 <_ZnajRKSt9nothrow_t>
	};
   b76ea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b76ee:	4620      	mov	r0, r4
   b76f0:	bd38      	pop	{r3, r4, r5, pc}
   b76f2:	bf00      	nop
   b76f4:	00010018 	.word	0x00010018
   b76f8:	000b8840 	.word	0x000b8840

000b76fc <_Z19__fetch_global_Wirev>:
{
   b76fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b76fe:	4d0e      	ldr	r5, [pc, #56]	; (b7738 <_Z19__fetch_global_Wirev+0x3c>)
   b7700:	7829      	ldrb	r1, [r5, #0]
   b7702:	f3bf 8f5b 	dmb	ish
   b7706:	f011 0401 	ands.w	r4, r1, #1
{
   b770a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b770c:	d111      	bne.n	b7732 <_Z19__fetch_global_Wirev+0x36>
   b770e:	4628      	mov	r0, r5
   b7710:	f7fc fcd4 	bl	b40bc <__cxa_guard_acquire>
   b7714:	b168      	cbz	r0, b7732 <_Z19__fetch_global_Wirev+0x36>
   b7716:	4668      	mov	r0, sp
   b7718:	f7ff ffd6 	bl	b76c8 <_Z17acquireWireBufferv>
   b771c:	466a      	mov	r2, sp
   b771e:	4621      	mov	r1, r4
   b7720:	4806      	ldr	r0, [pc, #24]	; (b773c <_Z19__fetch_global_Wirev+0x40>)
   b7722:	f7fe f833 	bl	b578c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7726:	4628      	mov	r0, r5
   b7728:	f7fc fccd 	bl	b40c6 <__cxa_guard_release>
   b772c:	4804      	ldr	r0, [pc, #16]	; (b7740 <_Z19__fetch_global_Wirev+0x44>)
   b772e:	f000 fc6f 	bl	b8010 <atexit>
	return wire;
}
   b7732:	4802      	ldr	r0, [pc, #8]	; (b773c <_Z19__fetch_global_Wirev+0x40>)
   b7734:	b007      	add	sp, #28
   b7736:	bd30      	pop	{r4, r5, pc}
   b7738:	2003e72c 	.word	0x2003e72c
   b773c:	2003e730 	.word	0x2003e730
   b7740:	000b76c5 	.word	0x000b76c5

000b7744 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7744:	4770      	bx	lr
	...

000b7748 <_Z20acquireSerial1Bufferv>:
{
   b7748:	b538      	push	{r3, r4, r5, lr}
   b774a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b774c:	2514      	movs	r5, #20
   b774e:	462a      	mov	r2, r5
   b7750:	2100      	movs	r1, #0
   b7752:	f000 fc97 	bl	b8084 <memset>
   b7756:	8025      	strh	r5, [r4, #0]
   b7758:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b775a:	4907      	ldr	r1, [pc, #28]	; (b7778 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b775c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b775e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7760:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7762:	f000 f831 	bl	b77c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7766:	4904      	ldr	r1, [pc, #16]	; (b7778 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7768:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b776a:	4628      	mov	r0, r5
   b776c:	f000 f82c 	bl	b77c8 <_ZnajRKSt9nothrow_t>
    };
   b7770:	60e0      	str	r0, [r4, #12]
}
   b7772:	4620      	mov	r0, r4
   b7774:	bd38      	pop	{r3, r4, r5, pc}
   b7776:	bf00      	nop
   b7778:	000b8840 	.word	0x000b8840

000b777c <_Z22__fetch_global_Serial1v>:
{
   b777c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b777e:	4d0e      	ldr	r5, [pc, #56]	; (b77b8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7780:	7829      	ldrb	r1, [r5, #0]
   b7782:	f3bf 8f5b 	dmb	ish
   b7786:	f011 0401 	ands.w	r4, r1, #1
{
   b778a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b778c:	d111      	bne.n	b77b2 <_Z22__fetch_global_Serial1v+0x36>
   b778e:	4628      	mov	r0, r5
   b7790:	f7fc fc94 	bl	b40bc <__cxa_guard_acquire>
   b7794:	b168      	cbz	r0, b77b2 <_Z22__fetch_global_Serial1v+0x36>
   b7796:	a801      	add	r0, sp, #4
   b7798:	f7ff ffd6 	bl	b7748 <_Z20acquireSerial1Bufferv>
   b779c:	aa01      	add	r2, sp, #4
   b779e:	4621      	mov	r1, r4
   b77a0:	4806      	ldr	r0, [pc, #24]	; (b77bc <_Z22__fetch_global_Serial1v+0x40>)
   b77a2:	f7ff fd81 	bl	b72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b77a6:	4628      	mov	r0, r5
   b77a8:	f7fc fc8d 	bl	b40c6 <__cxa_guard_release>
   b77ac:	4804      	ldr	r0, [pc, #16]	; (b77c0 <_Z22__fetch_global_Serial1v+0x44>)
   b77ae:	f000 fc2f 	bl	b8010 <atexit>
    return serial1;
}
   b77b2:	4802      	ldr	r0, [pc, #8]	; (b77bc <_Z22__fetch_global_Serial1v+0x40>)
   b77b4:	b007      	add	sp, #28
   b77b6:	bd30      	pop	{r4, r5, pc}
   b77b8:	2003e744 	.word	0x2003e744
   b77bc:	2003e748 	.word	0x2003e748
   b77c0:	000b7745 	.word	0x000b7745

000b77c4 <_ZnwjRKSt9nothrow_t>:
   b77c4:	f7fc bc67 	b.w	b4096 <_Znwj>

000b77c8 <_ZnajRKSt9nothrow_t>:
   b77c8:	f7fc bc67 	b.w	b409a <_Znaj>

000b77cc <_ZSt25__throw_bad_function_callv>:
   b77cc:	b508      	push	{r3, lr}
   b77ce:	f7fd fbe3 	bl	b4f98 <abort>
	...

000b77d4 <__aeabi_drsub>:
   b77d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b77d8:	e002      	b.n	b77e0 <__adddf3>
   b77da:	bf00      	nop

000b77dc <__aeabi_dsub>:
   b77dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b77e0 <__adddf3>:
   b77e0:	b530      	push	{r4, r5, lr}
   b77e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b77e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b77ea:	ea94 0f05 	teq	r4, r5
   b77ee:	bf08      	it	eq
   b77f0:	ea90 0f02 	teqeq	r0, r2
   b77f4:	bf1f      	itttt	ne
   b77f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b77fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b77fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7802:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7806:	f000 80e2 	beq.w	b79ce <__adddf3+0x1ee>
   b780a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b780e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7812:	bfb8      	it	lt
   b7814:	426d      	neglt	r5, r5
   b7816:	dd0c      	ble.n	b7832 <__adddf3+0x52>
   b7818:	442c      	add	r4, r5
   b781a:	ea80 0202 	eor.w	r2, r0, r2
   b781e:	ea81 0303 	eor.w	r3, r1, r3
   b7822:	ea82 0000 	eor.w	r0, r2, r0
   b7826:	ea83 0101 	eor.w	r1, r3, r1
   b782a:	ea80 0202 	eor.w	r2, r0, r2
   b782e:	ea81 0303 	eor.w	r3, r1, r3
   b7832:	2d36      	cmp	r5, #54	; 0x36
   b7834:	bf88      	it	hi
   b7836:	bd30      	pophi	{r4, r5, pc}
   b7838:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b783c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7840:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7844:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7848:	d002      	beq.n	b7850 <__adddf3+0x70>
   b784a:	4240      	negs	r0, r0
   b784c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7850:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7854:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7858:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b785c:	d002      	beq.n	b7864 <__adddf3+0x84>
   b785e:	4252      	negs	r2, r2
   b7860:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7864:	ea94 0f05 	teq	r4, r5
   b7868:	f000 80a7 	beq.w	b79ba <__adddf3+0x1da>
   b786c:	f1a4 0401 	sub.w	r4, r4, #1
   b7870:	f1d5 0e20 	rsbs	lr, r5, #32
   b7874:	db0d      	blt.n	b7892 <__adddf3+0xb2>
   b7876:	fa02 fc0e 	lsl.w	ip, r2, lr
   b787a:	fa22 f205 	lsr.w	r2, r2, r5
   b787e:	1880      	adds	r0, r0, r2
   b7880:	f141 0100 	adc.w	r1, r1, #0
   b7884:	fa03 f20e 	lsl.w	r2, r3, lr
   b7888:	1880      	adds	r0, r0, r2
   b788a:	fa43 f305 	asr.w	r3, r3, r5
   b788e:	4159      	adcs	r1, r3
   b7890:	e00e      	b.n	b78b0 <__adddf3+0xd0>
   b7892:	f1a5 0520 	sub.w	r5, r5, #32
   b7896:	f10e 0e20 	add.w	lr, lr, #32
   b789a:	2a01      	cmp	r2, #1
   b789c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b78a0:	bf28      	it	cs
   b78a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b78a6:	fa43 f305 	asr.w	r3, r3, r5
   b78aa:	18c0      	adds	r0, r0, r3
   b78ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b78b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b78b4:	d507      	bpl.n	b78c6 <__adddf3+0xe6>
   b78b6:	f04f 0e00 	mov.w	lr, #0
   b78ba:	f1dc 0c00 	rsbs	ip, ip, #0
   b78be:	eb7e 0000 	sbcs.w	r0, lr, r0
   b78c2:	eb6e 0101 	sbc.w	r1, lr, r1
   b78c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b78ca:	d31b      	bcc.n	b7904 <__adddf3+0x124>
   b78cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b78d0:	d30c      	bcc.n	b78ec <__adddf3+0x10c>
   b78d2:	0849      	lsrs	r1, r1, #1
   b78d4:	ea5f 0030 	movs.w	r0, r0, rrx
   b78d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b78dc:	f104 0401 	add.w	r4, r4, #1
   b78e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b78e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b78e8:	f080 809a 	bcs.w	b7a20 <__adddf3+0x240>
   b78ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b78f0:	bf08      	it	eq
   b78f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b78f6:	f150 0000 	adcs.w	r0, r0, #0
   b78fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b78fe:	ea41 0105 	orr.w	r1, r1, r5
   b7902:	bd30      	pop	{r4, r5, pc}
   b7904:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7908:	4140      	adcs	r0, r0
   b790a:	eb41 0101 	adc.w	r1, r1, r1
   b790e:	3c01      	subs	r4, #1
   b7910:	bf28      	it	cs
   b7912:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7916:	d2e9      	bcs.n	b78ec <__adddf3+0x10c>
   b7918:	f091 0f00 	teq	r1, #0
   b791c:	bf04      	itt	eq
   b791e:	4601      	moveq	r1, r0
   b7920:	2000      	moveq	r0, #0
   b7922:	fab1 f381 	clz	r3, r1
   b7926:	bf08      	it	eq
   b7928:	3320      	addeq	r3, #32
   b792a:	f1a3 030b 	sub.w	r3, r3, #11
   b792e:	f1b3 0220 	subs.w	r2, r3, #32
   b7932:	da0c      	bge.n	b794e <__adddf3+0x16e>
   b7934:	320c      	adds	r2, #12
   b7936:	dd08      	ble.n	b794a <__adddf3+0x16a>
   b7938:	f102 0c14 	add.w	ip, r2, #20
   b793c:	f1c2 020c 	rsb	r2, r2, #12
   b7940:	fa01 f00c 	lsl.w	r0, r1, ip
   b7944:	fa21 f102 	lsr.w	r1, r1, r2
   b7948:	e00c      	b.n	b7964 <__adddf3+0x184>
   b794a:	f102 0214 	add.w	r2, r2, #20
   b794e:	bfd8      	it	le
   b7950:	f1c2 0c20 	rsble	ip, r2, #32
   b7954:	fa01 f102 	lsl.w	r1, r1, r2
   b7958:	fa20 fc0c 	lsr.w	ip, r0, ip
   b795c:	bfdc      	itt	le
   b795e:	ea41 010c 	orrle.w	r1, r1, ip
   b7962:	4090      	lslle	r0, r2
   b7964:	1ae4      	subs	r4, r4, r3
   b7966:	bfa2      	ittt	ge
   b7968:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b796c:	4329      	orrge	r1, r5
   b796e:	bd30      	popge	{r4, r5, pc}
   b7970:	ea6f 0404 	mvn.w	r4, r4
   b7974:	3c1f      	subs	r4, #31
   b7976:	da1c      	bge.n	b79b2 <__adddf3+0x1d2>
   b7978:	340c      	adds	r4, #12
   b797a:	dc0e      	bgt.n	b799a <__adddf3+0x1ba>
   b797c:	f104 0414 	add.w	r4, r4, #20
   b7980:	f1c4 0220 	rsb	r2, r4, #32
   b7984:	fa20 f004 	lsr.w	r0, r0, r4
   b7988:	fa01 f302 	lsl.w	r3, r1, r2
   b798c:	ea40 0003 	orr.w	r0, r0, r3
   b7990:	fa21 f304 	lsr.w	r3, r1, r4
   b7994:	ea45 0103 	orr.w	r1, r5, r3
   b7998:	bd30      	pop	{r4, r5, pc}
   b799a:	f1c4 040c 	rsb	r4, r4, #12
   b799e:	f1c4 0220 	rsb	r2, r4, #32
   b79a2:	fa20 f002 	lsr.w	r0, r0, r2
   b79a6:	fa01 f304 	lsl.w	r3, r1, r4
   b79aa:	ea40 0003 	orr.w	r0, r0, r3
   b79ae:	4629      	mov	r1, r5
   b79b0:	bd30      	pop	{r4, r5, pc}
   b79b2:	fa21 f004 	lsr.w	r0, r1, r4
   b79b6:	4629      	mov	r1, r5
   b79b8:	bd30      	pop	{r4, r5, pc}
   b79ba:	f094 0f00 	teq	r4, #0
   b79be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b79c2:	bf06      	itte	eq
   b79c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b79c8:	3401      	addeq	r4, #1
   b79ca:	3d01      	subne	r5, #1
   b79cc:	e74e      	b.n	b786c <__adddf3+0x8c>
   b79ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b79d2:	bf18      	it	ne
   b79d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b79d8:	d029      	beq.n	b7a2e <__adddf3+0x24e>
   b79da:	ea94 0f05 	teq	r4, r5
   b79de:	bf08      	it	eq
   b79e0:	ea90 0f02 	teqeq	r0, r2
   b79e4:	d005      	beq.n	b79f2 <__adddf3+0x212>
   b79e6:	ea54 0c00 	orrs.w	ip, r4, r0
   b79ea:	bf04      	itt	eq
   b79ec:	4619      	moveq	r1, r3
   b79ee:	4610      	moveq	r0, r2
   b79f0:	bd30      	pop	{r4, r5, pc}
   b79f2:	ea91 0f03 	teq	r1, r3
   b79f6:	bf1e      	ittt	ne
   b79f8:	2100      	movne	r1, #0
   b79fa:	2000      	movne	r0, #0
   b79fc:	bd30      	popne	{r4, r5, pc}
   b79fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7a02:	d105      	bne.n	b7a10 <__adddf3+0x230>
   b7a04:	0040      	lsls	r0, r0, #1
   b7a06:	4149      	adcs	r1, r1
   b7a08:	bf28      	it	cs
   b7a0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7a0e:	bd30      	pop	{r4, r5, pc}
   b7a10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7a14:	bf3c      	itt	cc
   b7a16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7a1a:	bd30      	popcc	{r4, r5, pc}
   b7a1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7a20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7a24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7a28:	f04f 0000 	mov.w	r0, #0
   b7a2c:	bd30      	pop	{r4, r5, pc}
   b7a2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7a32:	bf1a      	itte	ne
   b7a34:	4619      	movne	r1, r3
   b7a36:	4610      	movne	r0, r2
   b7a38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7a3c:	bf1c      	itt	ne
   b7a3e:	460b      	movne	r3, r1
   b7a40:	4602      	movne	r2, r0
   b7a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7a46:	bf06      	itte	eq
   b7a48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7a4c:	ea91 0f03 	teqeq	r1, r3
   b7a50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7a54:	bd30      	pop	{r4, r5, pc}
   b7a56:	bf00      	nop

000b7a58 <__aeabi_ui2d>:
   b7a58:	f090 0f00 	teq	r0, #0
   b7a5c:	bf04      	itt	eq
   b7a5e:	2100      	moveq	r1, #0
   b7a60:	4770      	bxeq	lr
   b7a62:	b530      	push	{r4, r5, lr}
   b7a64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7a68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7a6c:	f04f 0500 	mov.w	r5, #0
   b7a70:	f04f 0100 	mov.w	r1, #0
   b7a74:	e750      	b.n	b7918 <__adddf3+0x138>
   b7a76:	bf00      	nop

000b7a78 <__aeabi_i2d>:
   b7a78:	f090 0f00 	teq	r0, #0
   b7a7c:	bf04      	itt	eq
   b7a7e:	2100      	moveq	r1, #0
   b7a80:	4770      	bxeq	lr
   b7a82:	b530      	push	{r4, r5, lr}
   b7a84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7a88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7a8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7a90:	bf48      	it	mi
   b7a92:	4240      	negmi	r0, r0
   b7a94:	f04f 0100 	mov.w	r1, #0
   b7a98:	e73e      	b.n	b7918 <__adddf3+0x138>
   b7a9a:	bf00      	nop

000b7a9c <__aeabi_f2d>:
   b7a9c:	0042      	lsls	r2, r0, #1
   b7a9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7aa2:	ea4f 0131 	mov.w	r1, r1, rrx
   b7aa6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7aaa:	bf1f      	itttt	ne
   b7aac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7ab0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7ab4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7ab8:	4770      	bxne	lr
   b7aba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7abe:	bf08      	it	eq
   b7ac0:	4770      	bxeq	lr
   b7ac2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7ac6:	bf04      	itt	eq
   b7ac8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7acc:	4770      	bxeq	lr
   b7ace:	b530      	push	{r4, r5, lr}
   b7ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7adc:	e71c      	b.n	b7918 <__adddf3+0x138>
   b7ade:	bf00      	nop

000b7ae0 <__aeabi_ul2d>:
   b7ae0:	ea50 0201 	orrs.w	r2, r0, r1
   b7ae4:	bf08      	it	eq
   b7ae6:	4770      	bxeq	lr
   b7ae8:	b530      	push	{r4, r5, lr}
   b7aea:	f04f 0500 	mov.w	r5, #0
   b7aee:	e00a      	b.n	b7b06 <__aeabi_l2d+0x16>

000b7af0 <__aeabi_l2d>:
   b7af0:	ea50 0201 	orrs.w	r2, r0, r1
   b7af4:	bf08      	it	eq
   b7af6:	4770      	bxeq	lr
   b7af8:	b530      	push	{r4, r5, lr}
   b7afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7afe:	d502      	bpl.n	b7b06 <__aeabi_l2d+0x16>
   b7b00:	4240      	negs	r0, r0
   b7b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7b12:	f43f aed8 	beq.w	b78c6 <__adddf3+0xe6>
   b7b16:	f04f 0203 	mov.w	r2, #3
   b7b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7b1e:	bf18      	it	ne
   b7b20:	3203      	addne	r2, #3
   b7b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7b26:	bf18      	it	ne
   b7b28:	3203      	addne	r2, #3
   b7b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7b2e:	f1c2 0320 	rsb	r3, r2, #32
   b7b32:	fa00 fc03 	lsl.w	ip, r0, r3
   b7b36:	fa20 f002 	lsr.w	r0, r0, r2
   b7b3a:	fa01 fe03 	lsl.w	lr, r1, r3
   b7b3e:	ea40 000e 	orr.w	r0, r0, lr
   b7b42:	fa21 f102 	lsr.w	r1, r1, r2
   b7b46:	4414      	add	r4, r2
   b7b48:	e6bd      	b.n	b78c6 <__adddf3+0xe6>
   b7b4a:	bf00      	nop

000b7b4c <__aeabi_dmul>:
   b7b4c:	b570      	push	{r4, r5, r6, lr}
   b7b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7b5a:	bf1d      	ittte	ne
   b7b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7b60:	ea94 0f0c 	teqne	r4, ip
   b7b64:	ea95 0f0c 	teqne	r5, ip
   b7b68:	f000 f8de 	bleq	b7d28 <__aeabi_dmul+0x1dc>
   b7b6c:	442c      	add	r4, r5
   b7b6e:	ea81 0603 	eor.w	r6, r1, r3
   b7b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7b7e:	bf18      	it	ne
   b7b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7b8c:	d038      	beq.n	b7c00 <__aeabi_dmul+0xb4>
   b7b8e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7b92:	f04f 0500 	mov.w	r5, #0
   b7b96:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7ba2:	f04f 0600 	mov.w	r6, #0
   b7ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7baa:	f09c 0f00 	teq	ip, #0
   b7bae:	bf18      	it	ne
   b7bb0:	f04e 0e01 	orrne.w	lr, lr, #1
   b7bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7bc0:	d204      	bcs.n	b7bcc <__aeabi_dmul+0x80>
   b7bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7bc6:	416d      	adcs	r5, r5
   b7bc8:	eb46 0606 	adc.w	r6, r6, r6
   b7bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7be4:	bf88      	it	hi
   b7be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7bea:	d81e      	bhi.n	b7c2a <__aeabi_dmul+0xde>
   b7bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7bf0:	bf08      	it	eq
   b7bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7bf6:	f150 0000 	adcs.w	r0, r0, #0
   b7bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7bfe:	bd70      	pop	{r4, r5, r6, pc}
   b7c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7c04:	ea46 0101 	orr.w	r1, r6, r1
   b7c08:	ea40 0002 	orr.w	r0, r0, r2
   b7c0c:	ea81 0103 	eor.w	r1, r1, r3
   b7c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7c14:	bfc2      	ittt	gt
   b7c16:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7c1e:	bd70      	popgt	{r4, r5, r6, pc}
   b7c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7c24:	f04f 0e00 	mov.w	lr, #0
   b7c28:	3c01      	subs	r4, #1
   b7c2a:	f300 80ab 	bgt.w	b7d84 <__aeabi_dmul+0x238>
   b7c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7c32:	bfde      	ittt	le
   b7c34:	2000      	movle	r0, #0
   b7c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7c3a:	bd70      	pople	{r4, r5, r6, pc}
   b7c3c:	f1c4 0400 	rsb	r4, r4, #0
   b7c40:	3c20      	subs	r4, #32
   b7c42:	da35      	bge.n	b7cb0 <__aeabi_dmul+0x164>
   b7c44:	340c      	adds	r4, #12
   b7c46:	dc1b      	bgt.n	b7c80 <__aeabi_dmul+0x134>
   b7c48:	f104 0414 	add.w	r4, r4, #20
   b7c4c:	f1c4 0520 	rsb	r5, r4, #32
   b7c50:	fa00 f305 	lsl.w	r3, r0, r5
   b7c54:	fa20 f004 	lsr.w	r0, r0, r4
   b7c58:	fa01 f205 	lsl.w	r2, r1, r5
   b7c5c:	ea40 0002 	orr.w	r0, r0, r2
   b7c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7c6c:	fa21 f604 	lsr.w	r6, r1, r4
   b7c70:	eb42 0106 	adc.w	r1, r2, r6
   b7c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7c78:	bf08      	it	eq
   b7c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7c7e:	bd70      	pop	{r4, r5, r6, pc}
   b7c80:	f1c4 040c 	rsb	r4, r4, #12
   b7c84:	f1c4 0520 	rsb	r5, r4, #32
   b7c88:	fa00 f304 	lsl.w	r3, r0, r4
   b7c8c:	fa20 f005 	lsr.w	r0, r0, r5
   b7c90:	fa01 f204 	lsl.w	r2, r1, r4
   b7c94:	ea40 0002 	orr.w	r0, r0, r2
   b7c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7ca0:	f141 0100 	adc.w	r1, r1, #0
   b7ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ca8:	bf08      	it	eq
   b7caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7cae:	bd70      	pop	{r4, r5, r6, pc}
   b7cb0:	f1c4 0520 	rsb	r5, r4, #32
   b7cb4:	fa00 f205 	lsl.w	r2, r0, r5
   b7cb8:	ea4e 0e02 	orr.w	lr, lr, r2
   b7cbc:	fa20 f304 	lsr.w	r3, r0, r4
   b7cc0:	fa01 f205 	lsl.w	r2, r1, r5
   b7cc4:	ea43 0302 	orr.w	r3, r3, r2
   b7cc8:	fa21 f004 	lsr.w	r0, r1, r4
   b7ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7cd0:	fa21 f204 	lsr.w	r2, r1, r4
   b7cd4:	ea20 0002 	bic.w	r0, r0, r2
   b7cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ce0:	bf08      	it	eq
   b7ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7ce6:	bd70      	pop	{r4, r5, r6, pc}
   b7ce8:	f094 0f00 	teq	r4, #0
   b7cec:	d10f      	bne.n	b7d0e <__aeabi_dmul+0x1c2>
   b7cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7cf2:	0040      	lsls	r0, r0, #1
   b7cf4:	eb41 0101 	adc.w	r1, r1, r1
   b7cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7cfc:	bf08      	it	eq
   b7cfe:	3c01      	subeq	r4, #1
   b7d00:	d0f7      	beq.n	b7cf2 <__aeabi_dmul+0x1a6>
   b7d02:	ea41 0106 	orr.w	r1, r1, r6
   b7d06:	f095 0f00 	teq	r5, #0
   b7d0a:	bf18      	it	ne
   b7d0c:	4770      	bxne	lr
   b7d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7d12:	0052      	lsls	r2, r2, #1
   b7d14:	eb43 0303 	adc.w	r3, r3, r3
   b7d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7d1c:	bf08      	it	eq
   b7d1e:	3d01      	subeq	r5, #1
   b7d20:	d0f7      	beq.n	b7d12 <__aeabi_dmul+0x1c6>
   b7d22:	ea43 0306 	orr.w	r3, r3, r6
   b7d26:	4770      	bx	lr
   b7d28:	ea94 0f0c 	teq	r4, ip
   b7d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7d30:	bf18      	it	ne
   b7d32:	ea95 0f0c 	teqne	r5, ip
   b7d36:	d00c      	beq.n	b7d52 <__aeabi_dmul+0x206>
   b7d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7d3c:	bf18      	it	ne
   b7d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7d42:	d1d1      	bne.n	b7ce8 <__aeabi_dmul+0x19c>
   b7d44:	ea81 0103 	eor.w	r1, r1, r3
   b7d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7d4c:	f04f 0000 	mov.w	r0, #0
   b7d50:	bd70      	pop	{r4, r5, r6, pc}
   b7d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7d56:	bf06      	itte	eq
   b7d58:	4610      	moveq	r0, r2
   b7d5a:	4619      	moveq	r1, r3
   b7d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7d60:	d019      	beq.n	b7d96 <__aeabi_dmul+0x24a>
   b7d62:	ea94 0f0c 	teq	r4, ip
   b7d66:	d102      	bne.n	b7d6e <__aeabi_dmul+0x222>
   b7d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7d6c:	d113      	bne.n	b7d96 <__aeabi_dmul+0x24a>
   b7d6e:	ea95 0f0c 	teq	r5, ip
   b7d72:	d105      	bne.n	b7d80 <__aeabi_dmul+0x234>
   b7d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7d78:	bf1c      	itt	ne
   b7d7a:	4610      	movne	r0, r2
   b7d7c:	4619      	movne	r1, r3
   b7d7e:	d10a      	bne.n	b7d96 <__aeabi_dmul+0x24a>
   b7d80:	ea81 0103 	eor.w	r1, r1, r3
   b7d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7d90:	f04f 0000 	mov.w	r0, #0
   b7d94:	bd70      	pop	{r4, r5, r6, pc}
   b7d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7d9e:	bd70      	pop	{r4, r5, r6, pc}

000b7da0 <__aeabi_ddiv>:
   b7da0:	b570      	push	{r4, r5, r6, lr}
   b7da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7dae:	bf1d      	ittte	ne
   b7db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7db4:	ea94 0f0c 	teqne	r4, ip
   b7db8:	ea95 0f0c 	teqne	r5, ip
   b7dbc:	f000 f8a7 	bleq	b7f0e <__aeabi_ddiv+0x16e>
   b7dc0:	eba4 0405 	sub.w	r4, r4, r5
   b7dc4:	ea81 0e03 	eor.w	lr, r1, r3
   b7dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7dd0:	f000 8088 	beq.w	b7ee4 <__aeabi_ddiv+0x144>
   b7dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7df8:	429d      	cmp	r5, r3
   b7dfa:	bf08      	it	eq
   b7dfc:	4296      	cmpeq	r6, r2
   b7dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7e06:	d202      	bcs.n	b7e0e <__aeabi_ddiv+0x6e>
   b7e08:	085b      	lsrs	r3, r3, #1
   b7e0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b7e0e:	1ab6      	subs	r6, r6, r2
   b7e10:	eb65 0503 	sbc.w	r5, r5, r3
   b7e14:	085b      	lsrs	r3, r3, #1
   b7e16:	ea4f 0232 	mov.w	r2, r2, rrx
   b7e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7e22:	ebb6 0e02 	subs.w	lr, r6, r2
   b7e26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7e2a:	bf22      	ittt	cs
   b7e2c:	1ab6      	subcs	r6, r6, r2
   b7e2e:	4675      	movcs	r5, lr
   b7e30:	ea40 000c 	orrcs.w	r0, r0, ip
   b7e34:	085b      	lsrs	r3, r3, #1
   b7e36:	ea4f 0232 	mov.w	r2, r2, rrx
   b7e3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7e42:	bf22      	ittt	cs
   b7e44:	1ab6      	subcs	r6, r6, r2
   b7e46:	4675      	movcs	r5, lr
   b7e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7e4c:	085b      	lsrs	r3, r3, #1
   b7e4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7e52:	ebb6 0e02 	subs.w	lr, r6, r2
   b7e56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7e5a:	bf22      	ittt	cs
   b7e5c:	1ab6      	subcs	r6, r6, r2
   b7e5e:	4675      	movcs	r5, lr
   b7e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7e64:	085b      	lsrs	r3, r3, #1
   b7e66:	ea4f 0232 	mov.w	r2, r2, rrx
   b7e6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7e72:	bf22      	ittt	cs
   b7e74:	1ab6      	subcs	r6, r6, r2
   b7e76:	4675      	movcs	r5, lr
   b7e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7e7c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7e80:	d018      	beq.n	b7eb4 <__aeabi_ddiv+0x114>
   b7e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7e9e:	d1c0      	bne.n	b7e22 <__aeabi_ddiv+0x82>
   b7ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ea4:	d10b      	bne.n	b7ebe <__aeabi_ddiv+0x11e>
   b7ea6:	ea41 0100 	orr.w	r1, r1, r0
   b7eaa:	f04f 0000 	mov.w	r0, #0
   b7eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7eb2:	e7b6      	b.n	b7e22 <__aeabi_ddiv+0x82>
   b7eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7eb8:	bf04      	itt	eq
   b7eba:	4301      	orreq	r1, r0
   b7ebc:	2000      	moveq	r0, #0
   b7ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ec2:	bf88      	it	hi
   b7ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7ec8:	f63f aeaf 	bhi.w	b7c2a <__aeabi_dmul+0xde>
   b7ecc:	ebb5 0c03 	subs.w	ip, r5, r3
   b7ed0:	bf04      	itt	eq
   b7ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7eda:	f150 0000 	adcs.w	r0, r0, #0
   b7ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7ee2:	bd70      	pop	{r4, r5, r6, pc}
   b7ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7ef0:	bfc2      	ittt	gt
   b7ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7efa:	bd70      	popgt	{r4, r5, r6, pc}
   b7efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f00:	f04f 0e00 	mov.w	lr, #0
   b7f04:	3c01      	subs	r4, #1
   b7f06:	e690      	b.n	b7c2a <__aeabi_dmul+0xde>
   b7f08:	ea45 0e06 	orr.w	lr, r5, r6
   b7f0c:	e68d      	b.n	b7c2a <__aeabi_dmul+0xde>
   b7f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7f12:	ea94 0f0c 	teq	r4, ip
   b7f16:	bf08      	it	eq
   b7f18:	ea95 0f0c 	teqeq	r5, ip
   b7f1c:	f43f af3b 	beq.w	b7d96 <__aeabi_dmul+0x24a>
   b7f20:	ea94 0f0c 	teq	r4, ip
   b7f24:	d10a      	bne.n	b7f3c <__aeabi_ddiv+0x19c>
   b7f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7f2a:	f47f af34 	bne.w	b7d96 <__aeabi_dmul+0x24a>
   b7f2e:	ea95 0f0c 	teq	r5, ip
   b7f32:	f47f af25 	bne.w	b7d80 <__aeabi_dmul+0x234>
   b7f36:	4610      	mov	r0, r2
   b7f38:	4619      	mov	r1, r3
   b7f3a:	e72c      	b.n	b7d96 <__aeabi_dmul+0x24a>
   b7f3c:	ea95 0f0c 	teq	r5, ip
   b7f40:	d106      	bne.n	b7f50 <__aeabi_ddiv+0x1b0>
   b7f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7f46:	f43f aefd 	beq.w	b7d44 <__aeabi_dmul+0x1f8>
   b7f4a:	4610      	mov	r0, r2
   b7f4c:	4619      	mov	r1, r3
   b7f4e:	e722      	b.n	b7d96 <__aeabi_dmul+0x24a>
   b7f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7f54:	bf18      	it	ne
   b7f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7f5a:	f47f aec5 	bne.w	b7ce8 <__aeabi_dmul+0x19c>
   b7f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7f62:	f47f af0d 	bne.w	b7d80 <__aeabi_dmul+0x234>
   b7f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7f6a:	f47f aeeb 	bne.w	b7d44 <__aeabi_dmul+0x1f8>
   b7f6e:	e712      	b.n	b7d96 <__aeabi_dmul+0x24a>

000b7f70 <__aeabi_d2f>:
   b7f70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7f74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7f78:	bf24      	itt	cs
   b7f7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7f7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7f82:	d90d      	bls.n	b7fa0 <__aeabi_d2f+0x30>
   b7f84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7f88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7f8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7f90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7f94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7f98:	bf08      	it	eq
   b7f9a:	f020 0001 	biceq.w	r0, r0, #1
   b7f9e:	4770      	bx	lr
   b7fa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7fa4:	d121      	bne.n	b7fea <__aeabi_d2f+0x7a>
   b7fa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7faa:	bfbc      	itt	lt
   b7fac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7fb0:	4770      	bxlt	lr
   b7fb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7fb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7fba:	f1c2 0218 	rsb	r2, r2, #24
   b7fbe:	f1c2 0c20 	rsb	ip, r2, #32
   b7fc2:	fa10 f30c 	lsls.w	r3, r0, ip
   b7fc6:	fa20 f002 	lsr.w	r0, r0, r2
   b7fca:	bf18      	it	ne
   b7fcc:	f040 0001 	orrne.w	r0, r0, #1
   b7fd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7fd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7fd8:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7fdc:	ea40 000c 	orr.w	r0, r0, ip
   b7fe0:	fa23 f302 	lsr.w	r3, r3, r2
   b7fe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7fe8:	e7cc      	b.n	b7f84 <__aeabi_d2f+0x14>
   b7fea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7fee:	d107      	bne.n	b8000 <__aeabi_d2f+0x90>
   b7ff0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7ff4:	bf1e      	ittt	ne
   b7ff6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7ffa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7ffe:	4770      	bxne	lr
   b8000:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8004:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8008:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b800c:	4770      	bx	lr
   b800e:	bf00      	nop

000b8010 <atexit>:
   b8010:	2300      	movs	r3, #0
   b8012:	4601      	mov	r1, r0
   b8014:	461a      	mov	r2, r3
   b8016:	4618      	mov	r0, r3
   b8018:	f000 b96e 	b.w	b82f8 <__register_exitproc>

000b801c <atol>:
   b801c:	220a      	movs	r2, #10
   b801e:	2100      	movs	r1, #0
   b8020:	f000 b960 	b.w	b82e4 <strtol>

000b8024 <isprint>:
   b8024:	4b02      	ldr	r3, [pc, #8]	; (b8030 <isprint+0xc>)
   b8026:	4418      	add	r0, r3
   b8028:	7840      	ldrb	r0, [r0, #1]
   b802a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b802e:	4770      	bx	lr
   b8030:	000b88b1 	.word	0x000b88b1

000b8034 <memcpy>:
   b8034:	440a      	add	r2, r1
   b8036:	4291      	cmp	r1, r2
   b8038:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b803c:	d100      	bne.n	b8040 <memcpy+0xc>
   b803e:	4770      	bx	lr
   b8040:	b510      	push	{r4, lr}
   b8042:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8046:	f803 4f01 	strb.w	r4, [r3, #1]!
   b804a:	4291      	cmp	r1, r2
   b804c:	d1f9      	bne.n	b8042 <memcpy+0xe>
   b804e:	bd10      	pop	{r4, pc}

000b8050 <memmove>:
   b8050:	4288      	cmp	r0, r1
   b8052:	b510      	push	{r4, lr}
   b8054:	eb01 0402 	add.w	r4, r1, r2
   b8058:	d902      	bls.n	b8060 <memmove+0x10>
   b805a:	4284      	cmp	r4, r0
   b805c:	4623      	mov	r3, r4
   b805e:	d807      	bhi.n	b8070 <memmove+0x20>
   b8060:	1e43      	subs	r3, r0, #1
   b8062:	42a1      	cmp	r1, r4
   b8064:	d008      	beq.n	b8078 <memmove+0x28>
   b8066:	f811 2b01 	ldrb.w	r2, [r1], #1
   b806a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b806e:	e7f8      	b.n	b8062 <memmove+0x12>
   b8070:	4402      	add	r2, r0
   b8072:	4601      	mov	r1, r0
   b8074:	428a      	cmp	r2, r1
   b8076:	d100      	bne.n	b807a <memmove+0x2a>
   b8078:	bd10      	pop	{r4, pc}
   b807a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b807e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8082:	e7f7      	b.n	b8074 <memmove+0x24>

000b8084 <memset>:
   b8084:	4402      	add	r2, r0
   b8086:	4603      	mov	r3, r0
   b8088:	4293      	cmp	r3, r2
   b808a:	d100      	bne.n	b808e <memset+0xa>
   b808c:	4770      	bx	lr
   b808e:	f803 1b01 	strb.w	r1, [r3], #1
   b8092:	e7f9      	b.n	b8088 <memset+0x4>

000b8094 <srand>:
   b8094:	b538      	push	{r3, r4, r5, lr}
   b8096:	4b10      	ldr	r3, [pc, #64]	; (b80d8 <srand+0x44>)
   b8098:	681d      	ldr	r5, [r3, #0]
   b809a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b809c:	4604      	mov	r4, r0
   b809e:	b9b3      	cbnz	r3, b80ce <srand+0x3a>
   b80a0:	2018      	movs	r0, #24
   b80a2:	f7fc ff59 	bl	b4f58 <malloc>
   b80a6:	4602      	mov	r2, r0
   b80a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b80aa:	b920      	cbnz	r0, b80b6 <srand+0x22>
   b80ac:	4b0b      	ldr	r3, [pc, #44]	; (b80dc <srand+0x48>)
   b80ae:	480c      	ldr	r0, [pc, #48]	; (b80e0 <srand+0x4c>)
   b80b0:	2142      	movs	r1, #66	; 0x42
   b80b2:	f7fc ff89 	bl	b4fc8 <__assert_func>
   b80b6:	490b      	ldr	r1, [pc, #44]	; (b80e4 <srand+0x50>)
   b80b8:	4b0b      	ldr	r3, [pc, #44]	; (b80e8 <srand+0x54>)
   b80ba:	e9c0 1300 	strd	r1, r3, [r0]
   b80be:	4b0b      	ldr	r3, [pc, #44]	; (b80ec <srand+0x58>)
   b80c0:	6083      	str	r3, [r0, #8]
   b80c2:	230b      	movs	r3, #11
   b80c4:	8183      	strh	r3, [r0, #12]
   b80c6:	2100      	movs	r1, #0
   b80c8:	2001      	movs	r0, #1
   b80ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b80ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b80d0:	2200      	movs	r2, #0
   b80d2:	611c      	str	r4, [r3, #16]
   b80d4:	615a      	str	r2, [r3, #20]
   b80d6:	bd38      	pop	{r3, r4, r5, pc}
   b80d8:	2003e564 	.word	0x2003e564
   b80dc:	000b8841 	.word	0x000b8841
   b80e0:	000b8858 	.word	0x000b8858
   b80e4:	abcd330e 	.word	0xabcd330e
   b80e8:	e66d1234 	.word	0xe66d1234
   b80ec:	0005deec 	.word	0x0005deec

000b80f0 <strchr>:
   b80f0:	b2c9      	uxtb	r1, r1
   b80f2:	4603      	mov	r3, r0
   b80f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b80f8:	b11a      	cbz	r2, b8102 <strchr+0x12>
   b80fa:	428a      	cmp	r2, r1
   b80fc:	d1f9      	bne.n	b80f2 <strchr+0x2>
   b80fe:	4618      	mov	r0, r3
   b8100:	4770      	bx	lr
   b8102:	2900      	cmp	r1, #0
   b8104:	bf18      	it	ne
   b8106:	2300      	movne	r3, #0
   b8108:	e7f9      	b.n	b80fe <strchr+0xe>

000b810a <strchrnul>:
   b810a:	b510      	push	{r4, lr}
   b810c:	4604      	mov	r4, r0
   b810e:	f7ff ffef 	bl	b80f0 <strchr>
   b8112:	b918      	cbnz	r0, b811c <strchrnul+0x12>
   b8114:	4620      	mov	r0, r4
   b8116:	f000 f832 	bl	b817e <strlen>
   b811a:	4420      	add	r0, r4
   b811c:	bd10      	pop	{r4, pc}

000b811e <strcmp>:
   b811e:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8122:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8126:	2a01      	cmp	r2, #1
   b8128:	bf28      	it	cs
   b812a:	429a      	cmpcs	r2, r3
   b812c:	d0f7      	beq.n	b811e <strcmp>
   b812e:	1ad0      	subs	r0, r2, r3
   b8130:	4770      	bx	lr

000b8132 <strcpy>:
   b8132:	4603      	mov	r3, r0
   b8134:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8138:	f803 2b01 	strb.w	r2, [r3], #1
   b813c:	2a00      	cmp	r2, #0
   b813e:	d1f9      	bne.n	b8134 <strcpy+0x2>
   b8140:	4770      	bx	lr
	...

000b8144 <strdup>:
   b8144:	4b02      	ldr	r3, [pc, #8]	; (b8150 <strdup+0xc>)
   b8146:	4601      	mov	r1, r0
   b8148:	6818      	ldr	r0, [r3, #0]
   b814a:	f000 b803 	b.w	b8154 <_strdup_r>
   b814e:	bf00      	nop
   b8150:	2003e564 	.word	0x2003e564

000b8154 <_strdup_r>:
   b8154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8156:	4604      	mov	r4, r0
   b8158:	4608      	mov	r0, r1
   b815a:	460d      	mov	r5, r1
   b815c:	f000 f80f 	bl	b817e <strlen>
   b8160:	1c42      	adds	r2, r0, #1
   b8162:	4611      	mov	r1, r2
   b8164:	4620      	mov	r0, r4
   b8166:	9201      	str	r2, [sp, #4]
   b8168:	f7fc ff1e 	bl	b4fa8 <_malloc_r>
   b816c:	4604      	mov	r4, r0
   b816e:	b118      	cbz	r0, b8178 <_strdup_r+0x24>
   b8170:	9a01      	ldr	r2, [sp, #4]
   b8172:	4629      	mov	r1, r5
   b8174:	f7ff ff5e 	bl	b8034 <memcpy>
   b8178:	4620      	mov	r0, r4
   b817a:	b003      	add	sp, #12
   b817c:	bd30      	pop	{r4, r5, pc}

000b817e <strlen>:
   b817e:	4603      	mov	r3, r0
   b8180:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8184:	2a00      	cmp	r2, #0
   b8186:	d1fb      	bne.n	b8180 <strlen+0x2>
   b8188:	1a18      	subs	r0, r3, r0
   b818a:	3801      	subs	r0, #1
   b818c:	4770      	bx	lr

000b818e <strncmp>:
   b818e:	b510      	push	{r4, lr}
   b8190:	b17a      	cbz	r2, b81b2 <strncmp+0x24>
   b8192:	4603      	mov	r3, r0
   b8194:	3901      	subs	r1, #1
   b8196:	1884      	adds	r4, r0, r2
   b8198:	f813 0b01 	ldrb.w	r0, [r3], #1
   b819c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b81a0:	4290      	cmp	r0, r2
   b81a2:	d101      	bne.n	b81a8 <strncmp+0x1a>
   b81a4:	42a3      	cmp	r3, r4
   b81a6:	d101      	bne.n	b81ac <strncmp+0x1e>
   b81a8:	1a80      	subs	r0, r0, r2
   b81aa:	bd10      	pop	{r4, pc}
   b81ac:	2800      	cmp	r0, #0
   b81ae:	d1f3      	bne.n	b8198 <strncmp+0xa>
   b81b0:	e7fa      	b.n	b81a8 <strncmp+0x1a>
   b81b2:	4610      	mov	r0, r2
   b81b4:	e7f9      	b.n	b81aa <strncmp+0x1c>

000b81b6 <strrchr>:
   b81b6:	b538      	push	{r3, r4, r5, lr}
   b81b8:	4603      	mov	r3, r0
   b81ba:	460c      	mov	r4, r1
   b81bc:	b969      	cbnz	r1, b81da <strrchr+0x24>
   b81be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b81c2:	f7ff bf95 	b.w	b80f0 <strchr>
   b81c6:	1c43      	adds	r3, r0, #1
   b81c8:	4605      	mov	r5, r0
   b81ca:	4621      	mov	r1, r4
   b81cc:	4618      	mov	r0, r3
   b81ce:	f7ff ff8f 	bl	b80f0 <strchr>
   b81d2:	2800      	cmp	r0, #0
   b81d4:	d1f7      	bne.n	b81c6 <strrchr+0x10>
   b81d6:	4628      	mov	r0, r5
   b81d8:	bd38      	pop	{r3, r4, r5, pc}
   b81da:	2500      	movs	r5, #0
   b81dc:	e7f5      	b.n	b81ca <strrchr+0x14>
	...

000b81e0 <_strtol_l.constprop.0>:
   b81e0:	2b01      	cmp	r3, #1
   b81e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b81e6:	d001      	beq.n	b81ec <_strtol_l.constprop.0+0xc>
   b81e8:	2b24      	cmp	r3, #36	; 0x24
   b81ea:	d906      	bls.n	b81fa <_strtol_l.constprop.0+0x1a>
   b81ec:	f7fc fee4 	bl	b4fb8 <__errno>
   b81f0:	2316      	movs	r3, #22
   b81f2:	6003      	str	r3, [r0, #0]
   b81f4:	2000      	movs	r0, #0
   b81f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b81fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b82e0 <_strtol_l.constprop.0+0x100>
   b81fe:	460d      	mov	r5, r1
   b8200:	462e      	mov	r6, r5
   b8202:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8206:	f814 700c 	ldrb.w	r7, [r4, ip]
   b820a:	f017 0708 	ands.w	r7, r7, #8
   b820e:	d1f7      	bne.n	b8200 <_strtol_l.constprop.0+0x20>
   b8210:	2c2d      	cmp	r4, #45	; 0x2d
   b8212:	d132      	bne.n	b827a <_strtol_l.constprop.0+0x9a>
   b8214:	782c      	ldrb	r4, [r5, #0]
   b8216:	2701      	movs	r7, #1
   b8218:	1cb5      	adds	r5, r6, #2
   b821a:	2b00      	cmp	r3, #0
   b821c:	d05b      	beq.n	b82d6 <_strtol_l.constprop.0+0xf6>
   b821e:	2b10      	cmp	r3, #16
   b8220:	d109      	bne.n	b8236 <_strtol_l.constprop.0+0x56>
   b8222:	2c30      	cmp	r4, #48	; 0x30
   b8224:	d107      	bne.n	b8236 <_strtol_l.constprop.0+0x56>
   b8226:	782c      	ldrb	r4, [r5, #0]
   b8228:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b822c:	2c58      	cmp	r4, #88	; 0x58
   b822e:	d14d      	bne.n	b82cc <_strtol_l.constprop.0+0xec>
   b8230:	786c      	ldrb	r4, [r5, #1]
   b8232:	2310      	movs	r3, #16
   b8234:	3502      	adds	r5, #2
   b8236:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b823a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b823e:	f04f 0c00 	mov.w	ip, #0
   b8242:	fbb8 f9f3 	udiv	r9, r8, r3
   b8246:	4666      	mov	r6, ip
   b8248:	fb03 8a19 	mls	sl, r3, r9, r8
   b824c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8250:	f1be 0f09 	cmp.w	lr, #9
   b8254:	d816      	bhi.n	b8284 <_strtol_l.constprop.0+0xa4>
   b8256:	4674      	mov	r4, lr
   b8258:	42a3      	cmp	r3, r4
   b825a:	dd24      	ble.n	b82a6 <_strtol_l.constprop.0+0xc6>
   b825c:	f1bc 0f00 	cmp.w	ip, #0
   b8260:	db1e      	blt.n	b82a0 <_strtol_l.constprop.0+0xc0>
   b8262:	45b1      	cmp	r9, r6
   b8264:	d31c      	bcc.n	b82a0 <_strtol_l.constprop.0+0xc0>
   b8266:	d101      	bne.n	b826c <_strtol_l.constprop.0+0x8c>
   b8268:	45a2      	cmp	sl, r4
   b826a:	db19      	blt.n	b82a0 <_strtol_l.constprop.0+0xc0>
   b826c:	fb06 4603 	mla	r6, r6, r3, r4
   b8270:	f04f 0c01 	mov.w	ip, #1
   b8274:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8278:	e7e8      	b.n	b824c <_strtol_l.constprop.0+0x6c>
   b827a:	2c2b      	cmp	r4, #43	; 0x2b
   b827c:	bf04      	itt	eq
   b827e:	782c      	ldrbeq	r4, [r5, #0]
   b8280:	1cb5      	addeq	r5, r6, #2
   b8282:	e7ca      	b.n	b821a <_strtol_l.constprop.0+0x3a>
   b8284:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8288:	f1be 0f19 	cmp.w	lr, #25
   b828c:	d801      	bhi.n	b8292 <_strtol_l.constprop.0+0xb2>
   b828e:	3c37      	subs	r4, #55	; 0x37
   b8290:	e7e2      	b.n	b8258 <_strtol_l.constprop.0+0x78>
   b8292:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8296:	f1be 0f19 	cmp.w	lr, #25
   b829a:	d804      	bhi.n	b82a6 <_strtol_l.constprop.0+0xc6>
   b829c:	3c57      	subs	r4, #87	; 0x57
   b829e:	e7db      	b.n	b8258 <_strtol_l.constprop.0+0x78>
   b82a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b82a4:	e7e6      	b.n	b8274 <_strtol_l.constprop.0+0x94>
   b82a6:	f1bc 0f00 	cmp.w	ip, #0
   b82aa:	da05      	bge.n	b82b8 <_strtol_l.constprop.0+0xd8>
   b82ac:	2322      	movs	r3, #34	; 0x22
   b82ae:	6003      	str	r3, [r0, #0]
   b82b0:	4646      	mov	r6, r8
   b82b2:	b942      	cbnz	r2, b82c6 <_strtol_l.constprop.0+0xe6>
   b82b4:	4630      	mov	r0, r6
   b82b6:	e79e      	b.n	b81f6 <_strtol_l.constprop.0+0x16>
   b82b8:	b107      	cbz	r7, b82bc <_strtol_l.constprop.0+0xdc>
   b82ba:	4276      	negs	r6, r6
   b82bc:	2a00      	cmp	r2, #0
   b82be:	d0f9      	beq.n	b82b4 <_strtol_l.constprop.0+0xd4>
   b82c0:	f1bc 0f00 	cmp.w	ip, #0
   b82c4:	d000      	beq.n	b82c8 <_strtol_l.constprop.0+0xe8>
   b82c6:	1e69      	subs	r1, r5, #1
   b82c8:	6011      	str	r1, [r2, #0]
   b82ca:	e7f3      	b.n	b82b4 <_strtol_l.constprop.0+0xd4>
   b82cc:	2430      	movs	r4, #48	; 0x30
   b82ce:	2b00      	cmp	r3, #0
   b82d0:	d1b1      	bne.n	b8236 <_strtol_l.constprop.0+0x56>
   b82d2:	2308      	movs	r3, #8
   b82d4:	e7af      	b.n	b8236 <_strtol_l.constprop.0+0x56>
   b82d6:	2c30      	cmp	r4, #48	; 0x30
   b82d8:	d0a5      	beq.n	b8226 <_strtol_l.constprop.0+0x46>
   b82da:	230a      	movs	r3, #10
   b82dc:	e7ab      	b.n	b8236 <_strtol_l.constprop.0+0x56>
   b82de:	bf00      	nop
   b82e0:	000b88b2 	.word	0x000b88b2

000b82e4 <strtol>:
   b82e4:	4613      	mov	r3, r2
   b82e6:	460a      	mov	r2, r1
   b82e8:	4601      	mov	r1, r0
   b82ea:	4802      	ldr	r0, [pc, #8]	; (b82f4 <strtol+0x10>)
   b82ec:	6800      	ldr	r0, [r0, #0]
   b82ee:	f7ff bf77 	b.w	b81e0 <_strtol_l.constprop.0>
   b82f2:	bf00      	nop
   b82f4:	2003e564 	.word	0x2003e564

000b82f8 <__register_exitproc>:
   b82f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b82fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b83b8 <__register_exitproc+0xc0>
   b8300:	4606      	mov	r6, r0
   b8302:	f8d8 0000 	ldr.w	r0, [r8]
   b8306:	461f      	mov	r7, r3
   b8308:	460d      	mov	r5, r1
   b830a:	4691      	mov	r9, r2
   b830c:	f000 f856 	bl	b83bc <__retarget_lock_acquire_recursive>
   b8310:	4b25      	ldr	r3, [pc, #148]	; (b83a8 <__register_exitproc+0xb0>)
   b8312:	681c      	ldr	r4, [r3, #0]
   b8314:	b934      	cbnz	r4, b8324 <__register_exitproc+0x2c>
   b8316:	4c25      	ldr	r4, [pc, #148]	; (b83ac <__register_exitproc+0xb4>)
   b8318:	601c      	str	r4, [r3, #0]
   b831a:	4b25      	ldr	r3, [pc, #148]	; (b83b0 <__register_exitproc+0xb8>)
   b831c:	b113      	cbz	r3, b8324 <__register_exitproc+0x2c>
   b831e:	681b      	ldr	r3, [r3, #0]
   b8320:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8324:	6863      	ldr	r3, [r4, #4]
   b8326:	2b1f      	cmp	r3, #31
   b8328:	dd07      	ble.n	b833a <__register_exitproc+0x42>
   b832a:	f8d8 0000 	ldr.w	r0, [r8]
   b832e:	f000 f847 	bl	b83c0 <__retarget_lock_release_recursive>
   b8332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b833a:	b34e      	cbz	r6, b8390 <__register_exitproc+0x98>
   b833c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8340:	b988      	cbnz	r0, b8366 <__register_exitproc+0x6e>
   b8342:	4b1c      	ldr	r3, [pc, #112]	; (b83b4 <__register_exitproc+0xbc>)
   b8344:	b923      	cbnz	r3, b8350 <__register_exitproc+0x58>
   b8346:	f8d8 0000 	ldr.w	r0, [r8]
   b834a:	f000 f838 	bl	b83be <__retarget_lock_release>
   b834e:	e7f0      	b.n	b8332 <__register_exitproc+0x3a>
   b8350:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8354:	f7fc fe00 	bl	b4f58 <malloc>
   b8358:	2800      	cmp	r0, #0
   b835a:	d0f4      	beq.n	b8346 <__register_exitproc+0x4e>
   b835c:	2300      	movs	r3, #0
   b835e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8362:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8366:	6863      	ldr	r3, [r4, #4]
   b8368:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b836c:	2201      	movs	r2, #1
   b836e:	409a      	lsls	r2, r3
   b8370:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8374:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8378:	4313      	orrs	r3, r2
   b837a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b837e:	2e02      	cmp	r6, #2
   b8380:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8384:	bf02      	ittt	eq
   b8386:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b838a:	4313      	orreq	r3, r2
   b838c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8390:	6863      	ldr	r3, [r4, #4]
   b8392:	f8d8 0000 	ldr.w	r0, [r8]
   b8396:	1c5a      	adds	r2, r3, #1
   b8398:	3302      	adds	r3, #2
   b839a:	6062      	str	r2, [r4, #4]
   b839c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b83a0:	f000 f80e 	bl	b83c0 <__retarget_lock_release_recursive>
   b83a4:	2000      	movs	r0, #0
   b83a6:	e7c6      	b.n	b8336 <__register_exitproc+0x3e>
   b83a8:	2003e7e8 	.word	0x2003e7e8
   b83ac:	2003e75c 	.word	0x2003e75c
   b83b0:	00000000 	.word	0x00000000
   b83b4:	000b4f59 	.word	0x000b4f59
   b83b8:	2003e5c8 	.word	0x2003e5c8

000b83bc <__retarget_lock_acquire_recursive>:
   b83bc:	4770      	bx	lr

000b83be <__retarget_lock_release>:
   b83be:	4770      	bx	lr

000b83c0 <__retarget_lock_release_recursive>:
   b83c0:	4770      	bx	lr

000b83c2 <link_code_end>:
	...

000b83c4 <dynalib_user>:
   b83c4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b83d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b83e4:	7620 7269 7574 6c61 5b00 616d 5f67 4d52      virtual.[mag_RM
   b83f4:	3a53 2520 2c66 6d20 6761 785f 203a 6625     S: %f, mag_x: %f
   b8404:	202c 616d 5f67 3a79 2520 2c66 6d20 6761     , mag_y: %f, mag
   b8414:	7a5f 203a 6625 005d 6544 6574 7463 6e69     _z: %f].Detectin
   b8424:	2067 6556 6968 6c63 2165 5200 6c65 6165     g Vehicle!.Relea
   b8434:	6573 2e64 4300 4e4f 3a46 4142 0053 6854     sed..CONF:BAS.Th
   b8444:	6572 6873 6c6f 3a64 2520 2c64 5220 7365     reshold: %d, Res
   b8454:	7465 5420 7268 7365 6f68 646c 203a 6425     et Threshold: %d
   b8464:	202c 6142 6573 696c 656e 2520 0066 6e49     , Baseline %f.In
   b8474:	7469 6169 696c 657a 0064 4f43 464e 543a     itialized.CONF:T
   b8484:	5248 2520 0064 654e 2077 6854 6572 6873     HR %d.New Thresh
   b8494:	6c6f 2064 6553 0074 4f43 464e 523a 5345     old Set.CONF:RES
   b84a4:	2520 0064 654e 2077 6552 6573 2074 6854      %d.New Reset Th
   b84b4:	6572 6873 6c6f 2064 6553 0074 6f54 6174     reshold Set.Tota
   b84c4:	206c 6556 6968 6c63 2065 6f43 6e75 0074     l Vehicle Count.
   b84d4:	6f43 6e75 2074 6552 7274 6569 6576 0064     Count Retrieved.
   b84e4:	6f43 6e75 2074 6552 6573 0074               Count Reset.

000b84f0 <_ZTV8MagModel>:
	...
   b84f8:	4229 000b 422b 000b 6e49 7469 6169 696c     )B..+B..Initiali
   b8508:	697a 676e 5020 7261 6974 6c63 2065 7566     zing Particle fu
   b8518:	636e 6974 6e6f 2073 6e61 2064 6176 6972     nctions and vari
   b8528:	6261 656c 0073 614c 7473 4320 756f 746e     ables.Last Count
   b8538:	5400 746f 6c61 5620 6865 6369 656c 0073     .Total Vehicles.
   b8548:	6552 6163 696c 7262 7461 2065 6142 6573     Recalibrate Base
   b8558:	696c 656e 5300 7465 7420 6568 5420 7268     line.Set the Thr
   b8568:	7365 6f68 646c 5300 7465 7420 6568 5220     eshold.Set the R
   b8578:	7365 7465 5420 7268 7365 6f68 646c 0000     eset Threshold..

000b8588 <_ZTVN5spark10LogHandlerE>:
	...
   b8598:	40a5 000b 4675 000b                         .@..uF..

000b85a0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b85a8:	47c5 000b 47f9 000b 6839 000b 4677 000b     .G...G..9h..wF..

000b85b8 <_ZTV18Particle_Functions>:
	...
   b85c0:	467f 000b 4681 000b                         .F...F..

000b85c8 <_ZTVN5spark13CellularClassE>:
	...
   b85d0:	5107 000b 50fd 000b 50f3 000b 50a9 000b     .Q...P...P...P..
   b85e0:	50e7 000b 50db 000b 6b91 000b 6b99 000b     .P...P...k...k..
   b85f0:	50cf 000b 50c7 000b 50bd 000b 50b3 000b     .P...P...P...P..
   b8600:	6bc9 000b                                   .k..

000b8604 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b860c:	5141 000b 5147 000b 5185 000b 5155 000b     AQ..GQ...Q..UQ..
   b861c:	5143 000b                                   CQ..

000b8620 <_ZTVN5spark13EthernetClassE>:
	...
   b8628:	5717 000b 570d 000b 5703 000b 56f9 000b     .W...W...W...V..
   b8638:	56ed 000b 56e1 000b 6b91 000b 6b99 000b     .V...V...k...k..
   b8648:	56d5 000b 56cd 000b 56c3 000b 56b9 000b     .V...V...V...V..
   b8658:	6bc9 000b                                   .k..

000b865c <_ZTV7TwoWire>:
	...
   b8664:	5735 000b 577f 000b 5757 000b 5737 000b     5W...W..WW..7W..
   b8674:	575f 000b 5767 000b 576f 000b 5777 000b     _W..gW..oW..wW..

000b8684 <_ZTV9IPAddress>:
	...
   b868c:	57d9 000b 57c9 000b 57cb 000b 7525 7500     .W...W...W..%u.u
   b869c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b86ac:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b86bc:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b86cc:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b86dc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b86ec:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b86fc:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   b870c:	6961 006c                                   ail.

000b8710 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8718:	5c85 000b 5cab 000b 5c69 000b 58e7 000b     .\...\..i\...X..

000b8728 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8730:	60e1 000b 60f9 000b 6839 000b 4677 000b     .`...`..9h..wF..

000b8740 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8748:	610d 000b 6121 000b 69dd 000b 5c71 000b     .a..!a...i..q\..

000b8758 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8760:	5c83 000b 5cb9 000b 679d 000b 5c73 000b     .\...\...g..s\..

000b8770 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8778:	5c81 000b 5cc7 000b 6049 000b 5ce9 000b     .\...\..I`...\..

000b8788 <_ZTVN5spark12NetworkClassE>:
	...
   b8790:	6b51 000b 6b5b 000b 6b65 000b 6b6f 000b     Qk..[k..ek..ok..
   b87a0:	6b79 000b 6b85 000b 6b91 000b 6b99 000b     yk...k...k...k..
   b87b0:	6ba1 000b 6bad 000b 6bb5 000b 6bbf 000b     .k...k...k...k..
   b87c0:	6bc9 000b 5925 252d 2d6d 6425 2554 3a48     .k..%Y-%m-%dT%H:
   b87d0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b87e0 <_ZTV11USARTSerial>:
	...
   b87e8:	722d 000b 7299 000b 7271 000b 6cb5 000b     -r...r..qr...l..
   b87f8:	7241 000b 725d 000b 724f 000b 726b 000b     Ar..]r..Or..kr..
   b8808:	722f 000b 7233 000b                         /r..3r..

000b8810 <_ZTV9USBSerial>:
	...
   b8818:	72eb 000b 7353 000b 7329 000b 6cb5 000b     .r..Ss..)s...l..
   b8828:	731b 000b 72ed 000b 72fd 000b 734d 000b     .s...r...r..Ms..
   b8838:	730d 000b 72e5 000b                         .s...r..

000b8840 <_ZSt7nothrow>:
   b8840:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8850:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8860:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8870:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8880:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8890:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b88a0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b88b1 <_ctype_>:
   b88b1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b88c1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b88d1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b88e1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b88f1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8901:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8911:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8921:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8931:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b89b2 <link_const_variable_data_end>:
	...

000b89b4 <link_constructors_location>:
   b89b4:	000b41fd 	.word	0x000b41fd
   b89b8:	000b4669 	.word	0x000b4669
   b89bc:	000b4a4d 	.word	0x000b4a4d
   b89c0:	000b5099 	.word	0x000b5099
   b89c4:	000b5111 	.word	0x000b5111
   b89c8:	000b5721 	.word	0x000b5721
   b89cc:	000b6829 	.word	0x000b6829
   b89d0:	000b6ca1 	.word	0x000b6ca1
   b89d4:	000b6dd5 	.word	0x000b6dd5
   b89d8:	000b71f5 	.word	0x000b71f5
   b89dc:	000b7219 	.word	0x000b7219
