
c:/Users/alexb/OneDrive/Desktop/Orbit/MagnetometerProject/Boron/Simple-Serial-Test/target/4.1.0/boron/Simple-Serial-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000029c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b69e0  000b69e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6a04  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e5b4  000b6a08  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  2003e624  2003e624  0002e624  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6a78  000b6a78  00026a78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6aa0  000b6aa0  00026aa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013ac24  00000000  00000000  00026aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014a23  00000000  00000000  001616c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039d48  00000000  00000000  001760eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc8  00000000  00000000  001afe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3f8  00000000  00000000  001b29fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad85  00000000  00000000  001bcdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000425d7  00000000  00000000  001f7b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135b8a  00000000  00000000  0023a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007b90  00000000  00000000  0036fcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fa67 	bl	b6504 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fa6f 	bl	b6520 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5b4 	.word	0x2003e5b4
   b404c:	000b6a08 	.word	0x000b6a08
   b4050:	2003e624 	.word	0x2003e624
   b4054:	2003e624 	.word	0x2003e624
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 ffbd 	bl	b4fe0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b69ac 	.word	0x000b69ac
   b4080:	000b69d4 	.word	0x000b69d4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b96a 	b.w	b435c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f989 	bl	b43a0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bf5d 	b.w	b4f50 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bc13 	b.w	b48c0 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bc11 	b.w	b48c0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bc17 	b.w	b48d0 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN9MagSensorD1Ev>:

MagSensor::MagSensor() {
}

MagSensor::~MagSensor() {
}
   b40b2:	4770      	bx	lr

000b40b4 <_ZN9MagSensorD0Ev>:
MagSensor::~MagSensor() {
   b40b4:	b510      	push	{r4, lr}
}
   b40b6:	2104      	movs	r1, #4
MagSensor::~MagSensor() {
   b40b8:	4604      	mov	r4, r0
}
   b40ba:	f7ff fff0 	bl	b409e <_ZdlPvj>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}
	...

000b40c4 <_ZN9MagSensor8instanceEv>:
MagSensor &MagSensor::instance() {
   b40c4:	b510      	push	{r4, lr}
  if (!_instance) {
   b40c6:	4c06      	ldr	r4, [pc, #24]	; (b40e0 <_ZN9MagSensor8instanceEv+0x1c>)
   b40c8:	6823      	ldr	r3, [r4, #0]
   b40ca:	b933      	cbnz	r3, b40da <_ZN9MagSensor8instanceEv+0x16>
      _instance = new MagSensor();
   b40cc:	2004      	movs	r0, #4
   b40ce:	f7ff ffe2 	bl	b4096 <_Znwj>
   b40d2:	b108      	cbz	r0, b40d8 <_ZN9MagSensor8instanceEv+0x14>
MagSensor::MagSensor() {
   b40d4:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN9MagSensor8instanceEv+0x20>)
   b40d6:	6003      	str	r3, [r0, #0]
      _instance = new MagSensor();
   b40d8:	6020      	str	r0, [r4, #0]
}
   b40da:	6820      	ldr	r0, [r4, #0]
   b40dc:	bd10      	pop	{r4, pc}
   b40de:	bf00      	nop
   b40e0:	2003e670 	.word	0x2003e670
   b40e4:	000b6714 	.word	0x000b6714

000b40e8 <_ZN9MagSensor5setupEv>:

void MagSensor::setup(){
   b40e8:	b530      	push	{r4, r5, lr}
    
    pinMode(Light, OUTPUT);
   b40ea:	4b3d      	ldr	r3, [pc, #244]	; (b41e0 <_ZN9MagSensor5setupEv+0xf8>)
void MagSensor::setup(){
   b40ec:	b089      	sub	sp, #36	; 0x24
    pinMode(Light, OUTPUT);
   b40ee:	8818      	ldrh	r0, [r3, #0]
   b40f0:	2101      	movs	r1, #1
   b40f2:	f001 fd33 	bl	b5b5c <pinMode>
    Serial.begin(115200);
   b40f6:	f001 fb17 	bl	b5728 <_Z16_fetch_usbserialv>
   b40fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40fe:	f001 fb03 	bl	b5708 <_ZN9USBSerial5beginEl>
    Serial1.begin(115200);
   b4102:	f001 fd71 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4106:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b410a:	f001 fbd5 	bl	b58b8 <_ZN11USARTSerial5beginEm>

    waitUntil(Serial.isConnected);
   b410e:	f001 fb0b 	bl	b5728 <_Z16_fetch_usbserialv>
   b4112:	f001 fafd 	bl	b5710 <_ZN9USBSerial11isConnectedEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4116:	b910      	cbnz	r0, b411e <_ZN9MagSensor5setupEv+0x36>
            spark_process();
   b4118:	f000 fbb2 	bl	b4880 <spark_process>
        while (_while() && !_condition()) {
   b411c:	e7f7      	b.n	b410e <_ZN9MagSensor5setupEv+0x26>
   b411e:	f001 fb03 	bl	b5728 <_Z16_fetch_usbserialv>
   b4122:	f001 faf5 	bl	b5710 <_ZN9USBSerial11isConnectedEv>

    // Serial.println("Serial is connected");

    while (!Serial1.available()){
   b4126:	f001 fd5f 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b412a:	6803      	ldr	r3, [r0, #0]
   b412c:	691b      	ldr	r3, [r3, #16]
   b412e:	4798      	blx	r3
   b4130:	b918      	cbnz	r0, b413a <_ZN9MagSensor5setupEv+0x52>
        delay(10); // Wait until serial connection is established
   b4132:	200a      	movs	r0, #10
   b4134:	f000 fee0 	bl	b4ef8 <delay>
    while (!Serial1.available()){
   b4138:	e7f5      	b.n	b4126 <_ZN9MagSensor5setupEv+0x3e>
    }
    delay(1000);  // Make sure the serial monitor can connect
   b413a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b413e:	f000 fedb 	bl	b4ef8 <delay>

    Serial1.readStringUntil('\n'); //wait for clean line
   b4142:	f001 fd51 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4146:	220a      	movs	r2, #10
   b4148:	4601      	mov	r1, r0
   b414a:	a804      	add	r0, sp, #16
   b414c:	f000 feaa 	bl	b4ea4 <_ZN6Stream15readStringUntilEc>
   b4150:	a804      	add	r0, sp, #16
   b4152:	f000 fc9b 	bl	b4a8c <_ZN6StringD1Ev>
    Serial1.parseInt(); //parse over vehicle_sensed
   b4156:	f001 fd47 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b415a:	f000 fe3d 	bl	b4dd8 <_ZN6Stream8parseIntEv>
    threshold = Serial1.parseInt();
   b415e:	f001 fd43 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4162:	f000 fe39 	bl	b4dd8 <_ZN6Stream8parseIntEv>
   b4166:	4c1f      	ldr	r4, [pc, #124]	; (b41e4 <_ZN9MagSensor5setupEv+0xfc>)
    reset_threshold = Serial1.parseInt();
   b4168:	4d1f      	ldr	r5, [pc, #124]	; (b41e8 <_ZN9MagSensor5setupEv+0x100>)
    threshold = Serial1.parseInt();
   b416a:	6020      	str	r0, [r4, #0]
    reset_threshold = Serial1.parseInt();
   b416c:	f001 fd3c 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4170:	f000 fe32 	bl	b4dd8 <_ZN6Stream8parseIntEv>
   b4174:	6028      	str	r0, [r5, #0]
    baseline = Serial1.parseFloat();
   b4176:	f001 fd37 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b417a:	f000 fe8f 	bl	b4e9c <_ZN6Stream10parseFloatEv>
   b417e:	4b1b      	ldr	r3, [pc, #108]	; (b41ec <_ZN9MagSensor5setupEv+0x104>)
   b4180:	ee10 0a10 	vmov	r0, s0
   b4184:	ed83 0a00 	vstr	s0, [r3]
    Particle.publish("Device configured", String::format("Threshold: %d, ResetThreshold: %d, Baseline %f", threshold, reset_threshold, baseline));
   b4188:	f001 fefc 	bl	b5f84 <__aeabi_f2d>
   b418c:	e9cd 0100 	strd	r0, r1, [sp]
   b4190:	682b      	ldr	r3, [r5, #0]
   b4192:	6822      	ldr	r2, [r4, #0]
   b4194:	4916      	ldr	r1, [pc, #88]	; (b41f0 <_ZN9MagSensor5setupEv+0x108>)
   b4196:	a804      	add	r0, sp, #16
   b4198:	f000 fd20 	bl	b4bdc <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b419c:	4b15      	ldr	r3, [pc, #84]	; (b41f4 <_ZN9MagSensor5setupEv+0x10c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b419e:	9a04      	ldr	r2, [sp, #16]
   b41a0:	781b      	ldrb	r3, [r3, #0]
   b41a2:	f88d 3000 	strb.w	r3, [sp]
   b41a6:	4914      	ldr	r1, [pc, #80]	; (b41f8 <_ZN9MagSensor5setupEv+0x110>)
   b41a8:	233c      	movs	r3, #60	; 0x3c
   b41aa:	a802      	add	r0, sp, #8
   b41ac:	f001 f876 	bl	b529c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b41b0:	9c03      	ldr	r4, [sp, #12]
   b41b2:	b17c      	cbz	r4, b41d4 <_ZN9MagSensor5setupEv+0xec>
      if (--_M_use_count == 0)
   b41b4:	6863      	ldr	r3, [r4, #4]
   b41b6:	3b01      	subs	r3, #1
   b41b8:	6063      	str	r3, [r4, #4]
   b41ba:	b95b      	cbnz	r3, b41d4 <_ZN9MagSensor5setupEv+0xec>
          _M_dispose();
   b41bc:	6823      	ldr	r3, [r4, #0]
   b41be:	4620      	mov	r0, r4
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b41c4:	68a3      	ldr	r3, [r4, #8]
   b41c6:	3b01      	subs	r3, #1
   b41c8:	60a3      	str	r3, [r4, #8]
   b41ca:	b91b      	cbnz	r3, b41d4 <_ZN9MagSensor5setupEv+0xec>
            _M_destroy();
   b41cc:	6823      	ldr	r3, [r4, #0]
   b41ce:	4620      	mov	r0, r4
   b41d0:	68db      	ldr	r3, [r3, #12]
   b41d2:	4798      	blx	r3
   b41d4:	a804      	add	r0, sp, #16
   b41d6:	f000 fc59 	bl	b4a8c <_ZN6StringD1Ev>
}
   b41da:	b009      	add	sp, #36	; 0x24
   b41dc:	bd30      	pop	{r4, r5, pc}
   b41de:	bf00      	nop
   b41e0:	2003e5b4 	.word	0x2003e5b4
   b41e4:	2003e66c 	.word	0x2003e66c
   b41e8:	2003e628 	.word	0x2003e628
   b41ec:	2003e668 	.word	0x2003e668
   b41f0:	000b66c8 	.word	0x000b66c8
   b41f4:	2003e660 	.word	0x2003e660
   b41f8:	000b66f7 	.word	0x000b66f7

000b41fc <_ZN9MagSensor4loopEv>:
 * Serial data format coming from magnetometer:
 * 
 * threshold(int),reset_threshold(int),baseline(float),mag_x(float),
 * mag_y(float),mag_z(float),mag_RMS(float),vehicle_sensed(int)/n
 */
void MagSensor::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b41fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ready == 0) {
   b4200:	f8df a108 	ldr.w	sl, [pc, #264]	; b430c <_ZN9MagSensor4loopEv+0x110>
   b4204:	f8da 5000 	ldr.w	r5, [sl]
void MagSensor::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b4208:	b085      	sub	sp, #20
    if(ready == 0) {
   b420a:	2d00      	cmp	r5, #0
   b420c:	d151      	bne.n	b42b2 <_ZN9MagSensor4loopEv+0xb6>
        Serial1.readStringUntil('\n'); //wait for clean line        
   b420e:	f001 fceb 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4212:	220a      	movs	r2, #10
   b4214:	4601      	mov	r1, r0
   b4216:	4668      	mov	r0, sp
   b4218:	f000 fe44 	bl	b4ea4 <_ZN6Stream15readStringUntilEc>
   b421c:	4668      	mov	r0, sp
   b421e:	f000 fc35 	bl	b4a8c <_ZN6StringD1Ev>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b4222:	f001 fce1 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4226:	f000 fdd7 	bl	b4dd8 <_ZN6Stream8parseIntEv>
   b422a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; b4310 <_ZN9MagSensor4loopEv+0x114>
        Serial1.parseInt(); //parse over threshold
        Serial1.parseInt(); //parse over reset_threshold
        Serial1.parseFloat(); //parse over baseline
        mag_x = Serial1.parseFloat(); //store mag_x
   b422e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b4314 <_ZN9MagSensor4loopEv+0x118>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b4232:	f8c9 0000 	str.w	r0, [r9]
        Serial1.parseInt(); //parse over threshold
   b4236:	f001 fcd7 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b423a:	f000 fdcd 	bl	b4dd8 <_ZN6Stream8parseIntEv>
        Serial1.parseInt(); //parse over reset_threshold
   b423e:	f001 fcd3 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4242:	f000 fdc9 	bl	b4dd8 <_ZN6Stream8parseIntEv>
        Serial1.parseFloat(); //parse over baseline
   b4246:	f001 fccf 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b424a:	f000 fe27 	bl	b4e9c <_ZN6Stream10parseFloatEv>
        mag_x = Serial1.parseFloat(); //store mag_x
   b424e:	f001 fccb 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4252:	f000 fe23 	bl	b4e9c <_ZN6Stream10parseFloatEv>
   b4256:	ed88 0a00 	vstr	s0, [r8]
        mag_y = Serial1.parseFloat(); //store mag_y
   b425a:	f001 fcc5 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b425e:	f000 fe1d 	bl	b4e9c <_ZN6Stream10parseFloatEv>
   b4262:	4f25      	ldr	r7, [pc, #148]	; (b42f8 <_ZN9MagSensor4loopEv+0xfc>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b4264:	4e25      	ldr	r6, [pc, #148]	; (b42fc <_ZN9MagSensor4loopEv+0x100>)
        mag_y = Serial1.parseFloat(); //store mag_y
   b4266:	ed87 0a00 	vstr	s0, [r7]
        mag_z = Serial1.parseFloat(); //store mag_z
   b426a:	f001 fcbd 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b426e:	f000 fe15 	bl	b4e9c <_ZN6Stream10parseFloatEv>
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
        // Serial.println(vehicle_sensed);
        // Simple FSM for vehicle_sensed state
        switch(state){
   b4272:	4c23      	ldr	r4, [pc, #140]	; (b4300 <_ZN9MagSensor4loopEv+0x104>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b4274:	ed86 0a00 	vstr	s0, [r6]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4278:	f001 fcb6 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b427c:	f000 fe0e 	bl	b4e9c <_ZN6Stream10parseFloatEv>
        switch(state){
   b4280:	6821      	ldr	r1, [r4, #0]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4282:	f8df b094 	ldr.w	fp, [pc, #148]	; b4318 <_ZN9MagSensor4loopEv+0x11c>
        switch(state){
   b4286:	2901      	cmp	r1, #1
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4288:	ed8b 0a00 	vstr	s0, [fp]
        switch(state){
   b428c:	d014      	beq.n	b42b8 <_ZN9MagSensor4loopEv+0xbc>
   b428e:	2902      	cmp	r1, #2
   b4290:	d028      	beq.n	b42e4 <_ZN9MagSensor4loopEv+0xe8>
   b4292:	b971      	cbnz	r1, b42b2 <_ZN9MagSensor4loopEv+0xb6>
            // WAITING
            case 0: 
                if(vehicle_sensed == 1){ //capture trigger values
   b4294:	f8d9 2000 	ldr.w	r2, [r9]
   b4298:	2a01      	cmp	r2, #1
   b429a:	d10a      	bne.n	b42b2 <_ZN9MagSensor4loopEv+0xb6>
                    data[0] = mag_x;
   b429c:	4b19      	ldr	r3, [pc, #100]	; (b4304 <_ZN9MagSensor4loopEv+0x108>)
   b429e:	f8d8 1000 	ldr.w	r1, [r8]
   b42a2:	6019      	str	r1, [r3, #0]
                    data[1] = mag_y;
   b42a4:	6839      	ldr	r1, [r7, #0]
   b42a6:	6059      	str	r1, [r3, #4]
                    data[2] = mag_z;
   b42a8:	6831      	ldr	r1, [r6, #0]
   b42aa:	6099      	str	r1, [r3, #8]
                    data[3] = mag_RMS;
   b42ac:	ed83 0a03 	vstr	s0, [r3, #12]
                    state = 1;
   b42b0:	6022      	str	r2, [r4, #0]
                ready = 1;
                state = 0;
                break;
        }
    }
}
   b42b2:	b005      	add	sp, #20
   b42b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                digitalWrite(Light, HIGH);
   b42b8:	4b13      	ldr	r3, [pc, #76]	; (b4308 <_ZN9MagSensor4loopEv+0x10c>)
   b42ba:	8818      	ldrh	r0, [r3, #0]
   b42bc:	f001 fc5f 	bl	b5b7e <digitalWrite>
                if(vehicle_sensed == 0){ //capture reset values
   b42c0:	f8d9 3000 	ldr.w	r3, [r9]
   b42c4:	2b00      	cmp	r3, #0
   b42c6:	d1f4      	bne.n	b42b2 <_ZN9MagSensor4loopEv+0xb6>
                    data[4] = mag_x;
   b42c8:	4b0e      	ldr	r3, [pc, #56]	; (b4304 <_ZN9MagSensor4loopEv+0x108>)
   b42ca:	f8d8 2000 	ldr.w	r2, [r8]
   b42ce:	611a      	str	r2, [r3, #16]
                    data[5] = mag_y;
   b42d0:	683a      	ldr	r2, [r7, #0]
   b42d2:	615a      	str	r2, [r3, #20]
                    data[6] = mag_z;
   b42d4:	6832      	ldr	r2, [r6, #0]
   b42d6:	619a      	str	r2, [r3, #24]
                    data[7] = mag_RMS;
   b42d8:	f8db 2000 	ldr.w	r2, [fp]
   b42dc:	61da      	str	r2, [r3, #28]
                    state = 2;
   b42de:	2302      	movs	r3, #2
   b42e0:	6023      	str	r3, [r4, #0]
   b42e2:	e7e6      	b.n	b42b2 <_ZN9MagSensor4loopEv+0xb6>
                digitalWrite(Light, LOW);
   b42e4:	4b08      	ldr	r3, [pc, #32]	; (b4308 <_ZN9MagSensor4loopEv+0x10c>)
   b42e6:	4629      	mov	r1, r5
   b42e8:	8818      	ldrh	r0, [r3, #0]
   b42ea:	f001 fc48 	bl	b5b7e <digitalWrite>
                ready = 1;
   b42ee:	2301      	movs	r3, #1
   b42f0:	f8ca 3000 	str.w	r3, [sl]
                state = 0;
   b42f4:	6025      	str	r5, [r4, #0]
}
   b42f6:	e7dc      	b.n	b42b2 <_ZN9MagSensor4loopEv+0xb6>
   b42f8:	2003e650 	.word	0x2003e650
   b42fc:	2003e654 	.word	0x2003e654
   b4300:	2003e65c 	.word	0x2003e65c
   b4304:	2003e62c 	.word	0x2003e62c
   b4308:	2003e5b4 	.word	0x2003e5b4
   b430c:	2003e658 	.word	0x2003e658
   b4310:	2003e624 	.word	0x2003e624
   b4314:	2003e64c 	.word	0x2003e64c
   b4318:	2003e664 	.word	0x2003e664

000b431c <_ZN9MagSensor7getDataEv>:
int MagSensor::setResetThreshold(int reset_threshold){
    return 0; //TODO
}

float* MagSensor::getData(){
    if(ready == 1){
   b431c:	4b03      	ldr	r3, [pc, #12]	; (b432c <_ZN9MagSensor7getDataEv+0x10>)
   b431e:	681a      	ldr	r2, [r3, #0]
   b4320:	2000      	movs	r0, #0
   b4322:	2a01      	cmp	r2, #1
        ready = 0;
   b4324:	bf04      	itt	eq
   b4326:	6018      	streq	r0, [r3, #0]
        return data;
   b4328:	4801      	ldreq	r0, [pc, #4]	; (b4330 <_ZN9MagSensor7getDataEv+0x14>)
    }
    return {};
   b432a:	4770      	bx	lr
   b432c:	2003e658 	.word	0x2003e658
   b4330:	2003e62c 	.word	0x2003e62c

000b4334 <_GLOBAL__sub_I__ZN9MagSensor9_instanceE>:
        val_(val) {
   b4334:	4b01      	ldr	r3, [pc, #4]	; (b433c <_GLOBAL__sub_I__ZN9MagSensor9_instanceE+0x8>)
   b4336:	2200      	movs	r2, #0
   b4338:	701a      	strb	r2, [r3, #0]
   b433a:	4770      	bx	lr
   b433c:	2003e660 	.word	0x2003e660

000b4340 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4340:	b513      	push	{r0, r1, r4, lr}
   b4342:	4b05      	ldr	r3, [pc, #20]	; (b4358 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b4344:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4346:	f88d 3000 	strb.w	r3, [sp]
   b434a:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b434c:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b434e:	f000 ffa5 	bl	b529c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b4352:	4620      	mov	r0, r4
   b4354:	b002      	add	sp, #8
   b4356:	bd10      	pop	{r4, pc}
   b4358:	2003e680 	.word	0x2003e680

000b435c <setup>:
SYSTEM_MODE(AUTOMATIC);
SYSTEM_THREAD(ENABLED);

int totalVehicles = 0;

void setup() {  
   b435c:	b508      	push	{r3, lr}

  MagSensor::instance().setup();
   b435e:	f7ff feb1 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b4362:	f7ff fec1 	bl	b40e8 <_ZN9MagSensor5setupEv>
  //Serial.println("MagSensor instance initialized.");

  VehicleCounter::instance().setup();
   b4366:	f000 f8b5 	bl	b44d4 <_ZN14VehicleCounter8instanceEv>
  //Serial.println("Vehicle Counter Initiated");
}
   b436a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  VehicleCounter::instance().setup();
   b436e:	f000 b8c3 	b.w	b44f8 <_ZN14VehicleCounter5setupEv>

000b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4372:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4374:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4376:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4378:	b17c      	cbz	r4, b439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b437a:	6863      	ldr	r3, [r4, #4]
   b437c:	3b01      	subs	r3, #1
   b437e:	6063      	str	r3, [r4, #4]
   b4380:	b95b      	cbnz	r3, b439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4382:	6823      	ldr	r3, [r4, #0]
   b4384:	4620      	mov	r0, r4
   b4386:	689b      	ldr	r3, [r3, #8]
   b4388:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b438a:	68a3      	ldr	r3, [r4, #8]
   b438c:	3b01      	subs	r3, #1
   b438e:	60a3      	str	r3, [r4, #8]
   b4390:	b91b      	cbnz	r3, b439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4392:	6823      	ldr	r3, [r4, #0]
   b4394:	4620      	mov	r0, r4
   b4396:	68db      	ldr	r3, [r3, #12]
   b4398:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b439a:	4628      	mov	r0, r5
   b439c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b43a0 <loop>:

void loop() {
   b43a0:	b510      	push	{r4, lr}
   b43a2:	b08e      	sub	sp, #56	; 0x38
  float* vehicleData = MagSensor::instance().getData();
   b43a4:	f7ff fe8e 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b43a8:	f7ff ffb8 	bl	b431c <_ZN9MagSensor7getDataEv>
   b43ac:	4604      	mov	r4, r0
  MagSensor::instance().loop();
   b43ae:	f7ff fe89 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b43b2:	f7ff ff23 	bl	b41fc <_ZN9MagSensor4loopEv>
  if(vehicleData != 0){
   b43b6:	2c00      	cmp	r4, #0
   b43b8:	d061      	beq.n	b447e <loop+0xde>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        vehicleData[3],
                        vehicleData[0],
                        vehicleData[1],
                        vehicleData[2] ));
   b43ba:	68e0      	ldr	r0, [r4, #12]
   b43bc:	f001 fde2 	bl	b5f84 <__aeabi_f2d>
   b43c0:	4602      	mov	r2, r0
   b43c2:	460b      	mov	r3, r1
   b43c4:	68a0      	ldr	r0, [r4, #8]
   b43c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b43ca:	f001 fddb 	bl	b5f84 <__aeabi_f2d>
   b43ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b43d2:	6860      	ldr	r0, [r4, #4]
   b43d4:	f001 fdd6 	bl	b5f84 <__aeabi_f2d>
   b43d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b43dc:	6820      	ldr	r0, [r4, #0]
   b43de:	f001 fdd1 	bl	b5f84 <__aeabi_f2d>
   b43e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b43e6:	e9cd 0100 	strd	r0, r1, [sp]
   b43ea:	4926      	ldr	r1, [pc, #152]	; (b4484 <loop+0xe4>)
   b43ec:	a80a      	add	r0, sp, #40	; 0x28
   b43ee:	f000 fbf5 	bl	b4bdc <_ZN6String6formatEPKcz>
   b43f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b43f4:	4924      	ldr	r1, [pc, #144]	; (b4488 <loop+0xe8>)
   b43f6:	a808      	add	r0, sp, #32
   b43f8:	f7ff ffa2 	bl	b4340 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b43fc:	a809      	add	r0, sp, #36	; 0x24
   b43fe:	f7ff ffb8 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b4402:	a80a      	add	r0, sp, #40	; 0x28
   b4404:	f000 fb42 	bl	b4a8c <_ZN6StringD1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        vehicleData[7],
                        vehicleData[4],
                        vehicleData[5],
                        vehicleData[6]));
   b4408:	69e0      	ldr	r0, [r4, #28]
   b440a:	f001 fdbb 	bl	b5f84 <__aeabi_f2d>
   b440e:	4602      	mov	r2, r0
   b4410:	460b      	mov	r3, r1
   b4412:	69a0      	ldr	r0, [r4, #24]
   b4414:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b4418:	f001 fdb4 	bl	b5f84 <__aeabi_f2d>
   b441c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4420:	6960      	ldr	r0, [r4, #20]
   b4422:	f001 fdaf 	bl	b5f84 <__aeabi_f2d>
   b4426:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b442a:	6920      	ldr	r0, [r4, #16]
   b442c:	f001 fdaa 	bl	b5f84 <__aeabi_f2d>
   b4430:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b4434:	e9cd 0100 	strd	r0, r1, [sp]
   b4438:	4912      	ldr	r1, [pc, #72]	; (b4484 <loop+0xe4>)
   b443a:	a80a      	add	r0, sp, #40	; 0x28
   b443c:	f000 fbce 	bl	b4bdc <_ZN6String6formatEPKcz>
   b4440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4442:	4912      	ldr	r1, [pc, #72]	; (b448c <loop+0xec>)
   b4444:	a808      	add	r0, sp, #32
   b4446:	f7ff ff7b 	bl	b4340 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b444a:	a809      	add	r0, sp, #36	; 0x24
   b444c:	f7ff ff91 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b4450:	a80a      	add	r0, sp, #40	; 0x28
   b4452:	f000 fb1b 	bl	b4a8c <_ZN6StringD1Ev>
    Particle.publish("Total Vehicles", String(VehicleCounter::instance().loop())); // output vehicle count              
   b4456:	f000 f83d 	bl	b44d4 <_ZN14VehicleCounter8instanceEv>
   b445a:	f000 f84f 	bl	b44fc <_ZN14VehicleCounter4loopEv>
   b445e:	220a      	movs	r2, #10
   b4460:	4601      	mov	r1, r0
   b4462:	a80a      	add	r0, sp, #40	; 0x28
   b4464:	f000 fb83 	bl	b4b6e <_ZN6StringC1Eih>
   b4468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b446a:	4909      	ldr	r1, [pc, #36]	; (b4490 <loop+0xf0>)
   b446c:	a808      	add	r0, sp, #32
   b446e:	f7ff ff67 	bl	b4340 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4472:	a809      	add	r0, sp, #36	; 0x24
   b4474:	f7ff ff7d 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4478:	a80a      	add	r0, sp, #40	; 0x28
   b447a:	f000 fb07 	bl	b4a8c <_ZN6StringD1Ev>
  }
   b447e:	b00e      	add	sp, #56	; 0x38
   b4480:	bd10      	pop	{r4, pc}
   b4482:	bf00      	nop
   b4484:	000b671c 	.word	0x000b671c
   b4488:	000b674b 	.word	0x000b674b
   b448c:	000b675e 	.word	0x000b675e
   b4490:	000b6768 	.word	0x000b6768

000b4494 <_GLOBAL__sub_I_SystemMode>:
   b4494:	b510      	push	{r4, lr}
   b4496:	4b08      	ldr	r3, [pc, #32]	; (b44b8 <_GLOBAL__sub_I_SystemMode+0x24>)
    SleepResult() {}
   b4498:	4a08      	ldr	r2, [pc, #32]	; (b44bc <_GLOBAL__sub_I_SystemMode+0x28>)
   b449a:	2400      	movs	r4, #0
   b449c:	701c      	strb	r4, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b449e:	4b08      	ldr	r3, [pc, #32]	; (b44c0 <_GLOBAL__sub_I_SystemMode+0x2c>)
        set_system_mode(mode);
   b44a0:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
   b44a2:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b44a6:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b44a8:	f000 f94e 	bl	b4748 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b44ac:	4621      	mov	r1, r4
   b44ae:	2001      	movs	r0, #1
   b44b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b44b4:	f000 b958 	b.w	b4768 <system_thread_set_state>
   b44b8:	2003e680 	.word	0x2003e680
   b44bc:	ffff0000 	.word	0xffff0000
   b44c0:	2003e674 	.word	0x2003e674

000b44c4 <_ZN14VehicleCounterD1Ev>:

VehicleCounter::VehicleCounter() {
}

VehicleCounter::~VehicleCounter() {
}
   b44c4:	4770      	bx	lr

000b44c6 <_ZN14VehicleCounterD0Ev>:
VehicleCounter::~VehicleCounter() {
   b44c6:	b510      	push	{r4, lr}
}
   b44c8:	2104      	movs	r1, #4
VehicleCounter::~VehicleCounter() {
   b44ca:	4604      	mov	r4, r0
}
   b44cc:	f7ff fde7 	bl	b409e <_ZdlPvj>
   b44d0:	4620      	mov	r0, r4
   b44d2:	bd10      	pop	{r4, pc}

000b44d4 <_ZN14VehicleCounter8instanceEv>:
VehicleCounter &VehicleCounter::instance() {
   b44d4:	b510      	push	{r4, lr}
    if (!_instance) {
   b44d6:	4c06      	ldr	r4, [pc, #24]	; (b44f0 <_ZN14VehicleCounter8instanceEv+0x1c>)
   b44d8:	6823      	ldr	r3, [r4, #0]
   b44da:	b933      	cbnz	r3, b44ea <_ZN14VehicleCounter8instanceEv+0x16>
        _instance = new VehicleCounter();
   b44dc:	2004      	movs	r0, #4
   b44de:	f7ff fdda 	bl	b4096 <_Znwj>
   b44e2:	b108      	cbz	r0, b44e8 <_ZN14VehicleCounter8instanceEv+0x14>
VehicleCounter::VehicleCounter() {
   b44e4:	4b03      	ldr	r3, [pc, #12]	; (b44f4 <_ZN14VehicleCounter8instanceEv+0x20>)
   b44e6:	6003      	str	r3, [r0, #0]
        _instance = new VehicleCounter();
   b44e8:	6020      	str	r0, [r4, #0]
}
   b44ea:	6820      	ldr	r0, [r4, #0]
   b44ec:	bd10      	pop	{r4, pc}
   b44ee:	bf00      	nop
   b44f0:	2003e68c 	.word	0x2003e68c
   b44f4:	000b6780 	.word	0x000b6780

000b44f8 <_ZN14VehicleCounter5setupEv>:


void VehicleCounter::setup(){
}
   b44f8:	4770      	bx	lr
	...

000b44fc <_ZN14VehicleCounter4loopEv>:

int VehicleCounter::loop(){     // updates vehicle count using MagSensor
        ++vehicleCount;
   b44fc:	4a04      	ldr	r2, [pc, #16]	; (b4510 <_ZN14VehicleCounter4loopEv+0x14>)
   b44fe:	6813      	ldr	r3, [r2, #0]
   b4500:	3301      	adds	r3, #1
   b4502:	6013      	str	r3, [r2, #0]
        ++totalVehicleCount;
   b4504:	4b03      	ldr	r3, [pc, #12]	; (b4514 <_ZN14VehicleCounter4loopEv+0x18>)
   b4506:	6818      	ldr	r0, [r3, #0]
   b4508:	3001      	adds	r0, #1
   b450a:	6018      	str	r0, [r3, #0]
        return totalVehicleCount;
}
   b450c:	4770      	bx	lr
   b450e:	bf00      	nop
   b4510:	2003e684 	.word	0x2003e684
   b4514:	2003e688 	.word	0x2003e688

000b4518 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <netdb_freeaddrinfo+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	689b      	ldr	r3, [r3, #8]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030268 	.word	0x00030268

000b4528 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <netdb_getaddrinfo+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	68db      	ldr	r3, [r3, #12]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030268 	.word	0x00030268

000b4538 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <HAL_Pin_Mode+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	689b      	ldr	r3, [r3, #8]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	0003022c 	.word	0x0003022c

000b4548 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <HAL_Get_Pin_Mode+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	68db      	ldr	r3, [r3, #12]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	0003022c 	.word	0x0003022c

000b4558 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <HAL_GPIO_Write+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	691b      	ldr	r3, [r3, #16]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	0003022c 	.word	0x0003022c

000b4568 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <HAL_RNG_GetRandomNumber+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	685b      	ldr	r3, [r3, #4]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030218 	.word	0x00030218

000b4578 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	695b      	ldr	r3, [r3, #20]
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030218 	.word	0x00030218

000b4588 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <os_mutex_recursive_create+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030248 	.word	0x00030248

000b4598 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <inet_inet_ntop+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	695b      	ldr	r3, [r3, #20]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	00030264 	.word	0x00030264

000b45a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <hal_usart_write+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	68db      	ldr	r3, [r3, #12]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003023c 	.word	0x0003023c

000b45b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <hal_usart_available+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	691b      	ldr	r3, [r3, #16]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	0003023c 	.word	0x0003023c

000b45c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <hal_usart_read+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	695b      	ldr	r3, [r3, #20]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	0003023c 	.word	0x0003023c

000b45d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <hal_usart_peek+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	699b      	ldr	r3, [r3, #24]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	0003023c 	.word	0x0003023c

000b45e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <hal_usart_flush+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	69db      	ldr	r3, [r3, #28]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	0003023c 	.word	0x0003023c

000b45f8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <hal_usart_is_enabled+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	6a1b      	ldr	r3, [r3, #32]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	0003023c 	.word	0x0003023c

000b4608 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <hal_usart_available_data_for_write+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	0003023c 	.word	0x0003023c

000b4618 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <hal_usart_begin_config+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	0003023c 	.word	0x0003023c

000b4628 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <hal_usart_init_ex+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	0003023c 	.word	0x0003023c

000b4638 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <hal_i2c_write+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	6a1b      	ldr	r3, [r3, #32]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030228 	.word	0x00030228

000b4648 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_i2c_available+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030228 	.word	0x00030228

000b4658 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <hal_i2c_read+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030228 	.word	0x00030228

000b4668 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <hal_i2c_peek+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030228 	.word	0x00030228

000b4678 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_i2c_flush+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	00030228 	.word	0x00030228

000b4688 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_i2c_is_enabled+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030228 	.word	0x00030228

000b4698 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_i2c_init+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030228 	.word	0x00030228

000b46a8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_spi_init+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	69db      	ldr	r3, [r3, #28]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030230 	.word	0x00030230

000b46b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <hal_spi_is_enabled+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6a1b      	ldr	r3, [r3, #32]
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030230 	.word	0x00030230

000b46c8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <HAL_USB_USART_Init+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	681b      	ldr	r3, [r3, #0]
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	0003024c 	.word	0x0003024c

000b46d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <HAL_USB_USART_Begin+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	685b      	ldr	r3, [r3, #4]
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	0003024c 	.word	0x0003024c

000b46e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <HAL_USB_USART_Available_Data+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	691b      	ldr	r3, [r3, #16]
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	0003024c 	.word	0x0003024c

000b46f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	695b      	ldr	r3, [r3, #20]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003024c 	.word	0x0003024c

000b4708 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <HAL_USB_USART_Receive_Data+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	699b      	ldr	r3, [r3, #24]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003024c 	.word	0x0003024c

000b4718 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <HAL_USB_USART_Send_Data+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	69db      	ldr	r3, [r3, #28]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003024c 	.word	0x0003024c

000b4728 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <HAL_USB_USART_Flush_Data+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6a1b      	ldr	r3, [r3, #32]
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003024c 	.word	0x0003024c

000b4738 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <HAL_USB_USART_Is_Connected+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	0003024c 	.word	0x0003024c

000b4748 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <set_system_mode+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	685b      	ldr	r3, [r3, #4]
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030220 	.word	0x00030220

000b4758 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <system_delay_ms+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	695b      	ldr	r3, [r3, #20]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030220 	.word	0x00030220

000b4768 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <system_thread_set_state+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030220 	.word	0x00030220

000b4778 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <application_thread_current+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030220 	.word	0x00030220

000b4788 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <application_thread_invoke+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030220 	.word	0x00030220

000b4798 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b03      	ldr	r3, [pc, #12]	; (b47a8 <system_ctrl_set_app_request_handler+0x10>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b47a2:	9301      	str	r3, [sp, #4]
   b47a4:	bd08      	pop	{r3, pc}
   b47a6:	0000      	.short	0x0000
   b47a8:	00030220 	.word	0x00030220

000b47ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b03      	ldr	r3, [pc, #12]	; (b47bc <system_ctrl_set_result+0x10>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b47b6:	9301      	str	r3, [sp, #4]
   b47b8:	bd08      	pop	{r3, pc}
   b47ba:	0000      	.short	0x0000
   b47bc:	00030220 	.word	0x00030220

000b47c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <network_connect+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	685b      	ldr	r3, [r3, #4]
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	00030240 	.word	0x00030240

000b47d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <network_connecting+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	689b      	ldr	r3, [r3, #8]
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	00030240 	.word	0x00030240

000b47e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <network_disconnect+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	68db      	ldr	r3, [r3, #12]
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	00030240 	.word	0x00030240

000b47f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <network_ready+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	691b      	ldr	r3, [r3, #16]
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	00030240 	.word	0x00030240

000b4800 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <network_on+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	695b      	ldr	r3, [r3, #20]
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	00030240 	.word	0x00030240

000b4810 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <network_off+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	699b      	ldr	r3, [r3, #24]
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	00030240 	.word	0x00030240

000b4820 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <network_listen+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	69db      	ldr	r3, [r3, #28]
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	00030240 	.word	0x00030240

000b4830 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <network_listening+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	6a1b      	ldr	r3, [r3, #32]
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	00030240 	.word	0x00030240

000b4840 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <network_set_listen_timeout+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	00030240 	.word	0x00030240

000b4850 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <network_get_listen_timeout+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	00030240 	.word	0x00030240

000b4860 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <network_is_on+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	00030240 	.word	0x00030240

000b4870 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <network_is_off+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	00030240 	.word	0x00030240

000b4880 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <spark_process+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	689b      	ldr	r3, [r3, #8]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	00030244 	.word	0x00030244

000b4890 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <spark_cloud_flag_connected+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	695b      	ldr	r3, [r3, #20]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030244 	.word	0x00030244

000b48a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <spark_send_event+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	6a1b      	ldr	r3, [r3, #32]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030244 	.word	0x00030244

000b48b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <spark_set_random_seed_from_cloud_handler+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030244 	.word	0x00030244

000b48c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <malloc+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	681b      	ldr	r3, [r3, #0]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	0003021c 	.word	0x0003021c

000b48d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <free+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	685b      	ldr	r3, [r3, #4]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	0003021c 	.word	0x0003021c

000b48e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <realloc+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	689b      	ldr	r3, [r3, #8]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	0003021c 	.word	0x0003021c

000b48f0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <vsnprintf+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	0003021c 	.word	0x0003021c

000b4900 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <abort+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	0003021c 	.word	0x0003021c

000b4910 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <_malloc_r+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	0003021c 	.word	0x0003021c

000b4920 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <__assert_func+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	0003021c 	.word	0x0003021c

000b4930 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <newlib_impure_ptr_callback+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	0003021c 	.word	0x0003021c

000b4940 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4940:	2200      	movs	r2, #0
   b4942:	6840      	ldr	r0, [r0, #4]
   b4944:	4611      	mov	r1, r2
   b4946:	f7ff bf73 	b.w	b4830 <network_listening>

000b494a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b494a:	2200      	movs	r2, #0
   b494c:	6840      	ldr	r0, [r0, #4]
   b494e:	4611      	mov	r1, r2
   b4950:	f7ff bf7e 	b.w	b4850 <network_get_listen_timeout>

000b4954 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4954:	6840      	ldr	r0, [r0, #4]
   b4956:	2200      	movs	r2, #0
   b4958:	f7ff bf72 	b.w	b4840 <network_set_listen_timeout>

000b495c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b495c:	6840      	ldr	r0, [r0, #4]
   b495e:	2200      	movs	r2, #0
   b4960:	f081 0101 	eor.w	r1, r1, #1
   b4964:	f7ff bf5c 	b.w	b4820 <network_listen>

000b4968 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4968:	2300      	movs	r3, #0
   b496a:	6840      	ldr	r0, [r0, #4]
   b496c:	461a      	mov	r2, r3
   b496e:	4619      	mov	r1, r3
   b4970:	f7ff bf4e 	b.w	b4810 <network_off>

000b4974 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4974:	2300      	movs	r3, #0
   b4976:	6840      	ldr	r0, [r0, #4]
   b4978:	461a      	mov	r2, r3
   b497a:	4619      	mov	r1, r3
   b497c:	f7ff bf40 	b.w	b4800 <network_on>

000b4980 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4980:	2200      	movs	r2, #0
   b4982:	6840      	ldr	r0, [r0, #4]
   b4984:	4611      	mov	r1, r2
   b4986:	f7ff bf33 	b.w	b47f0 <network_ready>

000b498a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b498a:	2200      	movs	r2, #0
   b498c:	6840      	ldr	r0, [r0, #4]
   b498e:	4611      	mov	r1, r2
   b4990:	f7ff bf1e 	b.w	b47d0 <network_connecting>

000b4994 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4994:	6840      	ldr	r0, [r0, #4]
   b4996:	2200      	movs	r2, #0
   b4998:	2102      	movs	r1, #2
   b499a:	f7ff bf21 	b.w	b47e0 <network_disconnect>

000b499e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b499e:	2300      	movs	r3, #0
   b49a0:	6840      	ldr	r0, [r0, #4]
   b49a2:	461a      	mov	r2, r3
   b49a4:	f7ff bf0c 	b.w	b47c0 <network_connect>

000b49a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b49a8:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b49aa:	2203      	movs	r2, #3
   b49ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b49ae:	4a02      	ldr	r2, [pc, #8]	; (b49b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b49b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b49b2:	4770      	bx	lr
   b49b4:	2003e690 	.word	0x2003e690
   b49b8:	000b6790 	.word	0x000b6790

000b49bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b49bc:	b510      	push	{r4, lr}
   b49be:	4604      	mov	r4, r0
   b49c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b49c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b49c4:	f7ff fe70 	bl	b46a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b49c8:	2300      	movs	r3, #0
   b49ca:	6063      	str	r3, [r4, #4]
}
   b49cc:	4620      	mov	r0, r4
   b49ce:	bd10      	pop	{r4, pc}

000b49d0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b49d0:	4b05      	ldr	r3, [pc, #20]	; (b49e8 <_GLOBAL__sub_I_System+0x18>)
   b49d2:	2202      	movs	r2, #2
   b49d4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b49d6:	4b05      	ldr	r3, [pc, #20]	; (b49ec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b49d8:	4a05      	ldr	r2, [pc, #20]	; (b49f0 <_GLOBAL__sub_I_System+0x20>)
   b49da:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b49dc:	2000      	movs	r0, #0
   b49de:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b49e2:	f7ff beb1 	b.w	b4748 <set_system_mode>
   b49e6:	bf00      	nop
   b49e8:	2003e6a4 	.word	0x2003e6a4
   b49ec:	2003e698 	.word	0x2003e698
   b49f0:	ffff0000 	.word	0xffff0000

000b49f4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b49f4:	b510      	push	{r4, lr}
   b49f6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b49f8:	f001 fded 	bl	b65d6 <strlen>
   b49fc:	3801      	subs	r0, #1
   b49fe:	1823      	adds	r3, r4, r0
   b4a00:	4620      	mov	r0, r4
	while(i<j){
   b4a02:	4283      	cmp	r3, r0
   b4a04:	d906      	bls.n	b4a14 <_Z11str_reversePc+0x20>
		c = *i;
   b4a06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4a08:	7819      	ldrb	r1, [r3, #0]
   b4a0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b4a0e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4a12:	e7f6      	b.n	b4a02 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4a14:	bd10      	pop	{r4, pc}

000b4a16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4a16:	b570      	push	{r4, r5, r6, lr}
   b4a18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b4a1a:	1e91      	subs	r1, r2, #2
   b4a1c:	2922      	cmp	r1, #34	; 0x22
   b4a1e:	d81d      	bhi.n	b4a5c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b4a20:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b4a22:	b930      	cbnz	r0, b4a32 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b4a24:	4423      	add	r3, r4
            *ptr++ = '0';
   b4a26:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b4a28:	429d      	cmp	r5, r3
   b4a2a:	d210      	bcs.n	b4a4e <ultoa+0x38>
            *ptr++ = '0';
   b4a2c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4a30:	e7fa      	b.n	b4a28 <ultoa+0x12>
            result.quot = a/radix;
   b4a32:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4a36:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b4a3a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b4a3c:	2809      	cmp	r0, #9
                *ptr += '0';
   b4a3e:	bf94      	ite	ls
   b4a40:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4a42:	3157      	addhi	r1, #87	; 0x57
   b4a44:	b2c9      	uxtb	r1, r1
   b4a46:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b4a4a:	4630      	mov	r0, r6
	while(a){
   b4a4c:	e7e9      	b.n	b4a22 <ultoa+0xc>

	*ptr = '\0';
   b4a4e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4a50:	4620      	mov	r0, r4
	*ptr = '\0';
   b4a52:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4a54:	f7ff ffce 	bl	b49f4 <_Z11str_reversePc>
	return buffer;
   b4a58:	4620      	mov	r0, r4
}
   b4a5a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4a5c:	2000      	movs	r0, #0
   b4a5e:	e7fc      	b.n	b4a5a <ultoa+0x44>

000b4a60 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4a60:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b4a62:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4a64:	460c      	mov	r4, r1
   b4a66:	4615      	mov	r5, r2
	if(a<0){
   b4a68:	da0e      	bge.n	b4a88 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b4a6e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4a72:	bf14      	ite	ne
   b4a74:	4258      	negne	r0, r3
   b4a76:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b4a78:	2301      	movs	r3, #1
		*buffer = '-';
   b4a7a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b4a7c:	462a      	mov	r2, r5
   b4a7e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b4a80:	f7ff ffc9 	bl	b4a16 <ultoa>
	}
	return buffer;
}
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4a88:	2301      	movs	r3, #1
   b4a8a:	e7f9      	b.n	b4a80 <itoa+0x20>

000b4a8c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4a8c:	b510      	push	{r4, lr}
   b4a8e:	4604      	mov	r4, r0
{
	free(buffer);
   b4a90:	6800      	ldr	r0, [r0, #0]
   b4a92:	f7ff ff1d 	bl	b48d0 <free>
}
   b4a96:	4620      	mov	r0, r4
   b4a98:	bd10      	pop	{r4, pc}

000b4a9a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4a9a:	b510      	push	{r4, lr}
   b4a9c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4a9e:	6800      	ldr	r0, [r0, #0]
   b4aa0:	b108      	cbz	r0, b4aa6 <_ZN6String10invalidateEv+0xc>
   b4aa2:	f7ff ff15 	bl	b48d0 <free>
	buffer = NULL;
   b4aa6:	2300      	movs	r3, #0
	capacity = len = 0;
   b4aa8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4aac:	6023      	str	r3, [r4, #0]
}
   b4aae:	bd10      	pop	{r4, pc}

000b4ab0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4ab0:	b538      	push	{r3, r4, r5, lr}
   b4ab2:	4604      	mov	r4, r0
   b4ab4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4ab6:	6800      	ldr	r0, [r0, #0]
   b4ab8:	3101      	adds	r1, #1
   b4aba:	f7ff ff11 	bl	b48e0 <realloc>
	if (newbuffer) {
   b4abe:	b110      	cbz	r0, b4ac6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4ac0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4ac4:	2001      	movs	r0, #1
	}
	return 0;
}
   b4ac6:	bd38      	pop	{r3, r4, r5, pc}

000b4ac8 <_ZN6String7reserveEj>:
{
   b4ac8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4aca:	6803      	ldr	r3, [r0, #0]
{
   b4acc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4ace:	b123      	cbz	r3, b4ada <_ZN6String7reserveEj+0x12>
   b4ad0:	6843      	ldr	r3, [r0, #4]
   b4ad2:	428b      	cmp	r3, r1
   b4ad4:	d301      	bcc.n	b4ada <_ZN6String7reserveEj+0x12>
   b4ad6:	2001      	movs	r0, #1
}
   b4ad8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff ffe8 	bl	b4ab0 <_ZN6String12changeBufferEj>
   b4ae0:	2800      	cmp	r0, #0
   b4ae2:	d0f9      	beq.n	b4ad8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4ae4:	68a3      	ldr	r3, [r4, #8]
   b4ae6:	2b00      	cmp	r3, #0
   b4ae8:	d1f5      	bne.n	b4ad6 <_ZN6String7reserveEj+0xe>
   b4aea:	6822      	ldr	r2, [r4, #0]
   b4aec:	7013      	strb	r3, [r2, #0]
   b4aee:	e7f2      	b.n	b4ad6 <_ZN6String7reserveEj+0xe>

000b4af0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4af2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4af4:	4611      	mov	r1, r2
   b4af6:	9201      	str	r2, [sp, #4]
{
   b4af8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4afa:	f7ff ffe5 	bl	b4ac8 <_ZN6String7reserveEj>
   b4afe:	9a01      	ldr	r2, [sp, #4]
   b4b00:	b928      	cbnz	r0, b4b0e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4b02:	4620      	mov	r0, r4
   b4b04:	f7ff ffc9 	bl	b4a9a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4b08:	4620      	mov	r0, r4
   b4b0a:	b003      	add	sp, #12
   b4b0c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4b0e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4b10:	4629      	mov	r1, r5
   b4b12:	6820      	ldr	r0, [r4, #0]
   b4b14:	f001 fcf6 	bl	b6504 <memcpy>
	buffer[len] = 0;
   b4b18:	6822      	ldr	r2, [r4, #0]
   b4b1a:	68a3      	ldr	r3, [r4, #8]
   b4b1c:	2100      	movs	r1, #0
   b4b1e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4b20:	e7f2      	b.n	b4b08 <_ZN6String4copyEPKcj+0x18>

000b4b22 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4b22:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4b24:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4b26:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4b2a:	4604      	mov	r4, r0
	len = 0;
   b4b2c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4b2e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4b30:	b141      	cbz	r1, b4b44 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4b32:	4608      	mov	r0, r1
   b4b34:	9101      	str	r1, [sp, #4]
   b4b36:	f001 fd4e 	bl	b65d6 <strlen>
   b4b3a:	9901      	ldr	r1, [sp, #4]
   b4b3c:	4602      	mov	r2, r0
   b4b3e:	4620      	mov	r0, r4
   b4b40:	f7ff ffd6 	bl	b4af0 <_ZN6String4copyEPKcj>
}
   b4b44:	4620      	mov	r0, r4
   b4b46:	b002      	add	sp, #8
   b4b48:	bd10      	pop	{r4, pc}

000b4b4a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4b4a:	b513      	push	{r0, r1, r4, lr}
   b4b4c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4b4e:	b159      	cbz	r1, b4b68 <_ZN6StringaSEPKc+0x1e>
   b4b50:	4608      	mov	r0, r1
   b4b52:	9101      	str	r1, [sp, #4]
   b4b54:	f001 fd3f 	bl	b65d6 <strlen>
   b4b58:	9901      	ldr	r1, [sp, #4]
   b4b5a:	4602      	mov	r2, r0
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	f7ff ffc7 	bl	b4af0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4b62:	4620      	mov	r0, r4
   b4b64:	b002      	add	sp, #8
   b4b66:	bd10      	pop	{r4, pc}
	else invalidate();
   b4b68:	f7ff ff97 	bl	b4a9a <_ZN6String10invalidateEv>
   b4b6c:	e7f9      	b.n	b4b62 <_ZN6StringaSEPKc+0x18>

000b4b6e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b4b6e:	b510      	push	{r4, lr}
   b4b70:	4604      	mov	r4, r0
   b4b72:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b4b74:	2300      	movs	r3, #0
	capacity = 0;
   b4b76:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b4b7a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b4b7c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b4b7e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b4b80:	a901      	add	r1, sp, #4
   b4b82:	f7ff ff6d 	bl	b4a60 <itoa>
	*this = buf;
   b4b86:	a901      	add	r1, sp, #4
   b4b88:	4620      	mov	r0, r4
   b4b8a:	f7ff ffde 	bl	b4b4a <_ZN6StringaSEPKc>
}
   b4b8e:	4620      	mov	r0, r4
   b4b90:	b00a      	add	sp, #40	; 0x28
   b4b92:	bd10      	pop	{r4, pc}

000b4b94 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4b94:	b570      	push	{r4, r5, r6, lr}
   b4b96:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4b98:	460e      	mov	r6, r1
   b4b9a:	b909      	cbnz	r1, b4ba0 <_ZN6String6concatEPKcj+0xc>
   b4b9c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4b9e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4ba0:	b16a      	cbz	r2, b4bbe <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4ba2:	6884      	ldr	r4, [r0, #8]
   b4ba4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4ba6:	4621      	mov	r1, r4
   b4ba8:	f7ff ff8e 	bl	b4ac8 <_ZN6String7reserveEj>
   b4bac:	2800      	cmp	r0, #0
   b4bae:	d0f5      	beq.n	b4b9c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4bb0:	6828      	ldr	r0, [r5, #0]
   b4bb2:	68ab      	ldr	r3, [r5, #8]
   b4bb4:	4631      	mov	r1, r6
   b4bb6:	4418      	add	r0, r3
   b4bb8:	f001 fce8 	bl	b658c <strcpy>
	len = newlen;
   b4bbc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4bbe:	2001      	movs	r0, #1
   b4bc0:	e7ed      	b.n	b4b9e <_ZN6String6concatEPKcj+0xa>

000b4bc2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4bc2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4bc4:	2300      	movs	r3, #0
	buf[0] = c;
   b4bc6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4bca:	2201      	movs	r2, #1
   b4bcc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4bce:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4bd2:	f7ff ffdf 	bl	b4b94 <_ZN6String6concatEPKcj>
}
   b4bd6:	b003      	add	sp, #12
   b4bd8:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bdc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b4bdc:	b40e      	push	{r1, r2, r3}
   b4bde:	b570      	push	{r4, r5, r6, lr}
   b4be0:	b087      	sub	sp, #28
   b4be2:	ad0b      	add	r5, sp, #44	; 0x2c
   b4be4:	4604      	mov	r4, r0
   b4be6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4bea:	9201      	str	r2, [sp, #4]
   b4bec:	462b      	mov	r3, r5
   b4bee:	2105      	movs	r1, #5
   b4bf0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b4bf2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4bf4:	f7ff fe7c 	bl	b48f0 <vsnprintf>
    va_end(marker);

    String result;
   b4bf8:	490b      	ldr	r1, [pc, #44]	; (b4c28 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4bfa:	4606      	mov	r6, r0
    String result;
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f7ff ff90 	bl	b4b22 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b4c02:	4631      	mov	r1, r6
   b4c04:	4620      	mov	r0, r4
   b4c06:	f7ff ff5f 	bl	b4ac8 <_ZN6String7reserveEj>
    if (result.buffer) {
   b4c0a:	6820      	ldr	r0, [r4, #0]
   b4c0c:	b130      	cbz	r0, b4c1c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4c0e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b4c10:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4c12:	462b      	mov	r3, r5
   b4c14:	1c71      	adds	r1, r6, #1
   b4c16:	f7ff fe6b 	bl	b48f0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b4c1a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	b007      	add	sp, #28
   b4c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4c24:	b003      	add	sp, #12
   b4c26:	4770      	bx	lr
   b4c28:	000b675d 	.word	0x000b675d

000b4c2c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4c2c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4c2e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4c30:	4604      	mov	r4, r0
      if (_M_manager)
   b4c32:	b113      	cbz	r3, b4c3a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c34:	2203      	movs	r2, #3
   b4c36:	4601      	mov	r1, r0
   b4c38:	4798      	blx	r3
    }
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	bd10      	pop	{r4, pc}

000b4c3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4c3e:	b513      	push	{r0, r1, r4, lr}
   b4c40:	460b      	mov	r3, r1
   b4c42:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c44:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4c48:	466c      	mov	r4, sp
   b4c4a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4c4e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4c52:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c56:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4c5a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4c5e:	b002      	add	sp, #8
   b4c60:	bd10      	pop	{r4, pc}
	...

000b4c64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4c64:	4802      	ldr	r0, [pc, #8]	; (b4c70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4c66:	2300      	movs	r3, #0
   b4c68:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4c6a:	f7ff bc8d 	b.w	b4588 <os_mutex_recursive_create>
   b4c6e:	bf00      	nop
   b4c70:	2003e6a8 	.word	0x2003e6a8

000b4c74 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c76:	4606      	mov	r6, r0
   b4c78:	460d      	mov	r5, r1
  size_t n = 0;
   b4c7a:	188f      	adds	r7, r1, r2
   b4c7c:	2400      	movs	r4, #0
  while (size--) {
   b4c7e:	42bd      	cmp	r5, r7
   b4c80:	d00c      	beq.n	b4c9c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4c82:	6833      	ldr	r3, [r6, #0]
   b4c84:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c88:	689b      	ldr	r3, [r3, #8]
   b4c8a:	4630      	mov	r0, r6
   b4c8c:	4798      	blx	r3
     if (chunk>=0)
   b4c8e:	1e03      	subs	r3, r0, #0
   b4c90:	db01      	blt.n	b4c96 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4c92:	441c      	add	r4, r3
  while (size--) {
   b4c94:	e7f3      	b.n	b4c7e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4c96:	2c00      	cmp	r4, #0
   b4c98:	bf08      	it	eq
   b4c9a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ca0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4ca0:	b513      	push	{r0, r1, r4, lr}
   b4ca2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4ca4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ca6:	b159      	cbz	r1, b4cc0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ca8:	9101      	str	r1, [sp, #4]
   b4caa:	f001 fc94 	bl	b65d6 <strlen>
   b4cae:	6823      	ldr	r3, [r4, #0]
   b4cb0:	9901      	ldr	r1, [sp, #4]
   b4cb2:	68db      	ldr	r3, [r3, #12]
   b4cb4:	4602      	mov	r2, r0
   b4cb6:	4620      	mov	r0, r4
    }
   b4cb8:	b002      	add	sp, #8
   b4cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4cbe:	4718      	bx	r3
    }
   b4cc0:	b002      	add	sp, #8
   b4cc2:	bd10      	pop	{r4, pc}

000b4cc4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4cc4:	6803      	ldr	r3, [r0, #0]
   b4cc6:	689b      	ldr	r3, [r3, #8]
   b4cc8:	4718      	bx	r3

000b4cca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4cca:	b530      	push	{r4, r5, lr}
   b4ccc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4cce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4cd0:	2a01      	cmp	r2, #1
  *str = '\0';
   b4cd2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4cd6:	bf98      	it	ls
   b4cd8:	220a      	movls	r2, #10
   b4cda:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4cdc:	460d      	mov	r5, r1
   b4cde:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4ce2:	fb01 5312 	mls	r3, r1, r2, r5
   b4ce6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4cea:	2b09      	cmp	r3, #9
   b4cec:	bf94      	ite	ls
   b4cee:	3330      	addls	r3, #48	; 0x30
   b4cf0:	3337      	addhi	r3, #55	; 0x37
   b4cf2:	b2db      	uxtb	r3, r3
  } while(n);
   b4cf4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4cf6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4cfa:	d9ef      	bls.n	b4cdc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4cfc:	4621      	mov	r1, r4
   b4cfe:	f7ff ffcf 	bl	b4ca0 <_ZN5Print5writeEPKc>
}
   b4d02:	b00b      	add	sp, #44	; 0x2c
   b4d04:	bd30      	pop	{r4, r5, pc}

000b4d06 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4d06:	b510      	push	{r4, lr}
   b4d08:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4d0a:	f7ff fc35 	bl	b4578 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4d0e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4d10:	6823      	ldr	r3, [r4, #0]
   b4d12:	4620      	mov	r0, r4
   b4d14:	695b      	ldr	r3, [r3, #20]
   b4d16:	4798      	blx	r3
    if (c >= 0) return c;
   b4d18:	2800      	cmp	r0, #0
   b4d1a:	da08      	bge.n	b4d2e <_ZN6Stream9timedReadEv+0x28>
   b4d1c:	f7ff fc2c 	bl	b4578 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4d20:	68e3      	ldr	r3, [r4, #12]
   b4d22:	1ac0      	subs	r0, r0, r3
   b4d24:	68a3      	ldr	r3, [r4, #8]
   b4d26:	4298      	cmp	r0, r3
   b4d28:	d3f2      	bcc.n	b4d10 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4d2a:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4d2e:	bd10      	pop	{r4, pc}

000b4d30 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   b4d30:	b510      	push	{r4, lr}
   b4d32:	4604      	mov	r4, r0
   b4d34:	f7ff fc20 	bl	b4578 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4d38:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   b4d3a:	6823      	ldr	r3, [r4, #0]
   b4d3c:	4620      	mov	r0, r4
   b4d3e:	699b      	ldr	r3, [r3, #24]
   b4d40:	4798      	blx	r3
    if (c >= 0) return c;
   b4d42:	2800      	cmp	r0, #0
   b4d44:	da08      	bge.n	b4d58 <_ZN6Stream9timedPeekEv+0x28>
   b4d46:	f7ff fc17 	bl	b4578 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4d4a:	68e3      	ldr	r3, [r4, #12]
   b4d4c:	1ac0      	subs	r0, r0, r3
   b4d4e:	68a3      	ldr	r3, [r4, #8]
   b4d50:	4298      	cmp	r0, r3
   b4d52:	d3f2      	bcc.n	b4d3a <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   b4d54:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4d58:	bd10      	pop	{r4, pc}

000b4d5a <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   b4d5a:	b510      	push	{r4, lr}
   b4d5c:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   b4d5e:	4620      	mov	r0, r4
   b4d60:	f7ff ffe6 	bl	b4d30 <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   b4d64:	2800      	cmp	r0, #0
   b4d66:	db0a      	blt.n	b4d7e <_ZN6Stream13peekNextDigitEv+0x24>
   b4d68:	282d      	cmp	r0, #45	; 0x2d
   b4d6a:	d008      	beq.n	b4d7e <_ZN6Stream13peekNextDigitEv+0x24>
   b4d6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d70:	2b09      	cmp	r3, #9
   b4d72:	d904      	bls.n	b4d7e <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   b4d74:	6823      	ldr	r3, [r4, #0]
   b4d76:	4620      	mov	r0, r4
   b4d78:	695b      	ldr	r3, [r3, #20]
   b4d7a:	4798      	blx	r3
    c = timedPeek();
   b4d7c:	e7ef      	b.n	b4d5e <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   b4d7e:	bd10      	pop	{r4, pc}

000b4d80 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   b4d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d84:	4605      	mov	r5, r0
   b4d86:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   b4d88:	f7ff ffe7 	bl	b4d5a <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4d8c:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   b4d8e:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   b4d92:	db1c      	blt.n	b4dce <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   b4d94:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   b4d96:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   b4d9a:	4286      	cmp	r6, r0
   b4d9c:	d008      	beq.n	b4db0 <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   b4d9e:	282d      	cmp	r0, #45	; 0x2d
   b4da0:	d018      	beq.n	b4dd4 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   b4da2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4da6:	2b09      	cmp	r3, #9
   b4da8:	d802      	bhi.n	b4db0 <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   b4daa:	fb08 0404 	mla	r4, r8, r4, r0
   b4dae:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   b4db0:	682b      	ldr	r3, [r5, #0]
   b4db2:	4628      	mov	r0, r5
   b4db4:	695b      	ldr	r3, [r3, #20]
   b4db6:	4798      	blx	r3
    c = timedPeek();
   b4db8:	4628      	mov	r0, r5
   b4dba:	f7ff ffb9 	bl	b4d30 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   b4dbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4dc2:	2b09      	cmp	r3, #9
   b4dc4:	d9e9      	bls.n	b4d9a <_ZN6Stream8parseIntEc+0x1a>
   b4dc6:	4286      	cmp	r6, r0
   b4dc8:	d0f2      	beq.n	b4db0 <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   b4dca:	b107      	cbz	r7, b4dce <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   b4dcc:	4264      	negs	r4, r4
  return value;
}
   b4dce:	4620      	mov	r0, r4
   b4dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   b4dd4:	2701      	movs	r7, #1
   b4dd6:	e7eb      	b.n	b4db0 <_ZN6Stream8parseIntEc+0x30>

000b4dd8 <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   b4dd8:	2101      	movs	r1, #1
   b4dda:	f7ff bfd1 	b.w	b4d80 <_ZN6Stream8parseIntEc>
	...

000b4de0 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   b4de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4de4:	ed2d 8b02 	vpush	{d8}
   b4de8:	4605      	mov	r5, r0
   b4dea:	460e      	mov	r6, r1
  bool isNegative = false;
  bool isFraction = false;
  long value = 0;
  float fraction = 1.0;

  int c = peekNextDigit();
   b4dec:	f7ff ffb5 	bl	b4d5a <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4df0:	2800      	cmp	r0, #0
   b4df2:	db47      	blt.n	b4e84 <_ZN6Stream10parseFloatEc+0xa4>
    } else if (c == '.') {
      isFraction = true;
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
   b4df4:	f20f 099c 	addw	r9, pc, #156	; 0x9c
   b4df8:	e9d9 8900 	ldrd	r8, r9, [r9]
  long value = 0;
   b4dfc:	2400      	movs	r4, #0
  float fraction = 1.0;
   b4dfe:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  bool isFraction = false;
   b4e02:	4627      	mov	r7, r4
  bool isNegative = false;
   b4e04:	46a2      	mov	sl, r4
      value = value * 10 + c - '0';
   b4e06:	f04f 0b0a 	mov.w	fp, #10
    if(c == skipChar) {
   b4e0a:	4286      	cmp	r6, r0
   b4e0c:	d017      	beq.n	b4e3e <_ZN6Stream10parseFloatEc+0x5e>
    } else if(c == '-') {
   b4e0e:	282d      	cmp	r0, #45	; 0x2d
   b4e10:	d033      	beq.n	b4e7a <_ZN6Stream10parseFloatEc+0x9a>
    } else if (c == '.') {
   b4e12:	282e      	cmp	r0, #46	; 0x2e
   b4e14:	d034      	beq.n	b4e80 <_ZN6Stream10parseFloatEc+0xa0>
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
   b4e16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4e1a:	2b09      	cmp	r3, #9
   b4e1c:	d80f      	bhi.n	b4e3e <_ZN6Stream10parseFloatEc+0x5e>
      value = value * 10 + c - '0';
   b4e1e:	fb0b 0404 	mla	r4, fp, r4, r0
   b4e22:	3c30      	subs	r4, #48	; 0x30
      if(isFraction)
   b4e24:	b15f      	cbz	r7, b4e3e <_ZN6Stream10parseFloatEc+0x5e>
         fraction *= 0.1;
   b4e26:	ee18 0a10 	vmov	r0, s16
   b4e2a:	f001 f8ab 	bl	b5f84 <__aeabi_f2d>
   b4e2e:	4642      	mov	r2, r8
   b4e30:	464b      	mov	r3, r9
   b4e32:	f001 f8ff 	bl	b6034 <__aeabi_dmul>
   b4e36:	f001 fb0f 	bl	b6458 <__aeabi_d2f>
   b4e3a:	ee08 0a10 	vmov	s16, r0
    }
    read();  // consume the character we got with peek
   b4e3e:	682b      	ldr	r3, [r5, #0]
   b4e40:	4628      	mov	r0, r5
   b4e42:	695b      	ldr	r3, [r3, #20]
   b4e44:	4798      	blx	r3
    c = timedPeek();
   b4e46:	4628      	mov	r0, r5
   b4e48:	f7ff ff72 	bl	b4d30 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
   b4e4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4e50:	2b09      	cmp	r3, #9
   b4e52:	d9da      	bls.n	b4e0a <_ZN6Stream10parseFloatEc+0x2a>
   b4e54:	282e      	cmp	r0, #46	; 0x2e
   b4e56:	d0d8      	beq.n	b4e0a <_ZN6Stream10parseFloatEc+0x2a>
   b4e58:	4286      	cmp	r6, r0
   b4e5a:	d0f0      	beq.n	b4e3e <_ZN6Stream10parseFloatEc+0x5e>

  if(isNegative)
   b4e5c:	f1ba 0f00 	cmp.w	sl, #0
   b4e60:	d000      	beq.n	b4e64 <_ZN6Stream10parseFloatEc+0x84>
    value = -value;
   b4e62:	4264      	negs	r4, r4
  if(isFraction)
    return value * fraction;
   b4e64:	ee07 4a90 	vmov	s15, r4
   b4e68:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  if(isFraction)
   b4e6c:	b10f      	cbz	r7, b4e72 <_ZN6Stream10parseFloatEc+0x92>
    return value * fraction;
   b4e6e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
   b4e72:	ecbd 8b02 	vpop	{d8}
   b4e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      isNegative = true;
   b4e7a:	f04f 0a01 	mov.w	sl, #1
   b4e7e:	e7de      	b.n	b4e3e <_ZN6Stream10parseFloatEc+0x5e>
      isFraction = true;
   b4e80:	2701      	movs	r7, #1
   b4e82:	e7dc      	b.n	b4e3e <_ZN6Stream10parseFloatEc+0x5e>
    return 0; // zero returned if timeout
   b4e84:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4e90 <_ZN6Stream10parseFloatEc+0xb0>
   b4e88:	e7f3      	b.n	b4e72 <_ZN6Stream10parseFloatEc+0x92>
   b4e8a:	bf00      	nop
   b4e8c:	f3af 8000 	nop.w
   b4e90:	00000000 	.word	0x00000000
   b4e94:	9999999a 	.word	0x9999999a
   b4e98:	3fb99999 	.word	0x3fb99999

000b4e9c <_ZN6Stream10parseFloatEv>:
  return parseFloat(NO_SKIP_CHAR);
   b4e9c:	2101      	movs	r1, #1
   b4e9e:	f7ff bf9f 	b.w	b4de0 <_ZN6Stream10parseFloatEc>
	...

000b4ea4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b4ea4:	b570      	push	{r4, r5, r6, lr}
   b4ea6:	460d      	mov	r5, r1
  String ret;
   b4ea8:	4909      	ldr	r1, [pc, #36]	; (b4ed0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b4eaa:	4604      	mov	r4, r0
   b4eac:	4616      	mov	r6, r2
  String ret;
   b4eae:	f7ff fe38 	bl	b4b22 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4eb2:	4628      	mov	r0, r5
   b4eb4:	f7ff ff27 	bl	b4d06 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b4eb8:	2800      	cmp	r0, #0
   b4eba:	db06      	blt.n	b4eca <_ZN6Stream15readStringUntilEc+0x26>
   b4ebc:	4286      	cmp	r6, r0
   b4ebe:	d004      	beq.n	b4eca <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4ec0:	b2c1      	uxtb	r1, r0
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	f7ff fe7d 	bl	b4bc2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4ec8:	e7f3      	b.n	b4eb2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b4eca:	4620      	mov	r0, r4
   b4ecc:	bd70      	pop	{r4, r5, r6, pc}
   b4ece:	bf00      	nop
   b4ed0:	000b675d 	.word	0x000b675d

000b4ed4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ed4:	4b01      	ldr	r3, [pc, #4]	; (b4edc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ed6:	4a02      	ldr	r2, [pc, #8]	; (b4ee0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ed8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4eda:	4770      	bx	lr
   b4edc:	2003e6ac 	.word	0x2003e6ac
   b4ee0:	000b67c4 	.word	0x000b67c4

000b4ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4ee4:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4ee6:	681a      	ldr	r2, [r3, #0]
   b4ee8:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4eea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4eec:	4770      	bx	lr
   b4eee:	bf00      	nop
   b4ef0:	2003e5b8 	.word	0x2003e5b8
   b4ef4:	2003e6b0 	.word	0x2003e6b0

000b4ef8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ef8:	2100      	movs	r1, #0
   b4efa:	f7ff bc2d 	b.w	b4758 <system_delay_ms>
	...

000b4f00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4f00:	4b01      	ldr	r3, [pc, #4]	; (b4f08 <_GLOBAL__sub_I_RGB+0x8>)
   b4f02:	2200      	movs	r2, #0
   b4f04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f06:	4770      	bx	lr
   b4f08:	2003e6b4 	.word	0x2003e6b4

000b4f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4f0c:	4b01      	ldr	r3, [pc, #4]	; (b4f14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4f0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4f10:	4770      	bx	lr
   b4f12:	bf00      	nop
   b4f14:	2003e5bc 	.word	0x2003e5bc

000b4f18 <serialEventRun>:
{
   b4f18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4f1a:	4b0b      	ldr	r3, [pc, #44]	; (b4f48 <serialEventRun+0x30>)
   b4f1c:	b143      	cbz	r3, b4f30 <serialEventRun+0x18>
   b4f1e:	f000 fc03 	bl	b5728 <_Z16_fetch_usbserialv>
   b4f22:	6803      	ldr	r3, [r0, #0]
   b4f24:	691b      	ldr	r3, [r3, #16]
   b4f26:	4798      	blx	r3
   b4f28:	2800      	cmp	r0, #0
   b4f2a:	dd01      	ble.n	b4f30 <serialEventRun+0x18>
        serialEvent();
   b4f2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4f30:	4b06      	ldr	r3, [pc, #24]	; (b4f4c <serialEventRun+0x34>)
   b4f32:	b143      	cbz	r3, b4f46 <serialEventRun+0x2e>
   b4f34:	f000 fe58 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b4f38:	6803      	ldr	r3, [r0, #0]
   b4f3a:	691b      	ldr	r3, [r3, #16]
   b4f3c:	4798      	blx	r3
   b4f3e:	2800      	cmp	r0, #0
   b4f40:	dd01      	ble.n	b4f46 <serialEventRun+0x2e>
        serialEvent1();
   b4f42:	f3af 8000 	nop.w
}
   b4f46:	bd08      	pop	{r3, pc}
	...

000b4f50 <_post_loop>:
{
   b4f50:	b508      	push	{r3, lr}
	serialEventRun();
   b4f52:	f7ff ffe1 	bl	b4f18 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4f56:	f7ff fb0f 	bl	b4578 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f5a:	4b01      	ldr	r3, [pc, #4]	; (b4f60 <_post_loop+0x10>)
   b4f5c:	6018      	str	r0, [r3, #0]
}
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	2003e740 	.word	0x2003e740

000b4f64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f64:	4805      	ldr	r0, [pc, #20]	; (b4f7c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4f66:	4a06      	ldr	r2, [pc, #24]	; (b4f80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4f68:	4906      	ldr	r1, [pc, #24]	; (b4f84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4f6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f6c:	1a12      	subs	r2, r2, r0
   b4f6e:	f001 fac9 	bl	b6504 <memcpy>
    __backup_sram_signature = signature;
   b4f72:	4b05      	ldr	r3, [pc, #20]	; (b4f88 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f74:	4a05      	ldr	r2, [pc, #20]	; (b4f8c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f76:	601a      	str	r2, [r3, #0]
}
   b4f78:	bd08      	pop	{r3, pc}
   b4f7a:	bf00      	nop
   b4f7c:	2003f400 	.word	0x2003f400
   b4f80:	2003f404 	.word	0x2003f404
   b4f84:	000b6a04 	.word	0x000b6a04
   b4f88:	2003f400 	.word	0x2003f400
   b4f8c:	9a271c1e 	.word	0x9a271c1e

000b4f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f92:	2300      	movs	r3, #0
   b4f94:	9300      	str	r3, [sp, #0]
   b4f96:	461a      	mov	r2, r3
   b4f98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f9c:	f7ff fc06 	bl	b47ac <system_ctrl_set_result>
}
   b4fa0:	b003      	add	sp, #12
   b4fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4fa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4fa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4faa:	8843      	ldrh	r3, [r0, #2]
   b4fac:	2b0a      	cmp	r3, #10
   b4fae:	d008      	beq.n	b4fc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4fb0:	2b50      	cmp	r3, #80	; 0x50
   b4fb2:	d10b      	bne.n	b4fcc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4fb4:	4b09      	ldr	r3, [pc, #36]	; (b4fdc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4fb6:	681b      	ldr	r3, [r3, #0]
   b4fb8:	b14b      	cbz	r3, b4fce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4fba:	b003      	add	sp, #12
   b4fbc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4fc0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4fc2:	f7ff ffe5 	bl	b4f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4fc6:	b003      	add	sp, #12
   b4fc8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4fcc:	2300      	movs	r3, #0
   b4fce:	9300      	str	r3, [sp, #0]
   b4fd0:	461a      	mov	r2, r3
   b4fd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4fd6:	f7ff fbe9 	bl	b47ac <system_ctrl_set_result>
}
   b4fda:	e7f4      	b.n	b4fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4fdc:	2003e6c8 	.word	0x2003e6c8

000b4fe0 <module_user_init_hook>:
{
   b4fe0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4fe2:	4812      	ldr	r0, [pc, #72]	; (b502c <module_user_init_hook+0x4c>)
   b4fe4:	2100      	movs	r1, #0
   b4fe6:	f7ff fca3 	bl	b4930 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4fea:	4b11      	ldr	r3, [pc, #68]	; (b5030 <module_user_init_hook+0x50>)
   b4fec:	681a      	ldr	r2, [r3, #0]
   b4fee:	4b11      	ldr	r3, [pc, #68]	; (b5034 <module_user_init_hook+0x54>)
   b4ff0:	429a      	cmp	r2, r3
   b4ff2:	4b11      	ldr	r3, [pc, #68]	; (b5038 <module_user_init_hook+0x58>)
   b4ff4:	bf0c      	ite	eq
   b4ff6:	2201      	moveq	r2, #1
   b4ff8:	2200      	movne	r2, #0
   b4ffa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4ffc:	d001      	beq.n	b5002 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4ffe:	f7ff ffb1 	bl	b4f64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5002:	f7ff fab1 	bl	b4568 <HAL_RNG_GetRandomNumber>
   b5006:	4604      	mov	r4, r0
    srand(seed);
   b5008:	f001 fa92 	bl	b6530 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b500c:	4b0b      	ldr	r3, [pc, #44]	; (b503c <module_user_init_hook+0x5c>)
   b500e:	b113      	cbz	r3, b5016 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5010:	4620      	mov	r0, r4
   b5012:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5016:	2100      	movs	r1, #0
   b5018:	4808      	ldr	r0, [pc, #32]	; (b503c <module_user_init_hook+0x5c>)
   b501a:	f7ff fc49 	bl	b48b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b501e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5022:	4807      	ldr	r0, [pc, #28]	; (b5040 <module_user_init_hook+0x60>)
   b5024:	2100      	movs	r1, #0
   b5026:	f7ff bbb7 	b.w	b4798 <system_ctrl_set_app_request_handler>
   b502a:	bf00      	nop
   b502c:	000b4f0d 	.word	0x000b4f0d
   b5030:	2003f400 	.word	0x2003f400
   b5034:	9a271c1e 	.word	0x9a271c1e
   b5038:	2003e6c4 	.word	0x2003e6c4
   b503c:	00000000 	.word	0x00000000
   b5040:	000b4fa9 	.word	0x000b4fa9

000b5044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5044:	4770      	bx	lr

000b5046 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5046:	2000      	movs	r0, #0
   b5048:	4770      	bx	lr

000b504a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b504a:	b510      	push	{r4, lr}
   b504c:	2110      	movs	r1, #16
   b504e:	4604      	mov	r4, r0
   b5050:	f7ff f825 	bl	b409e <_ZdlPvj>
   b5054:	4620      	mov	r0, r4
   b5056:	bd10      	pop	{r4, pc}

000b5058 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5058:	b508      	push	{r3, lr}
      { delete this; }
   b505a:	f7ff fff6 	bl	b504a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b505e:	bd08      	pop	{r3, pc}

000b5060 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5060:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5062:	2200      	movs	r2, #0
   b5064:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5068:	6002      	str	r2, [r0, #0]
   b506a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b506c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b506e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5070:	680c      	ldr	r4, [r1, #0]
   b5072:	8085      	strh	r5, [r0, #4]
   b5074:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5076:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5078:	bd30      	pop	{r4, r5, pc}

000b507a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b507a:	b510      	push	{r4, lr}
   b507c:	4604      	mov	r4, r0
    free((void*)msg_);
   b507e:	6800      	ldr	r0, [r0, #0]
   b5080:	f7ff fc26 	bl	b48d0 <free>
}
   b5084:	4620      	mov	r0, r4
   b5086:	bd10      	pop	{r4, pc}

000b5088 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5088:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b508a:	68c4      	ldr	r4, [r0, #12]
   b508c:	b1f4      	cbz	r4, b50cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b508e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5090:	2b02      	cmp	r3, #2
   b5092:	d103      	bne.n	b509c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5094:	f104 000c 	add.w	r0, r4, #12
   b5098:	f7ff ffef 	bl	b507a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b509c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b509e:	b135      	cbz	r5, b50ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b50a0:	4628      	mov	r0, r5
   b50a2:	f7ff fdc3 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
   b50a6:	2110      	movs	r1, #16
   b50a8:	4628      	mov	r0, r5
   b50aa:	f7fe fff8 	bl	b409e <_ZdlPvj>
   b50ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b50b0:	b135      	cbz	r5, b50c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b50b2:	4628      	mov	r0, r5
   b50b4:	f7ff fdba 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
   b50b8:	2110      	movs	r1, #16
   b50ba:	4628      	mov	r0, r5
   b50bc:	f7fe ffef 	bl	b409e <_ZdlPvj>
   b50c0:	4620      	mov	r0, r4
   b50c2:	2114      	movs	r1, #20
   b50c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b50c8:	f7fe bfe9 	b.w	b409e <_ZdlPvj>
   b50cc:	bd38      	pop	{r3, r4, r5, pc}

000b50ce <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b50ce:	680b      	ldr	r3, [r1, #0]
   b50d0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b50d2:	684b      	ldr	r3, [r1, #4]
   b50d4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b50d6:	b113      	cbz	r3, b50de <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b50d8:	685a      	ldr	r2, [r3, #4]
   b50da:	3201      	adds	r2, #1
   b50dc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b50de:	4770      	bx	lr

000b50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b50e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50e2:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b50e4:	4668      	mov	r0, sp
   b50e6:	460d      	mov	r5, r1
   b50e8:	f7ff fff1 	bl	b50ce <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50ec:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b50ee:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50f0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b50f2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b50f4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b50f6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b50f8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b50fa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b50fc:	f7ff f939 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5100:	b135      	cbz	r5, b5110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5102:	1d28      	adds	r0, r5, #4
   b5104:	f7ff f935 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5108:	2108      	movs	r1, #8
   b510a:	4628      	mov	r0, r5
   b510c:	f7fe ffc7 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5110:	4620      	mov	r0, r4
   b5112:	b003      	add	sp, #12
   b5114:	bd30      	pop	{r4, r5, pc}

000b5116 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5116:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5118:	b510      	push	{r4, lr}
      if (_M_empty())
   b511a:	b90a      	cbnz	r2, b5120 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b511c:	f000 fdca 	bl	b5cb4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5124:	68c3      	ldr	r3, [r0, #12]
   b5126:	4718      	bx	r3

000b5128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5128:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b512a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b512c:	f100 0110 	add.w	r1, r0, #16
   b5130:	f7ff fff1 	bl	b5116 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5134:	bd08      	pop	{r3, pc}

000b5136 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5136:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5138:	b510      	push	{r4, lr}
      if (_M_empty())
   b513a:	b90a      	cbnz	r2, b5140 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b513c:	f000 fdba 	bl	b5cb4 <_ZSt25__throw_bad_function_callv>
    }
   b5140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5144:	68c3      	ldr	r3, [r0, #12]
   b5146:	4718      	bx	r3

000b5148 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5148:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b514a:	6800      	ldr	r0, [r0, #0]
   b514c:	f100 0110 	add.w	r1, r0, #16
   b5150:	f7ff fff1 	bl	b5136 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5154:	bd08      	pop	{r3, pc}
	...

000b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5158:	b538      	push	{r3, r4, r5, lr}
   b515a:	2300      	movs	r3, #0
   b515c:	4604      	mov	r4, r0
   b515e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5160:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5162:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5164:	f7fe ff97 	bl	b4096 <_Znwj>
   b5168:	b128      	cbz	r0, b5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b516a:	2301      	movs	r3, #1
   b516c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5170:	4b02      	ldr	r3, [pc, #8]	; (b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5172:	6003      	str	r3, [r0, #0]
   b5174:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5176:	6020      	str	r0, [r4, #0]
	}
   b5178:	4620      	mov	r0, r4
   b517a:	bd38      	pop	{r3, r4, r5, pc}
   b517c:	000b67ec 	.word	0x000b67ec

000b5180 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5180:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5182:	2300      	movs	r3, #0
   b5184:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5186:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5188:	4604      	mov	r4, r0
   b518a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b518c:	b12b      	cbz	r3, b519a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b518e:	2202      	movs	r2, #2
   b5190:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5192:	68eb      	ldr	r3, [r5, #12]
   b5194:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5196:	68ab      	ldr	r3, [r5, #8]
   b5198:	60a3      	str	r3, [r4, #8]
    }
   b519a:	4620      	mov	r0, r4
   b519c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b51a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51a2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51a4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b51a6:	4668      	mov	r0, sp
   b51a8:	f7ff ff5a 	bl	b5060 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b51ac:	f04f 0302 	mov.w	r3, #2
   b51b0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b51b4:	2a00      	cmp	r2, #0
   b51b6:	d103      	bne.n	b51c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b51b8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b51bc:	2900      	cmp	r1, #0
   b51be:	d1f7      	bne.n	b51b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b51c0:	d125      	bne.n	b520e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b51c2:	f104 050c 	add.w	r5, r4, #12
   b51c6:	4669      	mov	r1, sp
   b51c8:	4628      	mov	r0, r5
   b51ca:	f7ff ff49 	bl	b5060 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b51ce:	f3bf 8f5b 	dmb	ish
   b51d2:	2301      	movs	r3, #1
   b51d4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b51d6:	2000      	movs	r0, #0
   b51d8:	f104 0308 	add.w	r3, r4, #8
   b51dc:	f3bf 8f5b 	dmb	ish
   b51e0:	e853 6f00 	ldrex	r6, [r3]
   b51e4:	e843 0200 	strex	r2, r0, [r3]
   b51e8:	2a00      	cmp	r2, #0
   b51ea:	d1f9      	bne.n	b51e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b51ec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b51f0:	b16e      	cbz	r6, b520e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b51f2:	f7ff fac1 	bl	b4778 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b51f6:	b178      	cbz	r0, b5218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b51f8:	4629      	mov	r1, r5
   b51fa:	4630      	mov	r0, r6
   b51fc:	f7ff ff8b 	bl	b5116 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5200:	4630      	mov	r0, r6
   b5202:	f7ff fd13 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5206:	2110      	movs	r1, #16
   b5208:	4630      	mov	r0, r6
   b520a:	f7fe ff48 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b520e:	4668      	mov	r0, sp
   b5210:	f7ff ff33 	bl	b507a <_ZN8particle5ErrorD1Ev>
    }
   b5214:	b009      	add	sp, #36	; 0x24
   b5216:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5218:	4631      	mov	r1, r6
   b521a:	a802      	add	r0, sp, #8
   b521c:	f7ff ffb0 	bl	b5180 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5220:	68e0      	ldr	r0, [r4, #12]
   b5222:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5226:	b108      	cbz	r0, b522c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5228:	f001 f9b8 	bl	b659c <strdup>
        type_(type) {
   b522c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b522e:	2010      	movs	r0, #16
   b5230:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5234:	f7fe ff2f 	bl	b4096 <_Znwj>
   b5238:	4605      	mov	r5, r0
   b523a:	b1e8      	cbz	r0, b5278 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b523c:	2700      	movs	r7, #0
   b523e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5240:	2018      	movs	r0, #24
   b5242:	f7fe ff28 	bl	b4096 <_Znwj>
   b5246:	4604      	mov	r4, r0
   b5248:	b188      	cbz	r0, b526e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b524a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b524c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b524e:	a802      	add	r0, sp, #8
   b5250:	f7ff fcf5 	bl	b4c3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5254:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5256:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5258:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b525a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b525c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b525e:	a906      	add	r1, sp, #24
   b5260:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5262:	60e3      	str	r3, [r4, #12]
   b5264:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5268:	9205      	str	r2, [sp, #20]
   b526a:	f7ff fef9 	bl	b5060 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b526e:	4b08      	ldr	r3, [pc, #32]	; (b5290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5270:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5272:	4b08      	ldr	r3, [pc, #32]	; (b5294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5274:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5276:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5278:	a806      	add	r0, sp, #24
   b527a:	f7ff fefe 	bl	b507a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b527e:	a802      	add	r0, sp, #8
   b5280:	f7ff fcd4 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5284:	2200      	movs	r2, #0
   b5286:	4629      	mov	r1, r5
   b5288:	4803      	ldr	r0, [pc, #12]	; (b5298 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b528a:	f7ff fa7d 	bl	b4788 <application_thread_invoke>
   b528e:	e7b7      	b.n	b5200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5290:	000b5129 	.word	0x000b5129
   b5294:	000b53ad 	.word	0x000b53ad
   b5298:	000b58bf 	.word	0x000b58bf

000b529c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52a0:	b08b      	sub	sp, #44	; 0x2c
   b52a2:	4605      	mov	r5, r0
   b52a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b52a8:	460f      	mov	r7, r1
   b52aa:	4690      	mov	r8, r2
   b52ac:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b52ae:	f7ff faef 	bl	b4890 <spark_cloud_flag_connected>
   b52b2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b52b4:	4683      	mov	fp, r0
   b52b6:	bb38      	cbnz	r0, b5308 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b52b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b52bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b52be:	a905      	add	r1, sp, #20
   b52c0:	4630      	mov	r0, r6
   b52c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b52c6:	f7ff fecb 	bl	b5060 <_ZN8particle5ErrorC1EOS0_>
   b52ca:	2014      	movs	r0, #20
   b52cc:	f7fe fee3 	bl	b4096 <_Znwj>
   b52d0:	4604      	mov	r4, r0
   b52d2:	b148      	cbz	r0, b52e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b52d4:	2302      	movs	r3, #2
   b52d6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b52d8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b52da:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b52de:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b52e0:	4631      	mov	r1, r6
   b52e2:	300c      	adds	r0, #12
   b52e4:	f7ff febc 	bl	b5060 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b52e8:	4628      	mov	r0, r5
	: __shared_count(__p)
   b52ea:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b52ec:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b52f0:	f7ff ff32 	bl	b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b52f4:	4630      	mov	r0, r6
   b52f6:	f7ff fec0 	bl	b507a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b52fa:	a805      	add	r0, sp, #20
   b52fc:	f7ff febd 	bl	b507a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5300:	4628      	mov	r0, r5
   b5302:	b00b      	add	sp, #44	; 0x2c
   b5304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5308:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b530a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b530c:	2014      	movs	r0, #20
   b530e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5312:	9307      	str	r3, [sp, #28]
   b5314:	f7fe febf 	bl	b4096 <_Znwj>
   b5318:	4601      	mov	r1, r0
   b531a:	b118      	cbz	r0, b5324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b531c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5320:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5322:	7044      	strb	r4, [r0, #1]
   b5324:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5326:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5328:	f7ff ff16 	bl	b5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b532c:	4b1e      	ldr	r3, [pc, #120]	; (b53a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b532e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5330:	2008      	movs	r0, #8
   b5332:	f7fe feb0 	bl	b4096 <_Znwj>
   b5336:	4604      	mov	r4, r0
   b5338:	b110      	cbz	r0, b5340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b533a:	a903      	add	r1, sp, #12
   b533c:	f7ff fec7 	bl	b50ce <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5340:	9600      	str	r6, [sp, #0]
   b5342:	fa5f f38a 	uxtb.w	r3, sl
   b5346:	464a      	mov	r2, r9
   b5348:	4641      	mov	r1, r8
   b534a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b534c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b534e:	f7ff faa7 	bl	b48a0 <spark_send_event>
   b5352:	b9b8      	cbnz	r0, b5384 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5354:	9b03      	ldr	r3, [sp, #12]
   b5356:	785b      	ldrb	r3, [r3, #1]
   b5358:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b535c:	b993      	cbnz	r3, b5384 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b535e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5362:	a905      	add	r1, sp, #20
   b5364:	a803      	add	r0, sp, #12
   b5366:	9205      	str	r2, [sp, #20]
   b5368:	f8ad 3018 	strh.w	r3, [sp, #24]
   b536c:	f7ff ff18 	bl	b51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5370:	a805      	add	r0, sp, #20
   b5372:	f7ff fe82 	bl	b507a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5376:	a805      	add	r0, sp, #20
   b5378:	9909      	ldr	r1, [sp, #36]	; 0x24
   b537a:	f7ff feb1 	bl	b50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b537e:	a806      	add	r0, sp, #24
   b5380:	f7fe fff7 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5384:	a903      	add	r1, sp, #12
   b5386:	a805      	add	r0, sp, #20
   b5388:	f7ff fea1 	bl	b50ce <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b538c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b538e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5390:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5392:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5394:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5396:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5398:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b539a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b539c:	f7fe ffe9 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53a0:	a804      	add	r0, sp, #16
   b53a2:	f7fe ffe6 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b53a6:	e7ab      	b.n	b5300 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b53a8:	000b5429 	.word	0x000b5429

000b53ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b53ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b53ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53b0:	4605      	mov	r5, r0
	switch (__op)
   b53b2:	d103      	bne.n	b53bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b53b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b53b6:	6003      	str	r3, [r0, #0]
      }
   b53b8:	2000      	movs	r0, #0
   b53ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b53bc:	2a02      	cmp	r2, #2
   b53be:	d010      	beq.n	b53e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b53c0:	2a03      	cmp	r2, #3
   b53c2:	d1f9      	bne.n	b53b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b53c4:	6804      	ldr	r4, [r0, #0]
   b53c6:	2c00      	cmp	r4, #0
   b53c8:	d0f6      	beq.n	b53b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b53ca:	f104 0010 	add.w	r0, r4, #16
   b53ce:	f7ff fe54 	bl	b507a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b53d2:	4620      	mov	r0, r4
   b53d4:	f7ff fc2a 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b53d8:	2118      	movs	r1, #24
   b53da:	4620      	mov	r0, r4
   b53dc:	f7fe fe5f 	bl	b409e <_ZdlPvj>
   b53e0:	e7ea      	b.n	b53b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b53e2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b53e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b53e6:	f7fe fe56 	bl	b4096 <_Znwj>
   b53ea:	4604      	mov	r4, r0
   b53ec:	b150      	cbz	r0, b5404 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b53ee:	4631      	mov	r1, r6
   b53f0:	f7ff fec6 	bl	b5180 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b53f4:	6930      	ldr	r0, [r6, #16]
   b53f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b53fa:	b108      	cbz	r0, b5400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b53fc:	f001 f8ce 	bl	b659c <strdup>
        type_(type) {
   b5400:	6120      	str	r0, [r4, #16]
   b5402:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5404:	602c      	str	r4, [r5, #0]
	}
   b5406:	e7d7      	b.n	b53b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5408 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5408:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b540a:	2300      	movs	r3, #0
   b540c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b540e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5410:	4604      	mov	r4, r0
   b5412:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5414:	b12b      	cbz	r3, b5422 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5416:	2202      	movs	r2, #2
   b5418:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b541a:	68eb      	ldr	r3, [r5, #12]
   b541c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b541e:	68ab      	ldr	r3, [r5, #8]
   b5420:	60a3      	str	r3, [r4, #8]
    }
   b5422:	4620      	mov	r0, r4
   b5424:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5428:	b5f0      	push	{r4, r5, r6, r7, lr}
   b542a:	b089      	sub	sp, #36	; 0x24
   b542c:	4604      	mov	r4, r0
   b542e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5430:	a801      	add	r0, sp, #4
   b5432:	4611      	mov	r1, r2
   b5434:	f7ff fe54 	bl	b50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5438:	b1a4      	cbz	r4, b5464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b543a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b543c:	b11d      	cbz	r5, b5446 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b543e:	4628      	mov	r0, r5
   b5440:	f001 f8ac 	bl	b659c <strdup>
   b5444:	4605      	mov	r5, r0
   b5446:	a801      	add	r0, sp, #4
   b5448:	a903      	add	r1, sp, #12
        type_(type) {
   b544a:	9503      	str	r5, [sp, #12]
   b544c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5450:	f7ff fea6 	bl	b51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5454:	a803      	add	r0, sp, #12
   b5456:	f7ff fe10 	bl	b507a <_ZN8particle5ErrorD1Ev>
   b545a:	a802      	add	r0, sp, #8
   b545c:	f7fe ff89 	bl	b4372 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5460:	b009      	add	sp, #36	; 0x24
   b5462:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5464:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5466:	2301      	movs	r3, #1
   b5468:	e8d5 2f4f 	ldrexb	r2, [r5]
   b546c:	2a00      	cmp	r2, #0
   b546e:	d103      	bne.n	b5478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5470:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5474:	2900      	cmp	r1, #0
   b5476:	d1f7      	bne.n	b5468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5478:	d1ef      	bne.n	b545a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b547a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b547c:	f3bf 8f5b 	dmb	ish
   b5480:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5482:	1d2b      	adds	r3, r5, #4
   b5484:	f3bf 8f5b 	dmb	ish
   b5488:	e853 6f00 	ldrex	r6, [r3]
   b548c:	e843 4200 	strex	r2, r4, [r3]
   b5490:	2a00      	cmp	r2, #0
   b5492:	d1f9      	bne.n	b5488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5494:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5498:	2e00      	cmp	r6, #0
   b549a:	d0de      	beq.n	b545a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b549c:	4620      	mov	r0, r4
   b549e:	f7ff f96b 	bl	b4778 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b54a2:	4607      	mov	r7, r0
   b54a4:	b160      	cbz	r0, b54c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b54a6:	f105 010c 	add.w	r1, r5, #12
   b54aa:	4630      	mov	r0, r6
   b54ac:	f7ff fe43 	bl	b5136 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b54b0:	4630      	mov	r0, r6
   b54b2:	f7ff fbbb 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b54b6:	2110      	movs	r1, #16
   b54b8:	4630      	mov	r0, r6
   b54ba:	f7fe fdf0 	bl	b409e <_ZdlPvj>
   b54be:	e7cc      	b.n	b545a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b54c0:	4631      	mov	r1, r6
   b54c2:	a803      	add	r0, sp, #12
   b54c4:	f7ff ffa0 	bl	b5408 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b54c8:	7b2b      	ldrb	r3, [r5, #12]
   b54ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b54ce:	2010      	movs	r0, #16
   b54d0:	f7fe fde1 	bl	b4096 <_Znwj>
   b54d4:	4605      	mov	r5, r0
   b54d6:	b1d0      	cbz	r0, b550e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b54d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54da:	2014      	movs	r0, #20
   b54dc:	f7fe fddb 	bl	b4096 <_Znwj>
   b54e0:	4604      	mov	r4, r0
   b54e2:	b178      	cbz	r0, b5504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b54e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b54e6:	4601      	mov	r1, r0
   b54e8:	a803      	add	r0, sp, #12
   b54ea:	f7ff fba8 	bl	b4c3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b54f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b54f6:	9205      	str	r2, [sp, #20]
   b54f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54fa:	60e3      	str	r3, [r4, #12]
   b54fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5500:	9206      	str	r2, [sp, #24]
   b5502:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5504:	4b06      	ldr	r3, [pc, #24]	; (b5520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5506:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5508:	4b06      	ldr	r3, [pc, #24]	; (b5524 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b550a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b550c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b550e:	a803      	add	r0, sp, #12
   b5510:	f7ff fb8c 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5514:	2200      	movs	r2, #0
   b5516:	4629      	mov	r1, r5
   b5518:	4803      	ldr	r0, [pc, #12]	; (b5528 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b551a:	f7ff f935 	bl	b4788 <application_thread_invoke>
   b551e:	e7c7      	b.n	b54b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5520:	000b5149 	.word	0x000b5149
   b5524:	000b552d 	.word	0x000b552d
   b5528:	000b58bf 	.word	0x000b58bf

000b552c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b552c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b552e:	b570      	push	{r4, r5, r6, lr}
   b5530:	4604      	mov	r4, r0
	switch (__op)
   b5532:	d103      	bne.n	b553c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5534:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5536:	6003      	str	r3, [r0, #0]
      }
   b5538:	2000      	movs	r0, #0
   b553a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b553c:	2a02      	cmp	r2, #2
   b553e:	d00c      	beq.n	b555a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5540:	2a03      	cmp	r2, #3
   b5542:	d1f9      	bne.n	b5538 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5544:	6804      	ldr	r4, [r0, #0]
   b5546:	2c00      	cmp	r4, #0
   b5548:	d0f6      	beq.n	b5538 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b554a:	4620      	mov	r0, r4
   b554c:	f7ff fb6e 	bl	b4c2c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5550:	2114      	movs	r1, #20
   b5552:	4620      	mov	r0, r4
   b5554:	f7fe fda3 	bl	b409e <_ZdlPvj>
   b5558:	e7ee      	b.n	b5538 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b555a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b555c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b555e:	f7fe fd9a 	bl	b4096 <_Znwj>
   b5562:	4605      	mov	r5, r0
   b5564:	b120      	cbz	r0, b5570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5566:	4631      	mov	r1, r6
   b5568:	f7ff ff4e 	bl	b5408 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b556c:	7c33      	ldrb	r3, [r6, #16]
   b556e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5570:	6025      	str	r5, [r4, #0]
	}
   b5572:	e7e1      	b.n	b5538 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5574 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5574:	4770      	bx	lr

000b5576 <_ZN9IPAddressD0Ev>:
   b5576:	b510      	push	{r4, lr}
   b5578:	2118      	movs	r1, #24
   b557a:	4604      	mov	r4, r0
   b557c:	f7fe fd8f 	bl	b409e <_ZdlPvj>
   b5580:	4620      	mov	r0, r4
   b5582:	bd10      	pop	{r4, pc}

000b5584 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5584:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5586:	7d03      	ldrb	r3, [r0, #20]
   b5588:	2b06      	cmp	r3, #6
{
   b558a:	b08d      	sub	sp, #52	; 0x34
   b558c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b558e:	f100 0704 	add.w	r7, r0, #4
   b5592:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5596:	d012      	beq.n	b55be <_ZNK9IPAddress7printToER5Print+0x3a>
   b5598:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b559c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b55a0:	220a      	movs	r2, #10
   b55a2:	4630      	mov	r0, r6
   b55a4:	f7ff fb91 	bl	b4cca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b55a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b55aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b55ac:	d019      	beq.n	b55e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b55ae:	2c00      	cmp	r4, #0
   b55b0:	d0f4      	beq.n	b559c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b55b2:	212e      	movs	r1, #46	; 0x2e
   b55b4:	4630      	mov	r0, r6
   b55b6:	f7ff fb85 	bl	b4cc4 <_ZN5Print5printEc>
   b55ba:	4404      	add	r4, r0
   b55bc:	e7ee      	b.n	b559c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55be:	232f      	movs	r3, #47	; 0x2f
   b55c0:	466a      	mov	r2, sp
   b55c2:	4639      	mov	r1, r7
   b55c4:	200a      	movs	r0, #10
		buf[0] = 0;
   b55c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55ca:	f7fe ffe5 	bl	b4598 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b55ce:	4668      	mov	r0, sp
   b55d0:	f001 f801 	bl	b65d6 <strlen>
   b55d4:	6833      	ldr	r3, [r6, #0]
   b55d6:	4602      	mov	r2, r0
   b55d8:	68db      	ldr	r3, [r3, #12]
   b55da:	4669      	mov	r1, sp
   b55dc:	4630      	mov	r0, r6
   b55de:	4798      	blx	r3
   b55e0:	4604      	mov	r4, r0
    }
    return n;
}
   b55e2:	4620      	mov	r0, r4
   b55e4:	b00d      	add	sp, #52	; 0x34
   b55e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b55e8:	b510      	push	{r4, lr}
   b55ea:	4b05      	ldr	r3, [pc, #20]	; (b5600 <_ZN9IPAddressC1Ev+0x18>)
   b55ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b55ee:	2211      	movs	r2, #17
   b55f0:	f840 3b04 	str.w	r3, [r0], #4
   b55f4:	2100      	movs	r1, #0
   b55f6:	f000 ff93 	bl	b6520 <memset>
}
   b55fa:	4620      	mov	r0, r4
   b55fc:	bd10      	pop	{r4, pc}
   b55fe:	bf00      	nop
   b5600:	000b6808 	.word	0x000b6808

000b5604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5604:	4603      	mov	r3, r0
   b5606:	4a07      	ldr	r2, [pc, #28]	; (b5624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5608:	b510      	push	{r4, lr}
   b560a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b560e:	f101 0210 	add.w	r2, r1, #16
   b5612:	f851 4b04 	ldr.w	r4, [r1], #4
   b5616:	f843 4b04 	str.w	r4, [r3], #4
   b561a:	4291      	cmp	r1, r2
   b561c:	d1f9      	bne.n	b5612 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b561e:	780a      	ldrb	r2, [r1, #0]
   b5620:	701a      	strb	r2, [r3, #0]
}
   b5622:	bd10      	pop	{r4, pc}
   b5624:	000b6808 	.word	0x000b6808

000b5628 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5628:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b562a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b562e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5632:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5636:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b563a:	2304      	movs	r3, #4
   b563c:	6041      	str	r1, [r0, #4]
   b563e:	7503      	strb	r3, [r0, #20]
}
   b5640:	bd10      	pop	{r4, pc}
	...

000b5644 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5644:	b507      	push	{r0, r1, r2, lr}
   b5646:	4b06      	ldr	r3, [pc, #24]	; (b5660 <_ZN9IPAddressC1EPKh+0x1c>)
   b5648:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b564a:	78cb      	ldrb	r3, [r1, #3]
   b564c:	9300      	str	r3, [sp, #0]
   b564e:	788b      	ldrb	r3, [r1, #2]
   b5650:	784a      	ldrb	r2, [r1, #1]
   b5652:	7809      	ldrb	r1, [r1, #0]
   b5654:	f7ff ffe8 	bl	b5628 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5658:	b003      	add	sp, #12
   b565a:	f85d fb04 	ldr.w	pc, [sp], #4
   b565e:	bf00      	nop
   b5660:	000b6808 	.word	0x000b6808

000b5664 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5664:	7441      	strb	r1, [r0, #17]
}
   b5666:	4770      	bx	lr

000b5668 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5668:	4770      	bx	lr

000b566a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b566a:	4770      	bx	lr

000b566c <_ZN9USBSerial4readEv>:
{
   b566c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b566e:	2100      	movs	r1, #0
   b5670:	7c00      	ldrb	r0, [r0, #16]
   b5672:	f7ff f849 	bl	b4708 <HAL_USB_USART_Receive_Data>
}
   b5676:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b567a:	bd08      	pop	{r3, pc}

000b567c <_ZN9USBSerial4peekEv>:
{
   b567c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b567e:	2101      	movs	r1, #1
   b5680:	7c00      	ldrb	r0, [r0, #16]
   b5682:	f7ff f841 	bl	b4708 <HAL_USB_USART_Receive_Data>
}
   b5686:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b568a:	bd08      	pop	{r3, pc}

000b568c <_ZN9USBSerial17availableForWriteEv>:
{
   b568c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b568e:	7c00      	ldrb	r0, [r0, #16]
   b5690:	f7ff f832 	bl	b46f8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5694:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5698:	bd08      	pop	{r3, pc}

000b569a <_ZN9USBSerial9availableEv>:
{
   b569a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b569c:	7c00      	ldrb	r0, [r0, #16]
   b569e:	f7ff f823 	bl	b46e8 <HAL_USB_USART_Available_Data>
}
   b56a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56a6:	bd08      	pop	{r3, pc}

000b56a8 <_ZN9USBSerial5writeEh>:
{
   b56a8:	b513      	push	{r0, r1, r4, lr}
   b56aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b56ac:	7c00      	ldrb	r0, [r0, #16]
{
   b56ae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b56b0:	f7ff f822 	bl	b46f8 <HAL_USB_USART_Available_Data_For_Write>
   b56b4:	2800      	cmp	r0, #0
   b56b6:	9901      	ldr	r1, [sp, #4]
   b56b8:	dc01      	bgt.n	b56be <_ZN9USBSerial5writeEh+0x16>
   b56ba:	7c60      	ldrb	r0, [r4, #17]
   b56bc:	b120      	cbz	r0, b56c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b56be:	7c20      	ldrb	r0, [r4, #16]
   b56c0:	f7ff f82a 	bl	b4718 <HAL_USB_USART_Send_Data>
   b56c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b56c8:	b002      	add	sp, #8
   b56ca:	bd10      	pop	{r4, pc}

000b56cc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b56cc:	7c00      	ldrb	r0, [r0, #16]
   b56ce:	f7ff b82b 	b.w	b4728 <HAL_USB_USART_Flush_Data>

000b56d2 <_ZN9USBSerialD0Ev>:
   b56d2:	b510      	push	{r4, lr}
   b56d4:	2114      	movs	r1, #20
   b56d6:	4604      	mov	r4, r0
   b56d8:	f7fe fce1 	bl	b409e <_ZdlPvj>
   b56dc:	4620      	mov	r0, r4
   b56de:	bd10      	pop	{r4, pc}

000b56e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b56e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b56e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56e6:	4604      	mov	r4, r0
   b56e8:	4608      	mov	r0, r1
   b56ea:	2100      	movs	r1, #0
   b56ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b56f0:	4b04      	ldr	r3, [pc, #16]	; (b5704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b56f2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b56f4:	2301      	movs	r3, #1
  _serial = serial;
   b56f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b56f8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b56fa:	4611      	mov	r1, r2
   b56fc:	f7fe ffe4 	bl	b46c8 <HAL_USB_USART_Init>
}
   b5700:	4620      	mov	r0, r4
   b5702:	bd10      	pop	{r4, pc}
   b5704:	000b681c 	.word	0x000b681c

000b5708 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5708:	7c00      	ldrb	r0, [r0, #16]
   b570a:	2200      	movs	r2, #0
   b570c:	f7fe bfe4 	b.w	b46d8 <HAL_USB_USART_Begin>

000b5710 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5710:	7c00      	ldrb	r0, [r0, #16]
   b5712:	f7ff b811 	b.w	b4738 <HAL_USB_USART_Is_Connected>

000b5716 <_Z19acquireSerialBufferv>:
{
   b5716:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5718:	2214      	movs	r2, #20
{
   b571a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b571c:	2100      	movs	r1, #0
   b571e:	f000 feff 	bl	b6520 <memset>
}
   b5722:	4620      	mov	r0, r4
   b5724:	bd10      	pop	{r4, pc}
	...

000b5728 <_Z16_fetch_usbserialv>:
{
   b5728:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b572a:	4c0f      	ldr	r4, [pc, #60]	; (b5768 <_Z16_fetch_usbserialv+0x40>)
{
   b572c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b572e:	a803      	add	r0, sp, #12
   b5730:	f7ff fff1 	bl	b5716 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5734:	7821      	ldrb	r1, [r4, #0]
   b5736:	f3bf 8f5b 	dmb	ish
   b573a:	f011 0101 	ands.w	r1, r1, #1
   b573e:	d10f      	bne.n	b5760 <_Z16_fetch_usbserialv+0x38>
   b5740:	4620      	mov	r0, r4
   b5742:	9101      	str	r1, [sp, #4]
   b5744:	f7fe fcad 	bl	b40a2 <__cxa_guard_acquire>
   b5748:	9901      	ldr	r1, [sp, #4]
   b574a:	b148      	cbz	r0, b5760 <_Z16_fetch_usbserialv+0x38>
   b574c:	aa03      	add	r2, sp, #12
   b574e:	4807      	ldr	r0, [pc, #28]	; (b576c <_Z16_fetch_usbserialv+0x44>)
   b5750:	f7ff ffc6 	bl	b56e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5754:	4620      	mov	r0, r4
   b5756:	f7fe fca9 	bl	b40ac <__cxa_guard_release>
   b575a:	4805      	ldr	r0, [pc, #20]	; (b5770 <_Z16_fetch_usbserialv+0x48>)
   b575c:	f000 fecc 	bl	b64f8 <atexit>
	return _usbserial;
}
   b5760:	4802      	ldr	r0, [pc, #8]	; (b576c <_Z16_fetch_usbserialv+0x44>)
   b5762:	b008      	add	sp, #32
   b5764:	bd10      	pop	{r4, pc}
   b5766:	bf00      	nop
   b5768:	2003e6cc 	.word	0x2003e6cc
   b576c:	2003e6d0 	.word	0x2003e6d0
   b5770:	000b5669 	.word	0x000b5669

000b5774 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5774:	2200      	movs	r2, #0
   b5776:	6840      	ldr	r0, [r0, #4]
   b5778:	4611      	mov	r1, r2
   b577a:	f7ff b839 	b.w	b47f0 <network_ready>

000b577e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b577e:	2200      	movs	r2, #0
   b5780:	6840      	ldr	r0, [r0, #4]
   b5782:	4611      	mov	r1, r2
   b5784:	f7ff b854 	b.w	b4830 <network_listening>

000b5788 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5788:	2200      	movs	r2, #0
   b578a:	6840      	ldr	r0, [r0, #4]
   b578c:	4611      	mov	r1, r2
   b578e:	f7ff b85f 	b.w	b4850 <network_get_listen_timeout>

000b5792 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5792:	6840      	ldr	r0, [r0, #4]
   b5794:	2200      	movs	r2, #0
   b5796:	f7ff b853 	b.w	b4840 <network_set_listen_timeout>

000b579a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b579a:	6840      	ldr	r0, [r0, #4]
   b579c:	2200      	movs	r2, #0
   b579e:	f081 0101 	eor.w	r1, r1, #1
   b57a2:	f7ff b83d 	b.w	b4820 <network_listen>

000b57a6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b57a6:	2300      	movs	r3, #0
   b57a8:	6840      	ldr	r0, [r0, #4]
   b57aa:	461a      	mov	r2, r3
   b57ac:	4619      	mov	r1, r3
   b57ae:	f7ff b82f 	b.w	b4810 <network_off>

000b57b2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b57b2:	2300      	movs	r3, #0
   b57b4:	6840      	ldr	r0, [r0, #4]
   b57b6:	461a      	mov	r2, r3
   b57b8:	4619      	mov	r1, r3
   b57ba:	f7ff b821 	b.w	b4800 <network_on>

000b57be <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b57be:	2200      	movs	r2, #0
   b57c0:	6840      	ldr	r0, [r0, #4]
   b57c2:	4611      	mov	r1, r2
   b57c4:	f7ff b804 	b.w	b47d0 <network_connecting>

000b57c8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b57c8:	6840      	ldr	r0, [r0, #4]
   b57ca:	2200      	movs	r2, #0
   b57cc:	2102      	movs	r1, #2
   b57ce:	f7ff b807 	b.w	b47e0 <network_disconnect>

000b57d2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b57d2:	2300      	movs	r3, #0
   b57d4:	6840      	ldr	r0, [r0, #4]
   b57d6:	461a      	mov	r2, r3
   b57d8:	f7fe bff2 	b.w	b47c0 <network_connect>

000b57dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b57dc:	4b08      	ldr	r3, [pc, #32]	; (b5800 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b57de:	b510      	push	{r4, lr}
   b57e0:	2428      	movs	r4, #40	; 0x28
   b57e2:	4622      	mov	r2, r4
   b57e4:	4618      	mov	r0, r3
   b57e6:	2100      	movs	r1, #0
   b57e8:	f000 fe9a 	bl	b6520 <memset>
   b57ec:	4b05      	ldr	r3, [pc, #20]	; (b5804 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b57ee:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b57f0:	f04f 32ff 	mov.w	r2, #4294967295
   b57f4:	6042      	str	r2, [r0, #4]
   b57f6:	2204      	movs	r2, #4
   b57f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b57fa:	4a03      	ldr	r2, [pc, #12]	; (b5808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b57fc:	601a      	str	r2, [r3, #0]
   b57fe:	bd10      	pop	{r4, pc}
   b5800:	2003e6ec 	.word	0x2003e6ec
   b5804:	2003e6e4 	.word	0x2003e6e4
   b5808:	000b684c 	.word	0x000b684c

000b580c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b580c:	4770      	bx	lr

000b580e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b580e:	7441      	strb	r1, [r0, #17]
}
   b5810:	4770      	bx	lr

000b5812 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5812:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5814:	7c00      	ldrb	r0, [r0, #16]
   b5816:	f7fe fef7 	bl	b4608 <hal_usart_available_data_for_write>
}
   b581a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b581e:	bd08      	pop	{r3, pc}

000b5820 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5820:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5822:	7c00      	ldrb	r0, [r0, #16]
   b5824:	f7fe fec8 	bl	b45b8 <hal_usart_available>
}
   b5828:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b582c:	bd08      	pop	{r3, pc}

000b582e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b582e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5830:	7c00      	ldrb	r0, [r0, #16]
   b5832:	f7fe fed1 	bl	b45d8 <hal_usart_peek>
}
   b5836:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b583a:	bd08      	pop	{r3, pc}

000b583c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b583c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b583e:	7c00      	ldrb	r0, [r0, #16]
   b5840:	f7fe fec2 	bl	b45c8 <hal_usart_read>
}
   b5844:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5848:	bd08      	pop	{r3, pc}

000b584a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b584a:	7c00      	ldrb	r0, [r0, #16]
   b584c:	f7fe becc 	b.w	b45e8 <hal_usart_flush>

000b5850 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5852:	7c45      	ldrb	r5, [r0, #17]
{
   b5854:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5856:	b12d      	cbz	r5, b5864 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5858:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b585a:	b003      	add	sp, #12
   b585c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5860:	f7fe bea2 	b.w	b45a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5864:	7c00      	ldrb	r0, [r0, #16]
   b5866:	9101      	str	r1, [sp, #4]
   b5868:	f7fe fece 	bl	b4608 <hal_usart_available_data_for_write>
   b586c:	2800      	cmp	r0, #0
   b586e:	9901      	ldr	r1, [sp, #4]
   b5870:	dcf2      	bgt.n	b5858 <_ZN11USARTSerial5writeEh+0x8>
}
   b5872:	4628      	mov	r0, r5
   b5874:	b003      	add	sp, #12
   b5876:	bd30      	pop	{r4, r5, pc}

000b5878 <_ZN11USARTSerialD0Ev>:
   b5878:	b510      	push	{r4, lr}
   b587a:	2114      	movs	r1, #20
   b587c:	4604      	mov	r4, r0
   b587e:	f7fe fc0e 	bl	b409e <_ZdlPvj>
   b5882:	4620      	mov	r0, r4
   b5884:	bd10      	pop	{r4, pc}
	...

000b5888 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5888:	b510      	push	{r4, lr}
   b588a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b588e:	4604      	mov	r4, r0
   b5890:	4608      	mov	r0, r1
   b5892:	4611      	mov	r1, r2
   b5894:	2200      	movs	r2, #0
   b5896:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b589a:	4b04      	ldr	r3, [pc, #16]	; (b58ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b589c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b589e:	2301      	movs	r3, #1
  _serial = serial;
   b58a0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58a2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b58a4:	f7fe fec0 	bl	b4628 <hal_usart_init_ex>
}
   b58a8:	4620      	mov	r0, r4
   b58aa:	bd10      	pop	{r4, pc}
   b58ac:	000b6888 	.word	0x000b6888

000b58b0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b58b0:	7c00      	ldrb	r0, [r0, #16]
   b58b2:	2300      	movs	r3, #0
   b58b4:	f7fe beb0 	b.w	b4618 <hal_usart_begin_config>

000b58b8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b58b8:	2200      	movs	r2, #0
   b58ba:	f7ff bff9 	b.w	b58b0 <_ZN11USARTSerial5beginEmm>

000b58be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b58be:	b510      	push	{r4, lr}
      if (_M_empty())
   b58c0:	6883      	ldr	r3, [r0, #8]
   b58c2:	4604      	mov	r4, r0
   b58c4:	b90b      	cbnz	r3, b58ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b58c6:	f000 f9f5 	bl	b5cb4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b58ca:	68c3      	ldr	r3, [r0, #12]
   b58cc:	4798      	blx	r3
      if (_M_manager)
   b58ce:	68a3      	ldr	r3, [r4, #8]
   b58d0:	b11b      	cbz	r3, b58da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b58d2:	2203      	movs	r2, #3
   b58d4:	4621      	mov	r1, r4
   b58d6:	4620      	mov	r0, r4
   b58d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b58da:	4620      	mov	r0, r4
   b58dc:	2110      	movs	r1, #16
}
   b58de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b58e2:	f7fe bbdc 	b.w	b409e <_ZdlPvj>

000b58e6 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b58e6:	4770      	bx	lr

000b58e8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b58e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58ea:	4606      	mov	r6, r0
   b58ec:	4615      	mov	r5, r2
   b58ee:	460c      	mov	r4, r1
   b58f0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58f2:	42bc      	cmp	r4, r7
   b58f4:	d006      	beq.n	b5904 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58f6:	6833      	ldr	r3, [r6, #0]
   b58f8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58fc:	689b      	ldr	r3, [r3, #8]
   b58fe:	4630      	mov	r0, r6
   b5900:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5902:	e7f6      	b.n	b58f2 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5904:	4628      	mov	r0, r5
   b5906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5908 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5908:	7c00      	ldrb	r0, [r0, #16]
   b590a:	2200      	movs	r2, #0
   b590c:	f7fe be94 	b.w	b4638 <hal_i2c_write>

000b5910 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5910:	7c00      	ldrb	r0, [r0, #16]
   b5912:	2100      	movs	r1, #0
   b5914:	f7fe be98 	b.w	b4648 <hal_i2c_available>

000b5918 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5918:	7c00      	ldrb	r0, [r0, #16]
   b591a:	2100      	movs	r1, #0
   b591c:	f7fe be9c 	b.w	b4658 <hal_i2c_read>

000b5920 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5920:	7c00      	ldrb	r0, [r0, #16]
   b5922:	2100      	movs	r1, #0
   b5924:	f7fe bea0 	b.w	b4668 <hal_i2c_peek>

000b5928 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5928:	7c00      	ldrb	r0, [r0, #16]
   b592a:	2100      	movs	r1, #0
   b592c:	f7fe bea4 	b.w	b4678 <hal_i2c_flush>

000b5930 <_ZN7TwoWireD0Ev>:
   b5930:	b510      	push	{r4, lr}
   b5932:	2114      	movs	r1, #20
   b5934:	4604      	mov	r4, r0
   b5936:	f7fe fbb2 	bl	b409e <_ZdlPvj>
   b593a:	4620      	mov	r0, r4
   b593c:	bd10      	pop	{r4, pc}
	...

000b5940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5940:	b538      	push	{r3, r4, r5, lr}
   b5942:	4604      	mov	r4, r0
   b5944:	4615      	mov	r5, r2
   b5946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b594a:	2200      	movs	r2, #0
   b594c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5950:	4b09      	ldr	r3, [pc, #36]	; (b5978 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5952:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5954:	4608      	mov	r0, r1
   b5956:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5958:	4629      	mov	r1, r5
   b595a:	f7fe fe9d 	bl	b4698 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b595e:	30bf      	adds	r0, #191	; 0xbf
   b5960:	d108      	bne.n	b5974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5962:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5964:	07db      	lsls	r3, r3, #31
   b5966:	d505      	bpl.n	b5974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5968:	6868      	ldr	r0, [r5, #4]
   b596a:	f7fe ffb1 	bl	b48d0 <free>
    free(conf.tx_buffer);
   b596e:	68e8      	ldr	r0, [r5, #12]
   b5970:	f7fe ffae 	bl	b48d0 <free>
}
   b5974:	4620      	mov	r0, r4
   b5976:	bd38      	pop	{r3, r4, r5, pc}
   b5978:	000b68b8 	.word	0x000b68b8

000b597c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b597c:	2300      	movs	r3, #0
   b597e:	6840      	ldr	r0, [r0, #4]
   b5980:	461a      	mov	r2, r3
   b5982:	f7fe bf1d 	b.w	b47c0 <network_connect>

000b5986 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5986:	6840      	ldr	r0, [r0, #4]
   b5988:	2200      	movs	r2, #0
   b598a:	2102      	movs	r1, #2
   b598c:	f7fe bf28 	b.w	b47e0 <network_disconnect>

000b5990 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5990:	2200      	movs	r2, #0
   b5992:	6840      	ldr	r0, [r0, #4]
   b5994:	4611      	mov	r1, r2
   b5996:	f7fe bf1b 	b.w	b47d0 <network_connecting>

000b599a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b599a:	2200      	movs	r2, #0
   b599c:	6840      	ldr	r0, [r0, #4]
   b599e:	4611      	mov	r1, r2
   b59a0:	f7fe bf26 	b.w	b47f0 <network_ready>

000b59a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b59a4:	2300      	movs	r3, #0
   b59a6:	6840      	ldr	r0, [r0, #4]
   b59a8:	461a      	mov	r2, r3
   b59aa:	4619      	mov	r1, r3
   b59ac:	f7fe bf28 	b.w	b4800 <network_on>

000b59b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b59b0:	2300      	movs	r3, #0
   b59b2:	6840      	ldr	r0, [r0, #4]
   b59b4:	461a      	mov	r2, r3
   b59b6:	4619      	mov	r1, r3
   b59b8:	f7fe bf2a 	b.w	b4810 <network_off>

000b59bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b59bc:	6840      	ldr	r0, [r0, #4]
   b59be:	2100      	movs	r1, #0
   b59c0:	f7fe bf4e 	b.w	b4860 <network_is_on>

000b59c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b59c4:	6840      	ldr	r0, [r0, #4]
   b59c6:	2100      	movs	r1, #0
   b59c8:	f7fe bf52 	b.w	b4870 <network_is_off>

000b59cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b59cc:	6840      	ldr	r0, [r0, #4]
   b59ce:	2200      	movs	r2, #0
   b59d0:	f081 0101 	eor.w	r1, r1, #1
   b59d4:	f7fe bf24 	b.w	b4820 <network_listen>

000b59d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b59d8:	6840      	ldr	r0, [r0, #4]
   b59da:	2200      	movs	r2, #0
   b59dc:	f7fe bf30 	b.w	b4840 <network_set_listen_timeout>

000b59e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b59e0:	2200      	movs	r2, #0
   b59e2:	6840      	ldr	r0, [r0, #4]
   b59e4:	4611      	mov	r1, r2
   b59e6:	f7fe bf33 	b.w	b4850 <network_get_listen_timeout>

000b59ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b59ea:	2200      	movs	r2, #0
   b59ec:	6840      	ldr	r0, [r0, #4]
   b59ee:	4611      	mov	r1, r2
   b59f0:	f7fe bf1e 	b.w	b4830 <network_listening>

000b59f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b59f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59f8:	b095      	sub	sp, #84	; 0x54
   b59fa:	4614      	mov	r4, r2
   b59fc:	460d      	mov	r5, r1
   b59fe:	4607      	mov	r7, r0
    IPAddress addr;
   b5a00:	f7ff fdf2 	bl	b55e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5a04:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5a06:	221c      	movs	r2, #28
   b5a08:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5a0a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5a0c:	f000 fd88 	bl	b6520 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5a10:	2340      	movs	r3, #64	; 0x40
   b5a12:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5a14:	4620      	mov	r0, r4
   b5a16:	466b      	mov	r3, sp
   b5a18:	aa0c      	add	r2, sp, #48	; 0x30
   b5a1a:	2100      	movs	r1, #0
   b5a1c:	f7fe fd84 	bl	b4528 <netdb_getaddrinfo>
    if (!r) {
   b5a20:	4604      	mov	r4, r0
   b5a22:	2800      	cmp	r0, #0
   b5a24:	d14b      	bne.n	b5abe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a26:	4602      	mov	r2, r0
   b5a28:	2101      	movs	r1, #1
   b5a2a:	6868      	ldr	r0, [r5, #4]
   b5a2c:	f7fe fee0 	bl	b47f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a34:	4622      	mov	r2, r4
   b5a36:	6868      	ldr	r0, [r5, #4]
   b5a38:	f7fe feda 	bl	b47f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a3e:	4681      	mov	r9, r0
        bool ok = false;
   b5a40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a42:	2e00      	cmp	r6, #0
   b5a44:	d03b      	beq.n	b5abe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a46:	2900      	cmp	r1, #0
   b5a48:	d139      	bne.n	b5abe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a4a:	6873      	ldr	r3, [r6, #4]
   b5a4c:	2b02      	cmp	r3, #2
   b5a4e:	d003      	beq.n	b5a58 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a50:	2b0a      	cmp	r3, #10
   b5a52:	d011      	beq.n	b5a78 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a54:	69f6      	ldr	r6, [r6, #28]
   b5a56:	e7f4      	b.n	b5a42 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5a58:	f1b8 0f00 	cmp.w	r8, #0
   b5a5c:	d0fa      	beq.n	b5a54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5a5e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5a60:	a806      	add	r0, sp, #24
   b5a62:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5a64:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5a66:	f7ff fded 	bl	b5644 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a6c:	1d3c      	adds	r4, r7, #4
   b5a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a70:	682b      	ldr	r3, [r5, #0]
   b5a72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a74:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5a76:	e7ed      	b.n	b5a54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5a78:	f1b9 0f00 	cmp.w	r9, #0
   b5a7c:	d0ea      	beq.n	b5a54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5a7e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5a80:	2210      	movs	r2, #16
   b5a82:	a801      	add	r0, sp, #4
   b5a84:	f000 fd4c 	bl	b6520 <memset>
                    a.v = 6;
   b5a88:	2306      	movs	r3, #6
   b5a8a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5a8e:	ad01      	add	r5, sp, #4
   b5a90:	f104 0308 	add.w	r3, r4, #8
   b5a94:	3418      	adds	r4, #24
   b5a96:	6818      	ldr	r0, [r3, #0]
   b5a98:	6859      	ldr	r1, [r3, #4]
   b5a9a:	462a      	mov	r2, r5
   b5a9c:	c203      	stmia	r2!, {r0, r1}
   b5a9e:	3308      	adds	r3, #8
   b5aa0:	42a3      	cmp	r3, r4
   b5aa2:	4615      	mov	r5, r2
   b5aa4:	d1f7      	bne.n	b5a96 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5aa6:	a901      	add	r1, sp, #4
   b5aa8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5aaa:	ad07      	add	r5, sp, #28
   b5aac:	f7ff fdaa 	bl	b5604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ab2:	1d3c      	adds	r4, r7, #4
   b5ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ab6:	682b      	ldr	r3, [r5, #0]
   b5ab8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5aba:	4649      	mov	r1, r9
   b5abc:	e7ca      	b.n	b5a54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5abe:	9800      	ldr	r0, [sp, #0]
   b5ac0:	f7fe fd2a 	bl	b4518 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5ac4:	4638      	mov	r0, r7
   b5ac6:	b015      	add	sp, #84	; 0x54
   b5ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5acc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5acc:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5ace:	4a03      	ldr	r2, [pc, #12]	; (b5adc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5ad0:	601a      	str	r2, [r3, #0]
   b5ad2:	2200      	movs	r2, #0
   b5ad4:	605a      	str	r2, [r3, #4]

} // spark
   b5ad6:	4770      	bx	lr
   b5ad8:	2003e714 	.word	0x2003e714
   b5adc:	000b68e0 	.word	0x000b68e0

000b5ae0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5ae0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5ae2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5ae4:	d902      	bls.n	b5aec <pinAvailable+0xc>
    return false;
   b5ae6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ae8:	b002      	add	sp, #8
   b5aea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5aec:	f1a0 030b 	sub.w	r3, r0, #11
   b5af0:	2b02      	cmp	r3, #2
   b5af2:	d81a      	bhi.n	b5b2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5af4:	4c17      	ldr	r4, [pc, #92]	; (b5b54 <pinAvailable+0x74>)
   b5af6:	7821      	ldrb	r1, [r4, #0]
   b5af8:	f3bf 8f5b 	dmb	ish
   b5afc:	f011 0101 	ands.w	r1, r1, #1
   b5b00:	d10b      	bne.n	b5b1a <pinAvailable+0x3a>
   b5b02:	4620      	mov	r0, r4
   b5b04:	9101      	str	r1, [sp, #4]
   b5b06:	f7fe facc 	bl	b40a2 <__cxa_guard_acquire>
   b5b0a:	9901      	ldr	r1, [sp, #4]
   b5b0c:	b128      	cbz	r0, b5b1a <pinAvailable+0x3a>
   b5b0e:	4812      	ldr	r0, [pc, #72]	; (b5b58 <pinAvailable+0x78>)
   b5b10:	f7fe ff54 	bl	b49bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5b14:	4620      	mov	r0, r4
   b5b16:	f7fe fac9 	bl	b40ac <__cxa_guard_release>
   b5b1a:	4b0f      	ldr	r3, [pc, #60]	; (b5b58 <pinAvailable+0x78>)
   b5b1c:	7818      	ldrb	r0, [r3, #0]
   b5b1e:	f7fe fdcb 	bl	b46b8 <hal_spi_is_enabled>
   b5b22:	2800      	cmp	r0, #0
   b5b24:	d1df      	bne.n	b5ae6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5b26:	2001      	movs	r0, #1
   b5b28:	e7de      	b.n	b5ae8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5b2a:	2801      	cmp	r0, #1
   b5b2c:	d809      	bhi.n	b5b42 <pinAvailable+0x62>
   b5b2e:	f000 f89b 	bl	b5c68 <_Z19__fetch_global_Wirev>
   b5b32:	2100      	movs	r1, #0
   b5b34:	7c00      	ldrb	r0, [r0, #16]
   b5b36:	f7fe fda7 	bl	b4688 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5b3a:	f080 0001 	eor.w	r0, r0, #1
   b5b3e:	b2c0      	uxtb	r0, r0
   b5b40:	e7d2      	b.n	b5ae8 <pinAvailable+0x8>
   b5b42:	3809      	subs	r0, #9
   b5b44:	2801      	cmp	r0, #1
   b5b46:	d8ee      	bhi.n	b5b26 <pinAvailable+0x46>
   b5b48:	f000 f84e 	bl	b5be8 <_Z22__fetch_global_Serial1v>
   b5b4c:	7c00      	ldrb	r0, [r0, #16]
   b5b4e:	f7fe fd53 	bl	b45f8 <hal_usart_is_enabled>
   b5b52:	e7f2      	b.n	b5b3a <pinAvailable+0x5a>
   b5b54:	2003e71c 	.word	0x2003e71c
   b5b58:	2003e720 	.word	0x2003e720

000b5b5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b5c:	2823      	cmp	r0, #35	; 0x23
{
   b5b5e:	b538      	push	{r3, r4, r5, lr}
   b5b60:	4604      	mov	r4, r0
   b5b62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b64:	d80a      	bhi.n	b5b7c <pinMode+0x20>
   b5b66:	29ff      	cmp	r1, #255	; 0xff
   b5b68:	d008      	beq.n	b5b7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5b6a:	f7ff ffb9 	bl	b5ae0 <pinAvailable>
   b5b6e:	b128      	cbz	r0, b5b7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5b70:	4629      	mov	r1, r5
   b5b72:	4620      	mov	r0, r4
}
   b5b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5b78:	f7fe bcde 	b.w	b4538 <HAL_Pin_Mode>
}
   b5b7c:	bd38      	pop	{r3, r4, r5, pc}

000b5b7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5b7e:	b538      	push	{r3, r4, r5, lr}
   b5b80:	4604      	mov	r4, r0
   b5b82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5b84:	f7fe fce0 	bl	b4548 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5b88:	28ff      	cmp	r0, #255	; 0xff
   b5b8a:	d010      	beq.n	b5bae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5b8c:	2806      	cmp	r0, #6
   b5b8e:	d804      	bhi.n	b5b9a <digitalWrite+0x1c>
   b5b90:	234d      	movs	r3, #77	; 0x4d
   b5b92:	fa23 f000 	lsr.w	r0, r3, r0
   b5b96:	07c3      	lsls	r3, r0, #31
   b5b98:	d409      	bmi.n	b5bae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5b9a:	4620      	mov	r0, r4
   b5b9c:	f7ff ffa0 	bl	b5ae0 <pinAvailable>
   b5ba0:	b128      	cbz	r0, b5bae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5ba2:	4629      	mov	r1, r5
   b5ba4:	4620      	mov	r0, r4
}
   b5ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5baa:	f7fe bcd5 	b.w	b4558 <HAL_GPIO_Write>
}
   b5bae:	bd38      	pop	{r3, r4, r5, pc}

000b5bb0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bb0:	4770      	bx	lr
	...

000b5bb4 <_Z20acquireSerial1Bufferv>:
{
   b5bb4:	b538      	push	{r3, r4, r5, lr}
   b5bb6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5bb8:	2514      	movs	r5, #20
   b5bba:	462a      	mov	r2, r5
   b5bbc:	2100      	movs	r1, #0
   b5bbe:	f000 fcaf 	bl	b6520 <memset>
   b5bc2:	8025      	strh	r5, [r4, #0]
   b5bc4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bc6:	4907      	ldr	r1, [pc, #28]	; (b5be4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5bc8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5bcc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bce:	f000 f86f 	bl	b5cb0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bd2:	4904      	ldr	r1, [pc, #16]	; (b5be4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5bd4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bd6:	4628      	mov	r0, r5
   b5bd8:	f000 f86a 	bl	b5cb0 <_ZnajRKSt9nothrow_t>
    };
   b5bdc:	60e0      	str	r0, [r4, #12]
}
   b5bde:	4620      	mov	r0, r4
   b5be0:	bd38      	pop	{r3, r4, r5, pc}
   b5be2:	bf00      	nop
   b5be4:	000b6914 	.word	0x000b6914

000b5be8 <_Z22__fetch_global_Serial1v>:
{
   b5be8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bea:	4d0e      	ldr	r5, [pc, #56]	; (b5c24 <_Z22__fetch_global_Serial1v+0x3c>)
   b5bec:	7829      	ldrb	r1, [r5, #0]
   b5bee:	f3bf 8f5b 	dmb	ish
   b5bf2:	f011 0401 	ands.w	r4, r1, #1
{
   b5bf6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bf8:	d111      	bne.n	b5c1e <_Z22__fetch_global_Serial1v+0x36>
   b5bfa:	4628      	mov	r0, r5
   b5bfc:	f7fe fa51 	bl	b40a2 <__cxa_guard_acquire>
   b5c00:	b168      	cbz	r0, b5c1e <_Z22__fetch_global_Serial1v+0x36>
   b5c02:	a801      	add	r0, sp, #4
   b5c04:	f7ff ffd6 	bl	b5bb4 <_Z20acquireSerial1Bufferv>
   b5c08:	aa01      	add	r2, sp, #4
   b5c0a:	4621      	mov	r1, r4
   b5c0c:	4806      	ldr	r0, [pc, #24]	; (b5c28 <_Z22__fetch_global_Serial1v+0x40>)
   b5c0e:	f7ff fe3b 	bl	b5888 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5c12:	4628      	mov	r0, r5
   b5c14:	f7fe fa4a 	bl	b40ac <__cxa_guard_release>
   b5c18:	4804      	ldr	r0, [pc, #16]	; (b5c2c <_Z22__fetch_global_Serial1v+0x44>)
   b5c1a:	f000 fc6d 	bl	b64f8 <atexit>
    return serial1;
}
   b5c1e:	4802      	ldr	r0, [pc, #8]	; (b5c28 <_Z22__fetch_global_Serial1v+0x40>)
   b5c20:	b007      	add	sp, #28
   b5c22:	bd30      	pop	{r4, r5, pc}
   b5c24:	2003e728 	.word	0x2003e728
   b5c28:	2003e72c 	.word	0x2003e72c
   b5c2c:	000b5bb1 	.word	0x000b5bb1

000b5c30 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c30:	4770      	bx	lr
	...

000b5c34 <_Z17acquireWireBufferv>:
{
   b5c34:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5c36:	4b0a      	ldr	r3, [pc, #40]	; (b5c60 <_Z17acquireWireBufferv+0x2c>)
   b5c38:	6003      	str	r3, [r0, #0]
   b5c3a:	2301      	movs	r3, #1
{
   b5c3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5c3e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5c40:	4908      	ldr	r1, [pc, #32]	; (b5c64 <_Z17acquireWireBufferv+0x30>)
   b5c42:	2020      	movs	r0, #32
   b5c44:	f000 f834 	bl	b5cb0 <_ZnajRKSt9nothrow_t>
	};
   b5c48:	2520      	movs	r5, #32
   b5c4a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5c4c:	4905      	ldr	r1, [pc, #20]	; (b5c64 <_Z17acquireWireBufferv+0x30>)
	};
   b5c4e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5c50:	4628      	mov	r0, r5
   b5c52:	f000 f82d 	bl	b5cb0 <_ZnajRKSt9nothrow_t>
	};
   b5c56:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5c5a:	4620      	mov	r0, r4
   b5c5c:	bd38      	pop	{r3, r4, r5, pc}
   b5c5e:	bf00      	nop
   b5c60:	00010018 	.word	0x00010018
   b5c64:	000b6914 	.word	0x000b6914

000b5c68 <_Z19__fetch_global_Wirev>:
{
   b5c68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c6a:	4d0e      	ldr	r5, [pc, #56]	; (b5ca4 <_Z19__fetch_global_Wirev+0x3c>)
   b5c6c:	7829      	ldrb	r1, [r5, #0]
   b5c6e:	f3bf 8f5b 	dmb	ish
   b5c72:	f011 0401 	ands.w	r4, r1, #1
{
   b5c76:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c78:	d111      	bne.n	b5c9e <_Z19__fetch_global_Wirev+0x36>
   b5c7a:	4628      	mov	r0, r5
   b5c7c:	f7fe fa11 	bl	b40a2 <__cxa_guard_acquire>
   b5c80:	b168      	cbz	r0, b5c9e <_Z19__fetch_global_Wirev+0x36>
   b5c82:	4668      	mov	r0, sp
   b5c84:	f7ff ffd6 	bl	b5c34 <_Z17acquireWireBufferv>
   b5c88:	466a      	mov	r2, sp
   b5c8a:	4621      	mov	r1, r4
   b5c8c:	4806      	ldr	r0, [pc, #24]	; (b5ca8 <_Z19__fetch_global_Wirev+0x40>)
   b5c8e:	f7ff fe57 	bl	b5940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5c92:	4628      	mov	r0, r5
   b5c94:	f7fe fa0a 	bl	b40ac <__cxa_guard_release>
   b5c98:	4804      	ldr	r0, [pc, #16]	; (b5cac <_Z19__fetch_global_Wirev+0x44>)
   b5c9a:	f000 fc2d 	bl	b64f8 <atexit>
	return wire;
}
   b5c9e:	4802      	ldr	r0, [pc, #8]	; (b5ca8 <_Z19__fetch_global_Wirev+0x40>)
   b5ca0:	b007      	add	sp, #28
   b5ca2:	bd30      	pop	{r4, r5, pc}
   b5ca4:	2003e744 	.word	0x2003e744
   b5ca8:	2003e748 	.word	0x2003e748
   b5cac:	000b5c31 	.word	0x000b5c31

000b5cb0 <_ZnajRKSt9nothrow_t>:
   b5cb0:	f7fe b9f3 	b.w	b409a <_Znaj>

000b5cb4 <_ZSt25__throw_bad_function_callv>:
   b5cb4:	b508      	push	{r3, lr}
   b5cb6:	f7fe fe23 	bl	b4900 <abort>
	...

000b5cbc <__aeabi_drsub>:
   b5cbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5cc0:	e002      	b.n	b5cc8 <__adddf3>
   b5cc2:	bf00      	nop

000b5cc4 <__aeabi_dsub>:
   b5cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5cc8 <__adddf3>:
   b5cc8:	b530      	push	{r4, r5, lr}
   b5cca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5cce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5cd2:	ea94 0f05 	teq	r4, r5
   b5cd6:	bf08      	it	eq
   b5cd8:	ea90 0f02 	teqeq	r0, r2
   b5cdc:	bf1f      	itttt	ne
   b5cde:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5ce2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5ce6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5cea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5cee:	f000 80e2 	beq.w	b5eb6 <__adddf3+0x1ee>
   b5cf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5cf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5cfa:	bfb8      	it	lt
   b5cfc:	426d      	neglt	r5, r5
   b5cfe:	dd0c      	ble.n	b5d1a <__adddf3+0x52>
   b5d00:	442c      	add	r4, r5
   b5d02:	ea80 0202 	eor.w	r2, r0, r2
   b5d06:	ea81 0303 	eor.w	r3, r1, r3
   b5d0a:	ea82 0000 	eor.w	r0, r2, r0
   b5d0e:	ea83 0101 	eor.w	r1, r3, r1
   b5d12:	ea80 0202 	eor.w	r2, r0, r2
   b5d16:	ea81 0303 	eor.w	r3, r1, r3
   b5d1a:	2d36      	cmp	r5, #54	; 0x36
   b5d1c:	bf88      	it	hi
   b5d1e:	bd30      	pophi	{r4, r5, pc}
   b5d20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5d28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5d2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5d30:	d002      	beq.n	b5d38 <__adddf3+0x70>
   b5d32:	4240      	negs	r0, r0
   b5d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5d38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5d40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5d44:	d002      	beq.n	b5d4c <__adddf3+0x84>
   b5d46:	4252      	negs	r2, r2
   b5d48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5d4c:	ea94 0f05 	teq	r4, r5
   b5d50:	f000 80a7 	beq.w	b5ea2 <__adddf3+0x1da>
   b5d54:	f1a4 0401 	sub.w	r4, r4, #1
   b5d58:	f1d5 0e20 	rsbs	lr, r5, #32
   b5d5c:	db0d      	blt.n	b5d7a <__adddf3+0xb2>
   b5d5e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5d62:	fa22 f205 	lsr.w	r2, r2, r5
   b5d66:	1880      	adds	r0, r0, r2
   b5d68:	f141 0100 	adc.w	r1, r1, #0
   b5d6c:	fa03 f20e 	lsl.w	r2, r3, lr
   b5d70:	1880      	adds	r0, r0, r2
   b5d72:	fa43 f305 	asr.w	r3, r3, r5
   b5d76:	4159      	adcs	r1, r3
   b5d78:	e00e      	b.n	b5d98 <__adddf3+0xd0>
   b5d7a:	f1a5 0520 	sub.w	r5, r5, #32
   b5d7e:	f10e 0e20 	add.w	lr, lr, #32
   b5d82:	2a01      	cmp	r2, #1
   b5d84:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5d88:	bf28      	it	cs
   b5d8a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5d8e:	fa43 f305 	asr.w	r3, r3, r5
   b5d92:	18c0      	adds	r0, r0, r3
   b5d94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5d9c:	d507      	bpl.n	b5dae <__adddf3+0xe6>
   b5d9e:	f04f 0e00 	mov.w	lr, #0
   b5da2:	f1dc 0c00 	rsbs	ip, ip, #0
   b5da6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5daa:	eb6e 0101 	sbc.w	r1, lr, r1
   b5dae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5db2:	d31b      	bcc.n	b5dec <__adddf3+0x124>
   b5db4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5db8:	d30c      	bcc.n	b5dd4 <__adddf3+0x10c>
   b5dba:	0849      	lsrs	r1, r1, #1
   b5dbc:	ea5f 0030 	movs.w	r0, r0, rrx
   b5dc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5dc4:	f104 0401 	add.w	r4, r4, #1
   b5dc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5dcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5dd0:	f080 809a 	bcs.w	b5f08 <__adddf3+0x240>
   b5dd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5dd8:	bf08      	it	eq
   b5dda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5dde:	f150 0000 	adcs.w	r0, r0, #0
   b5de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5de6:	ea41 0105 	orr.w	r1, r1, r5
   b5dea:	bd30      	pop	{r4, r5, pc}
   b5dec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5df0:	4140      	adcs	r0, r0
   b5df2:	eb41 0101 	adc.w	r1, r1, r1
   b5df6:	3c01      	subs	r4, #1
   b5df8:	bf28      	it	cs
   b5dfa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5dfe:	d2e9      	bcs.n	b5dd4 <__adddf3+0x10c>
   b5e00:	f091 0f00 	teq	r1, #0
   b5e04:	bf04      	itt	eq
   b5e06:	4601      	moveq	r1, r0
   b5e08:	2000      	moveq	r0, #0
   b5e0a:	fab1 f381 	clz	r3, r1
   b5e0e:	bf08      	it	eq
   b5e10:	3320      	addeq	r3, #32
   b5e12:	f1a3 030b 	sub.w	r3, r3, #11
   b5e16:	f1b3 0220 	subs.w	r2, r3, #32
   b5e1a:	da0c      	bge.n	b5e36 <__adddf3+0x16e>
   b5e1c:	320c      	adds	r2, #12
   b5e1e:	dd08      	ble.n	b5e32 <__adddf3+0x16a>
   b5e20:	f102 0c14 	add.w	ip, r2, #20
   b5e24:	f1c2 020c 	rsb	r2, r2, #12
   b5e28:	fa01 f00c 	lsl.w	r0, r1, ip
   b5e2c:	fa21 f102 	lsr.w	r1, r1, r2
   b5e30:	e00c      	b.n	b5e4c <__adddf3+0x184>
   b5e32:	f102 0214 	add.w	r2, r2, #20
   b5e36:	bfd8      	it	le
   b5e38:	f1c2 0c20 	rsble	ip, r2, #32
   b5e3c:	fa01 f102 	lsl.w	r1, r1, r2
   b5e40:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5e44:	bfdc      	itt	le
   b5e46:	ea41 010c 	orrle.w	r1, r1, ip
   b5e4a:	4090      	lslle	r0, r2
   b5e4c:	1ae4      	subs	r4, r4, r3
   b5e4e:	bfa2      	ittt	ge
   b5e50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5e54:	4329      	orrge	r1, r5
   b5e56:	bd30      	popge	{r4, r5, pc}
   b5e58:	ea6f 0404 	mvn.w	r4, r4
   b5e5c:	3c1f      	subs	r4, #31
   b5e5e:	da1c      	bge.n	b5e9a <__adddf3+0x1d2>
   b5e60:	340c      	adds	r4, #12
   b5e62:	dc0e      	bgt.n	b5e82 <__adddf3+0x1ba>
   b5e64:	f104 0414 	add.w	r4, r4, #20
   b5e68:	f1c4 0220 	rsb	r2, r4, #32
   b5e6c:	fa20 f004 	lsr.w	r0, r0, r4
   b5e70:	fa01 f302 	lsl.w	r3, r1, r2
   b5e74:	ea40 0003 	orr.w	r0, r0, r3
   b5e78:	fa21 f304 	lsr.w	r3, r1, r4
   b5e7c:	ea45 0103 	orr.w	r1, r5, r3
   b5e80:	bd30      	pop	{r4, r5, pc}
   b5e82:	f1c4 040c 	rsb	r4, r4, #12
   b5e86:	f1c4 0220 	rsb	r2, r4, #32
   b5e8a:	fa20 f002 	lsr.w	r0, r0, r2
   b5e8e:	fa01 f304 	lsl.w	r3, r1, r4
   b5e92:	ea40 0003 	orr.w	r0, r0, r3
   b5e96:	4629      	mov	r1, r5
   b5e98:	bd30      	pop	{r4, r5, pc}
   b5e9a:	fa21 f004 	lsr.w	r0, r1, r4
   b5e9e:	4629      	mov	r1, r5
   b5ea0:	bd30      	pop	{r4, r5, pc}
   b5ea2:	f094 0f00 	teq	r4, #0
   b5ea6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5eaa:	bf06      	itte	eq
   b5eac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5eb0:	3401      	addeq	r4, #1
   b5eb2:	3d01      	subne	r5, #1
   b5eb4:	e74e      	b.n	b5d54 <__adddf3+0x8c>
   b5eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5eba:	bf18      	it	ne
   b5ebc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5ec0:	d029      	beq.n	b5f16 <__adddf3+0x24e>
   b5ec2:	ea94 0f05 	teq	r4, r5
   b5ec6:	bf08      	it	eq
   b5ec8:	ea90 0f02 	teqeq	r0, r2
   b5ecc:	d005      	beq.n	b5eda <__adddf3+0x212>
   b5ece:	ea54 0c00 	orrs.w	ip, r4, r0
   b5ed2:	bf04      	itt	eq
   b5ed4:	4619      	moveq	r1, r3
   b5ed6:	4610      	moveq	r0, r2
   b5ed8:	bd30      	pop	{r4, r5, pc}
   b5eda:	ea91 0f03 	teq	r1, r3
   b5ede:	bf1e      	ittt	ne
   b5ee0:	2100      	movne	r1, #0
   b5ee2:	2000      	movne	r0, #0
   b5ee4:	bd30      	popne	{r4, r5, pc}
   b5ee6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5eea:	d105      	bne.n	b5ef8 <__adddf3+0x230>
   b5eec:	0040      	lsls	r0, r0, #1
   b5eee:	4149      	adcs	r1, r1
   b5ef0:	bf28      	it	cs
   b5ef2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5ef6:	bd30      	pop	{r4, r5, pc}
   b5ef8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5efc:	bf3c      	itt	cc
   b5efe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5f02:	bd30      	popcc	{r4, r5, pc}
   b5f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5f08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5f10:	f04f 0000 	mov.w	r0, #0
   b5f14:	bd30      	pop	{r4, r5, pc}
   b5f16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5f1a:	bf1a      	itte	ne
   b5f1c:	4619      	movne	r1, r3
   b5f1e:	4610      	movne	r0, r2
   b5f20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5f24:	bf1c      	itt	ne
   b5f26:	460b      	movne	r3, r1
   b5f28:	4602      	movne	r2, r0
   b5f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5f2e:	bf06      	itte	eq
   b5f30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5f34:	ea91 0f03 	teqeq	r1, r3
   b5f38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5f3c:	bd30      	pop	{r4, r5, pc}
   b5f3e:	bf00      	nop

000b5f40 <__aeabi_ui2d>:
   b5f40:	f090 0f00 	teq	r0, #0
   b5f44:	bf04      	itt	eq
   b5f46:	2100      	moveq	r1, #0
   b5f48:	4770      	bxeq	lr
   b5f4a:	b530      	push	{r4, r5, lr}
   b5f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5f54:	f04f 0500 	mov.w	r5, #0
   b5f58:	f04f 0100 	mov.w	r1, #0
   b5f5c:	e750      	b.n	b5e00 <__adddf3+0x138>
   b5f5e:	bf00      	nop

000b5f60 <__aeabi_i2d>:
   b5f60:	f090 0f00 	teq	r0, #0
   b5f64:	bf04      	itt	eq
   b5f66:	2100      	moveq	r1, #0
   b5f68:	4770      	bxeq	lr
   b5f6a:	b530      	push	{r4, r5, lr}
   b5f6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5f70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5f74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5f78:	bf48      	it	mi
   b5f7a:	4240      	negmi	r0, r0
   b5f7c:	f04f 0100 	mov.w	r1, #0
   b5f80:	e73e      	b.n	b5e00 <__adddf3+0x138>
   b5f82:	bf00      	nop

000b5f84 <__aeabi_f2d>:
   b5f84:	0042      	lsls	r2, r0, #1
   b5f86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5f8a:	ea4f 0131 	mov.w	r1, r1, rrx
   b5f8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5f92:	bf1f      	itttt	ne
   b5f94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5f98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5f9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5fa0:	4770      	bxne	lr
   b5fa2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5fa6:	bf08      	it	eq
   b5fa8:	4770      	bxeq	lr
   b5faa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5fae:	bf04      	itt	eq
   b5fb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5fb4:	4770      	bxeq	lr
   b5fb6:	b530      	push	{r4, r5, lr}
   b5fb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5fbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5fc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5fc4:	e71c      	b.n	b5e00 <__adddf3+0x138>
   b5fc6:	bf00      	nop

000b5fc8 <__aeabi_ul2d>:
   b5fc8:	ea50 0201 	orrs.w	r2, r0, r1
   b5fcc:	bf08      	it	eq
   b5fce:	4770      	bxeq	lr
   b5fd0:	b530      	push	{r4, r5, lr}
   b5fd2:	f04f 0500 	mov.w	r5, #0
   b5fd6:	e00a      	b.n	b5fee <__aeabi_l2d+0x16>

000b5fd8 <__aeabi_l2d>:
   b5fd8:	ea50 0201 	orrs.w	r2, r0, r1
   b5fdc:	bf08      	it	eq
   b5fde:	4770      	bxeq	lr
   b5fe0:	b530      	push	{r4, r5, lr}
   b5fe2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5fe6:	d502      	bpl.n	b5fee <__aeabi_l2d+0x16>
   b5fe8:	4240      	negs	r0, r0
   b5fea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5fee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5ff2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5ff6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5ffa:	f43f aed8 	beq.w	b5dae <__adddf3+0xe6>
   b5ffe:	f04f 0203 	mov.w	r2, #3
   b6002:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6006:	bf18      	it	ne
   b6008:	3203      	addne	r2, #3
   b600a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b600e:	bf18      	it	ne
   b6010:	3203      	addne	r2, #3
   b6012:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6016:	f1c2 0320 	rsb	r3, r2, #32
   b601a:	fa00 fc03 	lsl.w	ip, r0, r3
   b601e:	fa20 f002 	lsr.w	r0, r0, r2
   b6022:	fa01 fe03 	lsl.w	lr, r1, r3
   b6026:	ea40 000e 	orr.w	r0, r0, lr
   b602a:	fa21 f102 	lsr.w	r1, r1, r2
   b602e:	4414      	add	r4, r2
   b6030:	e6bd      	b.n	b5dae <__adddf3+0xe6>
   b6032:	bf00      	nop

000b6034 <__aeabi_dmul>:
   b6034:	b570      	push	{r4, r5, r6, lr}
   b6036:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b603a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b603e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6042:	bf1d      	ittte	ne
   b6044:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6048:	ea94 0f0c 	teqne	r4, ip
   b604c:	ea95 0f0c 	teqne	r5, ip
   b6050:	f000 f8de 	bleq	b6210 <__aeabi_dmul+0x1dc>
   b6054:	442c      	add	r4, r5
   b6056:	ea81 0603 	eor.w	r6, r1, r3
   b605a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b605e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6062:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6066:	bf18      	it	ne
   b6068:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b606c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6074:	d038      	beq.n	b60e8 <__aeabi_dmul+0xb4>
   b6076:	fba0 ce02 	umull	ip, lr, r0, r2
   b607a:	f04f 0500 	mov.w	r5, #0
   b607e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6082:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6086:	fbe0 e503 	umlal	lr, r5, r0, r3
   b608a:	f04f 0600 	mov.w	r6, #0
   b608e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6092:	f09c 0f00 	teq	ip, #0
   b6096:	bf18      	it	ne
   b6098:	f04e 0e01 	orrne.w	lr, lr, #1
   b609c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b60a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b60a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b60a8:	d204      	bcs.n	b60b4 <__aeabi_dmul+0x80>
   b60aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b60ae:	416d      	adcs	r5, r5
   b60b0:	eb46 0606 	adc.w	r6, r6, r6
   b60b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b60b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b60bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b60c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b60c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b60c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b60cc:	bf88      	it	hi
   b60ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b60d2:	d81e      	bhi.n	b6112 <__aeabi_dmul+0xde>
   b60d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b60d8:	bf08      	it	eq
   b60da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b60de:	f150 0000 	adcs.w	r0, r0, #0
   b60e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b60e6:	bd70      	pop	{r4, r5, r6, pc}
   b60e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b60ec:	ea46 0101 	orr.w	r1, r6, r1
   b60f0:	ea40 0002 	orr.w	r0, r0, r2
   b60f4:	ea81 0103 	eor.w	r1, r1, r3
   b60f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b60fc:	bfc2      	ittt	gt
   b60fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6102:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6106:	bd70      	popgt	{r4, r5, r6, pc}
   b6108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b610c:	f04f 0e00 	mov.w	lr, #0
   b6110:	3c01      	subs	r4, #1
   b6112:	f300 80ab 	bgt.w	b626c <__aeabi_dmul+0x238>
   b6116:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b611a:	bfde      	ittt	le
   b611c:	2000      	movle	r0, #0
   b611e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6122:	bd70      	pople	{r4, r5, r6, pc}
   b6124:	f1c4 0400 	rsb	r4, r4, #0
   b6128:	3c20      	subs	r4, #32
   b612a:	da35      	bge.n	b6198 <__aeabi_dmul+0x164>
   b612c:	340c      	adds	r4, #12
   b612e:	dc1b      	bgt.n	b6168 <__aeabi_dmul+0x134>
   b6130:	f104 0414 	add.w	r4, r4, #20
   b6134:	f1c4 0520 	rsb	r5, r4, #32
   b6138:	fa00 f305 	lsl.w	r3, r0, r5
   b613c:	fa20 f004 	lsr.w	r0, r0, r4
   b6140:	fa01 f205 	lsl.w	r2, r1, r5
   b6144:	ea40 0002 	orr.w	r0, r0, r2
   b6148:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b614c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6150:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6154:	fa21 f604 	lsr.w	r6, r1, r4
   b6158:	eb42 0106 	adc.w	r1, r2, r6
   b615c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6160:	bf08      	it	eq
   b6162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6166:	bd70      	pop	{r4, r5, r6, pc}
   b6168:	f1c4 040c 	rsb	r4, r4, #12
   b616c:	f1c4 0520 	rsb	r5, r4, #32
   b6170:	fa00 f304 	lsl.w	r3, r0, r4
   b6174:	fa20 f005 	lsr.w	r0, r0, r5
   b6178:	fa01 f204 	lsl.w	r2, r1, r4
   b617c:	ea40 0002 	orr.w	r0, r0, r2
   b6180:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6184:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6188:	f141 0100 	adc.w	r1, r1, #0
   b618c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6190:	bf08      	it	eq
   b6192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6196:	bd70      	pop	{r4, r5, r6, pc}
   b6198:	f1c4 0520 	rsb	r5, r4, #32
   b619c:	fa00 f205 	lsl.w	r2, r0, r5
   b61a0:	ea4e 0e02 	orr.w	lr, lr, r2
   b61a4:	fa20 f304 	lsr.w	r3, r0, r4
   b61a8:	fa01 f205 	lsl.w	r2, r1, r5
   b61ac:	ea43 0302 	orr.w	r3, r3, r2
   b61b0:	fa21 f004 	lsr.w	r0, r1, r4
   b61b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b61b8:	fa21 f204 	lsr.w	r2, r1, r4
   b61bc:	ea20 0002 	bic.w	r0, r0, r2
   b61c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b61c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b61c8:	bf08      	it	eq
   b61ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b61ce:	bd70      	pop	{r4, r5, r6, pc}
   b61d0:	f094 0f00 	teq	r4, #0
   b61d4:	d10f      	bne.n	b61f6 <__aeabi_dmul+0x1c2>
   b61d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b61da:	0040      	lsls	r0, r0, #1
   b61dc:	eb41 0101 	adc.w	r1, r1, r1
   b61e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b61e4:	bf08      	it	eq
   b61e6:	3c01      	subeq	r4, #1
   b61e8:	d0f7      	beq.n	b61da <__aeabi_dmul+0x1a6>
   b61ea:	ea41 0106 	orr.w	r1, r1, r6
   b61ee:	f095 0f00 	teq	r5, #0
   b61f2:	bf18      	it	ne
   b61f4:	4770      	bxne	lr
   b61f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b61fa:	0052      	lsls	r2, r2, #1
   b61fc:	eb43 0303 	adc.w	r3, r3, r3
   b6200:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6204:	bf08      	it	eq
   b6206:	3d01      	subeq	r5, #1
   b6208:	d0f7      	beq.n	b61fa <__aeabi_dmul+0x1c6>
   b620a:	ea43 0306 	orr.w	r3, r3, r6
   b620e:	4770      	bx	lr
   b6210:	ea94 0f0c 	teq	r4, ip
   b6214:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6218:	bf18      	it	ne
   b621a:	ea95 0f0c 	teqne	r5, ip
   b621e:	d00c      	beq.n	b623a <__aeabi_dmul+0x206>
   b6220:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6224:	bf18      	it	ne
   b6226:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b622a:	d1d1      	bne.n	b61d0 <__aeabi_dmul+0x19c>
   b622c:	ea81 0103 	eor.w	r1, r1, r3
   b6230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6234:	f04f 0000 	mov.w	r0, #0
   b6238:	bd70      	pop	{r4, r5, r6, pc}
   b623a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b623e:	bf06      	itte	eq
   b6240:	4610      	moveq	r0, r2
   b6242:	4619      	moveq	r1, r3
   b6244:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6248:	d019      	beq.n	b627e <__aeabi_dmul+0x24a>
   b624a:	ea94 0f0c 	teq	r4, ip
   b624e:	d102      	bne.n	b6256 <__aeabi_dmul+0x222>
   b6250:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6254:	d113      	bne.n	b627e <__aeabi_dmul+0x24a>
   b6256:	ea95 0f0c 	teq	r5, ip
   b625a:	d105      	bne.n	b6268 <__aeabi_dmul+0x234>
   b625c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6260:	bf1c      	itt	ne
   b6262:	4610      	movne	r0, r2
   b6264:	4619      	movne	r1, r3
   b6266:	d10a      	bne.n	b627e <__aeabi_dmul+0x24a>
   b6268:	ea81 0103 	eor.w	r1, r1, r3
   b626c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6270:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6274:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6278:	f04f 0000 	mov.w	r0, #0
   b627c:	bd70      	pop	{r4, r5, r6, pc}
   b627e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6282:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6286:	bd70      	pop	{r4, r5, r6, pc}

000b6288 <__aeabi_ddiv>:
   b6288:	b570      	push	{r4, r5, r6, lr}
   b628a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b628e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6296:	bf1d      	ittte	ne
   b6298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b629c:	ea94 0f0c 	teqne	r4, ip
   b62a0:	ea95 0f0c 	teqne	r5, ip
   b62a4:	f000 f8a7 	bleq	b63f6 <__aeabi_ddiv+0x16e>
   b62a8:	eba4 0405 	sub.w	r4, r4, r5
   b62ac:	ea81 0e03 	eor.w	lr, r1, r3
   b62b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b62b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b62b8:	f000 8088 	beq.w	b63cc <__aeabi_ddiv+0x144>
   b62bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b62c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b62c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b62c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b62cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b62d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b62d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b62d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b62dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b62e0:	429d      	cmp	r5, r3
   b62e2:	bf08      	it	eq
   b62e4:	4296      	cmpeq	r6, r2
   b62e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b62ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b62ee:	d202      	bcs.n	b62f6 <__aeabi_ddiv+0x6e>
   b62f0:	085b      	lsrs	r3, r3, #1
   b62f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b62f6:	1ab6      	subs	r6, r6, r2
   b62f8:	eb65 0503 	sbc.w	r5, r5, r3
   b62fc:	085b      	lsrs	r3, r3, #1
   b62fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b6302:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6306:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b630a:	ebb6 0e02 	subs.w	lr, r6, r2
   b630e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6312:	bf22      	ittt	cs
   b6314:	1ab6      	subcs	r6, r6, r2
   b6316:	4675      	movcs	r5, lr
   b6318:	ea40 000c 	orrcs.w	r0, r0, ip
   b631c:	085b      	lsrs	r3, r3, #1
   b631e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6322:	ebb6 0e02 	subs.w	lr, r6, r2
   b6326:	eb75 0e03 	sbcs.w	lr, r5, r3
   b632a:	bf22      	ittt	cs
   b632c:	1ab6      	subcs	r6, r6, r2
   b632e:	4675      	movcs	r5, lr
   b6330:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6334:	085b      	lsrs	r3, r3, #1
   b6336:	ea4f 0232 	mov.w	r2, r2, rrx
   b633a:	ebb6 0e02 	subs.w	lr, r6, r2
   b633e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6342:	bf22      	ittt	cs
   b6344:	1ab6      	subcs	r6, r6, r2
   b6346:	4675      	movcs	r5, lr
   b6348:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b634c:	085b      	lsrs	r3, r3, #1
   b634e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6352:	ebb6 0e02 	subs.w	lr, r6, r2
   b6356:	eb75 0e03 	sbcs.w	lr, r5, r3
   b635a:	bf22      	ittt	cs
   b635c:	1ab6      	subcs	r6, r6, r2
   b635e:	4675      	movcs	r5, lr
   b6360:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6364:	ea55 0e06 	orrs.w	lr, r5, r6
   b6368:	d018      	beq.n	b639c <__aeabi_ddiv+0x114>
   b636a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b636e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6372:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6376:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b637a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b637e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6382:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6386:	d1c0      	bne.n	b630a <__aeabi_ddiv+0x82>
   b6388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b638c:	d10b      	bne.n	b63a6 <__aeabi_ddiv+0x11e>
   b638e:	ea41 0100 	orr.w	r1, r1, r0
   b6392:	f04f 0000 	mov.w	r0, #0
   b6396:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b639a:	e7b6      	b.n	b630a <__aeabi_ddiv+0x82>
   b639c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b63a0:	bf04      	itt	eq
   b63a2:	4301      	orreq	r1, r0
   b63a4:	2000      	moveq	r0, #0
   b63a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b63aa:	bf88      	it	hi
   b63ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b63b0:	f63f aeaf 	bhi.w	b6112 <__aeabi_dmul+0xde>
   b63b4:	ebb5 0c03 	subs.w	ip, r5, r3
   b63b8:	bf04      	itt	eq
   b63ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   b63be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b63c2:	f150 0000 	adcs.w	r0, r0, #0
   b63c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b63ca:	bd70      	pop	{r4, r5, r6, pc}
   b63cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b63d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b63d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b63d8:	bfc2      	ittt	gt
   b63da:	ebd4 050c 	rsbsgt	r5, r4, ip
   b63de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b63e2:	bd70      	popgt	{r4, r5, r6, pc}
   b63e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b63e8:	f04f 0e00 	mov.w	lr, #0
   b63ec:	3c01      	subs	r4, #1
   b63ee:	e690      	b.n	b6112 <__aeabi_dmul+0xde>
   b63f0:	ea45 0e06 	orr.w	lr, r5, r6
   b63f4:	e68d      	b.n	b6112 <__aeabi_dmul+0xde>
   b63f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b63fa:	ea94 0f0c 	teq	r4, ip
   b63fe:	bf08      	it	eq
   b6400:	ea95 0f0c 	teqeq	r5, ip
   b6404:	f43f af3b 	beq.w	b627e <__aeabi_dmul+0x24a>
   b6408:	ea94 0f0c 	teq	r4, ip
   b640c:	d10a      	bne.n	b6424 <__aeabi_ddiv+0x19c>
   b640e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6412:	f47f af34 	bne.w	b627e <__aeabi_dmul+0x24a>
   b6416:	ea95 0f0c 	teq	r5, ip
   b641a:	f47f af25 	bne.w	b6268 <__aeabi_dmul+0x234>
   b641e:	4610      	mov	r0, r2
   b6420:	4619      	mov	r1, r3
   b6422:	e72c      	b.n	b627e <__aeabi_dmul+0x24a>
   b6424:	ea95 0f0c 	teq	r5, ip
   b6428:	d106      	bne.n	b6438 <__aeabi_ddiv+0x1b0>
   b642a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b642e:	f43f aefd 	beq.w	b622c <__aeabi_dmul+0x1f8>
   b6432:	4610      	mov	r0, r2
   b6434:	4619      	mov	r1, r3
   b6436:	e722      	b.n	b627e <__aeabi_dmul+0x24a>
   b6438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b643c:	bf18      	it	ne
   b643e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6442:	f47f aec5 	bne.w	b61d0 <__aeabi_dmul+0x19c>
   b6446:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b644a:	f47f af0d 	bne.w	b6268 <__aeabi_dmul+0x234>
   b644e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6452:	f47f aeeb 	bne.w	b622c <__aeabi_dmul+0x1f8>
   b6456:	e712      	b.n	b627e <__aeabi_dmul+0x24a>

000b6458 <__aeabi_d2f>:
   b6458:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b645c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6460:	bf24      	itt	cs
   b6462:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6466:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b646a:	d90d      	bls.n	b6488 <__aeabi_d2f+0x30>
   b646c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6470:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6474:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6478:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b647c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6480:	bf08      	it	eq
   b6482:	f020 0001 	biceq.w	r0, r0, #1
   b6486:	4770      	bx	lr
   b6488:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b648c:	d121      	bne.n	b64d2 <__aeabi_d2f+0x7a>
   b648e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6492:	bfbc      	itt	lt
   b6494:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6498:	4770      	bxlt	lr
   b649a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b649e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b64a2:	f1c2 0218 	rsb	r2, r2, #24
   b64a6:	f1c2 0c20 	rsb	ip, r2, #32
   b64aa:	fa10 f30c 	lsls.w	r3, r0, ip
   b64ae:	fa20 f002 	lsr.w	r0, r0, r2
   b64b2:	bf18      	it	ne
   b64b4:	f040 0001 	orrne.w	r0, r0, #1
   b64b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b64bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b64c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b64c4:	ea40 000c 	orr.w	r0, r0, ip
   b64c8:	fa23 f302 	lsr.w	r3, r3, r2
   b64cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b64d0:	e7cc      	b.n	b646c <__aeabi_d2f+0x14>
   b64d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b64d6:	d107      	bne.n	b64e8 <__aeabi_d2f+0x90>
   b64d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b64dc:	bf1e      	ittt	ne
   b64de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b64e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b64e6:	4770      	bxne	lr
   b64e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b64ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b64f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b64f4:	4770      	bx	lr
   b64f6:	bf00      	nop

000b64f8 <atexit>:
   b64f8:	2300      	movs	r3, #0
   b64fa:	4601      	mov	r1, r0
   b64fc:	461a      	mov	r2, r3
   b64fe:	4618      	mov	r0, r3
   b6500:	f000 b872 	b.w	b65e8 <__register_exitproc>

000b6504 <memcpy>:
   b6504:	440a      	add	r2, r1
   b6506:	4291      	cmp	r1, r2
   b6508:	f100 33ff 	add.w	r3, r0, #4294967295
   b650c:	d100      	bne.n	b6510 <memcpy+0xc>
   b650e:	4770      	bx	lr
   b6510:	b510      	push	{r4, lr}
   b6512:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6516:	f803 4f01 	strb.w	r4, [r3, #1]!
   b651a:	4291      	cmp	r1, r2
   b651c:	d1f9      	bne.n	b6512 <memcpy+0xe>
   b651e:	bd10      	pop	{r4, pc}

000b6520 <memset>:
   b6520:	4402      	add	r2, r0
   b6522:	4603      	mov	r3, r0
   b6524:	4293      	cmp	r3, r2
   b6526:	d100      	bne.n	b652a <memset+0xa>
   b6528:	4770      	bx	lr
   b652a:	f803 1b01 	strb.w	r1, [r3], #1
   b652e:	e7f9      	b.n	b6524 <memset+0x4>

000b6530 <srand>:
   b6530:	b538      	push	{r3, r4, r5, lr}
   b6532:	4b10      	ldr	r3, [pc, #64]	; (b6574 <srand+0x44>)
   b6534:	681d      	ldr	r5, [r3, #0]
   b6536:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6538:	4604      	mov	r4, r0
   b653a:	b9b3      	cbnz	r3, b656a <srand+0x3a>
   b653c:	2018      	movs	r0, #24
   b653e:	f7fe f9bf 	bl	b48c0 <malloc>
   b6542:	4602      	mov	r2, r0
   b6544:	63a8      	str	r0, [r5, #56]	; 0x38
   b6546:	b920      	cbnz	r0, b6552 <srand+0x22>
   b6548:	4b0b      	ldr	r3, [pc, #44]	; (b6578 <srand+0x48>)
   b654a:	480c      	ldr	r0, [pc, #48]	; (b657c <srand+0x4c>)
   b654c:	2142      	movs	r1, #66	; 0x42
   b654e:	f7fe f9e7 	bl	b4920 <__assert_func>
   b6552:	490b      	ldr	r1, [pc, #44]	; (b6580 <srand+0x50>)
   b6554:	4b0b      	ldr	r3, [pc, #44]	; (b6584 <srand+0x54>)
   b6556:	e9c0 1300 	strd	r1, r3, [r0]
   b655a:	4b0b      	ldr	r3, [pc, #44]	; (b6588 <srand+0x58>)
   b655c:	6083      	str	r3, [r0, #8]
   b655e:	230b      	movs	r3, #11
   b6560:	8183      	strh	r3, [r0, #12]
   b6562:	2100      	movs	r1, #0
   b6564:	2001      	movs	r0, #1
   b6566:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b656a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b656c:	2200      	movs	r2, #0
   b656e:	611c      	str	r4, [r3, #16]
   b6570:	615a      	str	r2, [r3, #20]
   b6572:	bd38      	pop	{r3, r4, r5, pc}
   b6574:	2003e5bc 	.word	0x2003e5bc
   b6578:	000b6915 	.word	0x000b6915
   b657c:	000b692c 	.word	0x000b692c
   b6580:	abcd330e 	.word	0xabcd330e
   b6584:	e66d1234 	.word	0xe66d1234
   b6588:	0005deec 	.word	0x0005deec

000b658c <strcpy>:
   b658c:	4603      	mov	r3, r0
   b658e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6592:	f803 2b01 	strb.w	r2, [r3], #1
   b6596:	2a00      	cmp	r2, #0
   b6598:	d1f9      	bne.n	b658e <strcpy+0x2>
   b659a:	4770      	bx	lr

000b659c <strdup>:
   b659c:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <strdup+0xc>)
   b659e:	4601      	mov	r1, r0
   b65a0:	6818      	ldr	r0, [r3, #0]
   b65a2:	f000 b803 	b.w	b65ac <_strdup_r>
   b65a6:	bf00      	nop
   b65a8:	2003e5bc 	.word	0x2003e5bc

000b65ac <_strdup_r>:
   b65ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65ae:	4604      	mov	r4, r0
   b65b0:	4608      	mov	r0, r1
   b65b2:	460d      	mov	r5, r1
   b65b4:	f000 f80f 	bl	b65d6 <strlen>
   b65b8:	1c42      	adds	r2, r0, #1
   b65ba:	4611      	mov	r1, r2
   b65bc:	4620      	mov	r0, r4
   b65be:	9201      	str	r2, [sp, #4]
   b65c0:	f7fe f9a6 	bl	b4910 <_malloc_r>
   b65c4:	4604      	mov	r4, r0
   b65c6:	b118      	cbz	r0, b65d0 <_strdup_r+0x24>
   b65c8:	9a01      	ldr	r2, [sp, #4]
   b65ca:	4629      	mov	r1, r5
   b65cc:	f7ff ff9a 	bl	b6504 <memcpy>
   b65d0:	4620      	mov	r0, r4
   b65d2:	b003      	add	sp, #12
   b65d4:	bd30      	pop	{r4, r5, pc}

000b65d6 <strlen>:
   b65d6:	4603      	mov	r3, r0
   b65d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b65dc:	2a00      	cmp	r2, #0
   b65de:	d1fb      	bne.n	b65d8 <strlen+0x2>
   b65e0:	1a18      	subs	r0, r3, r0
   b65e2:	3801      	subs	r0, #1
   b65e4:	4770      	bx	lr
	...

000b65e8 <__register_exitproc>:
   b65e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b65ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b66a8 <__register_exitproc+0xc0>
   b65f0:	4606      	mov	r6, r0
   b65f2:	f8d8 0000 	ldr.w	r0, [r8]
   b65f6:	461f      	mov	r7, r3
   b65f8:	460d      	mov	r5, r1
   b65fa:	4691      	mov	r9, r2
   b65fc:	f000 f856 	bl	b66ac <__retarget_lock_acquire_recursive>
   b6600:	4b25      	ldr	r3, [pc, #148]	; (b6698 <__register_exitproc+0xb0>)
   b6602:	681c      	ldr	r4, [r3, #0]
   b6604:	b934      	cbnz	r4, b6614 <__register_exitproc+0x2c>
   b6606:	4c25      	ldr	r4, [pc, #148]	; (b669c <__register_exitproc+0xb4>)
   b6608:	601c      	str	r4, [r3, #0]
   b660a:	4b25      	ldr	r3, [pc, #148]	; (b66a0 <__register_exitproc+0xb8>)
   b660c:	b113      	cbz	r3, b6614 <__register_exitproc+0x2c>
   b660e:	681b      	ldr	r3, [r3, #0]
   b6610:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6614:	6863      	ldr	r3, [r4, #4]
   b6616:	2b1f      	cmp	r3, #31
   b6618:	dd07      	ble.n	b662a <__register_exitproc+0x42>
   b661a:	f8d8 0000 	ldr.w	r0, [r8]
   b661e:	f000 f847 	bl	b66b0 <__retarget_lock_release_recursive>
   b6622:	f04f 30ff 	mov.w	r0, #4294967295
   b6626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b662a:	b34e      	cbz	r6, b6680 <__register_exitproc+0x98>
   b662c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6630:	b988      	cbnz	r0, b6656 <__register_exitproc+0x6e>
   b6632:	4b1c      	ldr	r3, [pc, #112]	; (b66a4 <__register_exitproc+0xbc>)
   b6634:	b923      	cbnz	r3, b6640 <__register_exitproc+0x58>
   b6636:	f8d8 0000 	ldr.w	r0, [r8]
   b663a:	f000 f838 	bl	b66ae <__retarget_lock_release>
   b663e:	e7f0      	b.n	b6622 <__register_exitproc+0x3a>
   b6640:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6644:	f7fe f93c 	bl	b48c0 <malloc>
   b6648:	2800      	cmp	r0, #0
   b664a:	d0f4      	beq.n	b6636 <__register_exitproc+0x4e>
   b664c:	2300      	movs	r3, #0
   b664e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6652:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6656:	6863      	ldr	r3, [r4, #4]
   b6658:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b665c:	2201      	movs	r2, #1
   b665e:	409a      	lsls	r2, r3
   b6660:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6664:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6668:	4313      	orrs	r3, r2
   b666a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b666e:	2e02      	cmp	r6, #2
   b6670:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6674:	bf02      	ittt	eq
   b6676:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b667a:	4313      	orreq	r3, r2
   b667c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6680:	6863      	ldr	r3, [r4, #4]
   b6682:	f8d8 0000 	ldr.w	r0, [r8]
   b6686:	1c5a      	adds	r2, r3, #1
   b6688:	3302      	adds	r3, #2
   b668a:	6062      	str	r2, [r4, #4]
   b668c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6690:	f000 f80e 	bl	b66b0 <__retarget_lock_release_recursive>
   b6694:	2000      	movs	r0, #0
   b6696:	e7c6      	b.n	b6626 <__register_exitproc+0x3e>
   b6698:	2003e7e8 	.word	0x2003e7e8
   b669c:	2003e75c 	.word	0x2003e75c
   b66a0:	00000000 	.word	0x00000000
   b66a4:	000b48c1 	.word	0x000b48c1
   b66a8:	2003e620 	.word	0x2003e620

000b66ac <__retarget_lock_acquire_recursive>:
   b66ac:	4770      	bx	lr

000b66ae <__retarget_lock_release>:
   b66ae:	4770      	bx	lr

000b66b0 <__retarget_lock_release_recursive>:
   b66b0:	4770      	bx	lr

000b66b2 <link_code_end>:
	...

000b66b4 <dynalib_user>:
   b66b4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b66c4:	0000 0000 6854 6572 6873 6c6f 3a64 2520     ....Threshold: %
   b66d4:	2c64 5220 7365 7465 6854 6572 6873 6c6f     d, ResetThreshol
   b66e4:	3a64 2520 2c64 4220 7361 6c65 6e69 2065     d: %d, Baseline 
   b66f4:	6625 4400 7665 6369 2065 6f63 666e 6769     %f.Device config
   b6704:	7275 6465 0000 0000                         ured....

000b670c <_ZTV9MagSensor>:
	...
   b6714:	40b3 000b 40b5 000b 6d5b 6761 525f 534d     .@...@..[mag_RMS
   b6724:	203a 6625 202c 616d 5f67 3a78 2520 2c66     : %f, mag_x: %f,
   b6734:	6d20 6761 795f 203a 6625 202c 616d 5f67      mag_y: %f, mag_
   b6744:	3a7a 2520 5d66 4400 7465 6365 6974 676e     z: %f].Detecting
   b6754:	5620 6865 6369 656c 0021 6552 656c 7361      Vehicle!.Releas
   b6764:	6465 002e 6f54 6174 206c 6556 6968 6c63     ed..Total Vehicl
   b6774:	7365 0000                                   es..

000b6778 <_ZTV14VehicleCounter>:
	...
   b6780:	44c5 000b 44c7 000b                         .D...D..

000b6788 <_ZTVN5spark13EthernetClassE>:
	...
   b6790:	499f 000b 4995 000b 498b 000b 4981 000b     .I...I...I...I..
   b67a0:	4975 000b 4969 000b 59bd 000b 59c5 000b     uI..iI...Y...Y..
   b67b0:	495d 000b 4955 000b 494b 000b 4941 000b     ]I..UI..KI..AI..
   b67c0:	59f5 000b 7061 0070 5925 252d 2d6d 6425     .Y..app.%Y-%m-%d
   b67d0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b67e0:	6d69 0065                                   ime.

000b67e4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b67ec:	5045 000b 504b 000b 5089 000b 5059 000b     EP..KP...P..YP..
   b67fc:	5047 000b                                   GP..

000b6800 <_ZTV9IPAddress>:
	...
   b6808:	5585 000b 5575 000b 5577 000b               .U..uU..wU..

000b6814 <_ZTV9USBSerial>:
	...
   b681c:	566b 000b 56d3 000b 56a9 000b 4c75 000b     kV...V...V..uL..
   b682c:	569b 000b 566d 000b 567d 000b 56cd 000b     .V..mV..}V...V..
   b683c:	568d 000b 5665 000b                         .V..eV..

000b6844 <_ZTVN5spark13CellularClassE>:
	...
   b684c:	57d3 000b 57c9 000b 57bf 000b 5775 000b     .W...W...W..uW..
   b685c:	57b3 000b 57a7 000b 59bd 000b 59c5 000b     .W...W...Y...Y..
   b686c:	579b 000b 5793 000b 5789 000b 577f 000b     .W...W...W...W..
   b687c:	59f5 000b                                   .Y..

000b6880 <_ZTV11USARTSerial>:
	...
   b6888:	580d 000b 5879 000b 5851 000b 4c75 000b     .X..yX..QX..uL..
   b6898:	5821 000b 583d 000b 582f 000b 584b 000b     !X..=X../X..KX..
   b68a8:	580f 000b 5813 000b                         .X...X..

000b68b0 <_ZTV7TwoWire>:
	...
   b68b8:	58e7 000b 5931 000b 5909 000b 58e9 000b     .X..1Y...Y...X..
   b68c8:	5911 000b 5919 000b 5921 000b 5929 000b     .Y...Y..!Y..)Y..

000b68d8 <_ZTVN5spark12NetworkClassE>:
	...
   b68e0:	597d 000b 5987 000b 5991 000b 599b 000b     }Y...Y...Y...Y..
   b68f0:	59a5 000b 59b1 000b 59bd 000b 59c5 000b     .Y...Y...Y...Y..
   b6900:	59cd 000b 59d9 000b 59e1 000b 59eb 000b     .Y...Y...Y...Y..
   b6910:	59f5 000b                                   .Y..

000b6914 <_ZSt7nothrow>:
   b6914:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6924:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6934:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6944:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6954:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6964:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6974:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6984:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6994:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b69a4:	646e 632e                                    nd.c.

000b69a9 <link_const_variable_data_end>:
   b69a9:	00          	.byte	0x00
	...

000b69ac <link_constructors_location>:
   b69ac:	000b4335 	.word	0x000b4335
   b69b0:	000b4495 	.word	0x000b4495
   b69b4:	000b49a9 	.word	0x000b49a9
   b69b8:	000b49d1 	.word	0x000b49d1
   b69bc:	000b4c65 	.word	0x000b4c65
   b69c0:	000b4ed5 	.word	0x000b4ed5
   b69c4:	000b4ee5 	.word	0x000b4ee5
   b69c8:	000b4f01 	.word	0x000b4f01
   b69cc:	000b57dd 	.word	0x000b57dd
   b69d0:	000b5acd 	.word	0x000b5acd

000b69d4 <link_constructors_end>:
	...
