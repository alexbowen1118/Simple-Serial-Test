
c:/Users/alexb/OneDrive/Desktop/Orbit/MagnetometerProject/Boron/Simple-Serial-Test/target/4.1.0/boron/Simple-Serial-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002960  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6980  000b6980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b69a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e5b4  000b69a8  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  2003e624  2003e624  0002e624  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6a18  000b6a18  00026a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6a40  000b6a40  00026a40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001342ec  00000000  00000000  00026a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000148bd  00000000  00000000  0015ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039d14  00000000  00000000  0016f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc8  00000000  00000000  001a9301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3f8  00000000  00000000  001abec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad85  00000000  00000000  001b62c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042599  00000000  00000000  001f1046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135ad3  00000000  00000000  002335df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007b90  00000000  00000000  003690b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fa37 	bl	b64a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fa3f 	bl	b64c0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5b4 	.word	0x2003e5b4
   b404c:	000b69a8 	.word	0x000b69a8
   b4050:	2003e624 	.word	0x2003e624
   b4054:	2003e624 	.word	0x2003e624
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 ff95 	bl	b4f90 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b694c 	.word	0x000b694c
   b4080:	000b6974 	.word	0x000b6974

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b958 	b.w	b4338 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f977 	bl	b437c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bf35 	b.w	b4f00 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bbe9 	b.w	b486c <malloc>

000b409a <_Znaj>:
   b409a:	f000 bbe7 	b.w	b486c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bbed 	b.w	b487c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN9MagSensorD1Ev>:

MagSensor::MagSensor() {
}

MagSensor::~MagSensor() {
}
   b40b2:	4770      	bx	lr

000b40b4 <_ZN9MagSensorD0Ev>:
MagSensor::~MagSensor() {
   b40b4:	b510      	push	{r4, lr}
}
   b40b6:	2104      	movs	r1, #4
MagSensor::~MagSensor() {
   b40b8:	4604      	mov	r4, r0
}
   b40ba:	f7ff fff0 	bl	b409e <_ZdlPvj>
   b40be:	4620      	mov	r0, r4
   b40c0:	bd10      	pop	{r4, pc}
	...

000b40c4 <_ZN9MagSensor8instanceEv>:
MagSensor &MagSensor::instance() {
   b40c4:	b510      	push	{r4, lr}
  if (!_instance) {
   b40c6:	4c06      	ldr	r4, [pc, #24]	; (b40e0 <_ZN9MagSensor8instanceEv+0x1c>)
   b40c8:	6823      	ldr	r3, [r4, #0]
   b40ca:	b933      	cbnz	r3, b40da <_ZN9MagSensor8instanceEv+0x16>
      _instance = new MagSensor();
   b40cc:	2004      	movs	r0, #4
   b40ce:	f7ff ffe2 	bl	b4096 <_Znwj>
   b40d2:	b108      	cbz	r0, b40d8 <_ZN9MagSensor8instanceEv+0x14>
MagSensor::MagSensor() {
   b40d4:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN9MagSensor8instanceEv+0x20>)
   b40d6:	6003      	str	r3, [r0, #0]
      _instance = new MagSensor();
   b40d8:	6020      	str	r0, [r4, #0]
}
   b40da:	6820      	ldr	r0, [r4, #0]
   b40dc:	bd10      	pop	{r4, pc}
   b40de:	bf00      	nop
   b40e0:	2003e670 	.word	0x2003e670
   b40e4:	000b66b4 	.word	0x000b66b4

000b40e8 <_ZN9MagSensor5setupEv>:

void MagSensor::setup(){
   b40e8:	b530      	push	{r4, r5, lr}
    
    pinMode(Light, OUTPUT);
   b40ea:	4b34      	ldr	r3, [pc, #208]	; (b41bc <_ZN9MagSensor5setupEv+0xd4>)
   b40ec:	2101      	movs	r1, #1
   b40ee:	8818      	ldrh	r0, [r3, #0]
void MagSensor::setup(){
   b40f0:	b089      	sub	sp, #36	; 0x24
    pinMode(Light, OUTPUT);
   b40f2:	f001 fd03 	bl	b5afc <pinMode>
    //Serial.begin(115200);
    Serial1.begin(115200);
   b40f6:	f001 fd47 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b40fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40fe:	f001 fbab 	bl	b5858 <_ZN11USARTSerial5beginEm>

    //waitUntil(Serial.isConnected);

    // Serial.println("Serial is connected");

    while (!Serial1.available()){
   b4102:	f001 fd41 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4106:	6803      	ldr	r3, [r0, #0]
   b4108:	691b      	ldr	r3, [r3, #16]
   b410a:	4798      	blx	r3
   b410c:	b918      	cbnz	r0, b4116 <_ZN9MagSensor5setupEv+0x2e>
        delay(10); // Wait until serial connection is established
   b410e:	200a      	movs	r0, #10
   b4110:	f000 feca 	bl	b4ea8 <delay>
    while (!Serial1.available()){
   b4114:	e7f5      	b.n	b4102 <_ZN9MagSensor5setupEv+0x1a>
    }
    delay(1000);  // Make sure the serial monitor can connect
   b4116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b411a:	f000 fec5 	bl	b4ea8 <delay>

    Serial1.readStringUntil('\n'); //wait for clean line
   b411e:	f001 fd33 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4122:	220a      	movs	r2, #10
   b4124:	4601      	mov	r1, r0
   b4126:	a804      	add	r0, sp, #16
   b4128:	f000 fe94 	bl	b4e54 <_ZN6Stream15readStringUntilEc>
   b412c:	a804      	add	r0, sp, #16
   b412e:	f000 fc83 	bl	b4a38 <_ZN6StringD1Ev>
    Serial1.parseInt(); //parse over vehicle_sensed
   b4132:	f001 fd29 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4136:	f000 fe25 	bl	b4d84 <_ZN6Stream8parseIntEv>
    threshold = Serial1.parseInt();
   b413a:	f001 fd25 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b413e:	f000 fe21 	bl	b4d84 <_ZN6Stream8parseIntEv>
   b4142:	4c1f      	ldr	r4, [pc, #124]	; (b41c0 <_ZN9MagSensor5setupEv+0xd8>)
    reset_threshold = Serial1.parseInt();
   b4144:	4d1f      	ldr	r5, [pc, #124]	; (b41c4 <_ZN9MagSensor5setupEv+0xdc>)
    threshold = Serial1.parseInt();
   b4146:	6020      	str	r0, [r4, #0]
    reset_threshold = Serial1.parseInt();
   b4148:	f001 fd1e 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b414c:	f000 fe1a 	bl	b4d84 <_ZN6Stream8parseIntEv>
   b4150:	6028      	str	r0, [r5, #0]
    baseline = Serial1.parseFloat();
   b4152:	f001 fd19 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4156:	f000 fe79 	bl	b4e4c <_ZN6Stream10parseFloatEv>
   b415a:	4b1b      	ldr	r3, [pc, #108]	; (b41c8 <_ZN9MagSensor5setupEv+0xe0>)
   b415c:	ee10 0a10 	vmov	r0, s0
   b4160:	ed83 0a00 	vstr	s0, [r3]
    Particle.publish("Device configured", String::format("Threshold: %d, ResetThreshold: %d, Baseline %f", threshold, reset_threshold, baseline));
   b4164:	f001 fede 	bl	b5f24 <__aeabi_f2d>
   b4168:	e9cd 0100 	strd	r0, r1, [sp]
   b416c:	682b      	ldr	r3, [r5, #0]
   b416e:	6822      	ldr	r2, [r4, #0]
   b4170:	4916      	ldr	r1, [pc, #88]	; (b41cc <_ZN9MagSensor5setupEv+0xe4>)
   b4172:	a804      	add	r0, sp, #16
   b4174:	f000 fd08 	bl	b4b88 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4178:	4b15      	ldr	r3, [pc, #84]	; (b41d0 <_ZN9MagSensor5setupEv+0xe8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b417a:	9a04      	ldr	r2, [sp, #16]
   b417c:	781b      	ldrb	r3, [r3, #0]
   b417e:	f88d 3000 	strb.w	r3, [sp]
   b4182:	4914      	ldr	r1, [pc, #80]	; (b41d4 <_ZN9MagSensor5setupEv+0xec>)
   b4184:	233c      	movs	r3, #60	; 0x3c
   b4186:	a802      	add	r0, sp, #8
   b4188:	f001 f860 	bl	b524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b418c:	9c03      	ldr	r4, [sp, #12]
   b418e:	b17c      	cbz	r4, b41b0 <_ZN9MagSensor5setupEv+0xc8>
      if (--_M_use_count == 0)
   b4190:	6863      	ldr	r3, [r4, #4]
   b4192:	3b01      	subs	r3, #1
   b4194:	6063      	str	r3, [r4, #4]
   b4196:	b95b      	cbnz	r3, b41b0 <_ZN9MagSensor5setupEv+0xc8>
          _M_dispose();
   b4198:	6823      	ldr	r3, [r4, #0]
   b419a:	4620      	mov	r0, r4
   b419c:	689b      	ldr	r3, [r3, #8]
   b419e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b41a0:	68a3      	ldr	r3, [r4, #8]
   b41a2:	3b01      	subs	r3, #1
   b41a4:	60a3      	str	r3, [r4, #8]
   b41a6:	b91b      	cbnz	r3, b41b0 <_ZN9MagSensor5setupEv+0xc8>
            _M_destroy();
   b41a8:	6823      	ldr	r3, [r4, #0]
   b41aa:	4620      	mov	r0, r4
   b41ac:	68db      	ldr	r3, [r3, #12]
   b41ae:	4798      	blx	r3
   b41b0:	a804      	add	r0, sp, #16
   b41b2:	f000 fc41 	bl	b4a38 <_ZN6StringD1Ev>
}
   b41b6:	b009      	add	sp, #36	; 0x24
   b41b8:	bd30      	pop	{r4, r5, pc}
   b41ba:	bf00      	nop
   b41bc:	2003e5b4 	.word	0x2003e5b4
   b41c0:	2003e66c 	.word	0x2003e66c
   b41c4:	2003e628 	.word	0x2003e628
   b41c8:	2003e668 	.word	0x2003e668
   b41cc:	000b6668 	.word	0x000b6668
   b41d0:	2003e660 	.word	0x2003e660
   b41d4:	000b6697 	.word	0x000b6697

000b41d8 <_ZN9MagSensor4loopEv>:
 * Serial data format coming from magnetometer:
 * 
 * threshold(int),reset_threshold(int),baseline(float),mag_x(float),
 * mag_y(float),mag_z(float),mag_RMS(float),vehicle_sensed(int)/n
 */
void MagSensor::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b41d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ready == 0) {
   b41dc:	f8df a108 	ldr.w	sl, [pc, #264]	; b42e8 <_ZN9MagSensor4loopEv+0x110>
   b41e0:	f8da 5000 	ldr.w	r5, [sl]
void MagSensor::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b41e4:	b085      	sub	sp, #20
    if(ready == 0) {
   b41e6:	2d00      	cmp	r5, #0
   b41e8:	d151      	bne.n	b428e <_ZN9MagSensor4loopEv+0xb6>
        Serial1.readStringUntil('\n'); //wait for clean line        
   b41ea:	f001 fccd 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b41ee:	220a      	movs	r2, #10
   b41f0:	4601      	mov	r1, r0
   b41f2:	4668      	mov	r0, sp
   b41f4:	f000 fe2e 	bl	b4e54 <_ZN6Stream15readStringUntilEc>
   b41f8:	4668      	mov	r0, sp
   b41fa:	f000 fc1d 	bl	b4a38 <_ZN6StringD1Ev>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b41fe:	f001 fcc3 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4202:	f000 fdbf 	bl	b4d84 <_ZN6Stream8parseIntEv>
   b4206:	f8df 90e4 	ldr.w	r9, [pc, #228]	; b42ec <_ZN9MagSensor4loopEv+0x114>
        Serial1.parseInt(); //parse over threshold
        Serial1.parseInt(); //parse over reset_threshold
        Serial1.parseFloat(); //parse over baseline
        mag_x = Serial1.parseFloat(); //store mag_x
   b420a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b42f0 <_ZN9MagSensor4loopEv+0x118>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b420e:	f8c9 0000 	str.w	r0, [r9]
        Serial1.parseInt(); //parse over threshold
   b4212:	f001 fcb9 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4216:	f000 fdb5 	bl	b4d84 <_ZN6Stream8parseIntEv>
        Serial1.parseInt(); //parse over reset_threshold
   b421a:	f001 fcb5 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b421e:	f000 fdb1 	bl	b4d84 <_ZN6Stream8parseIntEv>
        Serial1.parseFloat(); //parse over baseline
   b4222:	f001 fcb1 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4226:	f000 fe11 	bl	b4e4c <_ZN6Stream10parseFloatEv>
        mag_x = Serial1.parseFloat(); //store mag_x
   b422a:	f001 fcad 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b422e:	f000 fe0d 	bl	b4e4c <_ZN6Stream10parseFloatEv>
   b4232:	ed88 0a00 	vstr	s0, [r8]
        mag_y = Serial1.parseFloat(); //store mag_y
   b4236:	f001 fca7 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b423a:	f000 fe07 	bl	b4e4c <_ZN6Stream10parseFloatEv>
   b423e:	4f25      	ldr	r7, [pc, #148]	; (b42d4 <_ZN9MagSensor4loopEv+0xfc>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b4240:	4e25      	ldr	r6, [pc, #148]	; (b42d8 <_ZN9MagSensor4loopEv+0x100>)
        mag_y = Serial1.parseFloat(); //store mag_y
   b4242:	ed87 0a00 	vstr	s0, [r7]
        mag_z = Serial1.parseFloat(); //store mag_z
   b4246:	f001 fc9f 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b424a:	f000 fdff 	bl	b4e4c <_ZN6Stream10parseFloatEv>
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
        // Serial.println(vehicle_sensed);
        // Simple FSM for vehicle_sensed state
        switch(state){
   b424e:	4c23      	ldr	r4, [pc, #140]	; (b42dc <_ZN9MagSensor4loopEv+0x104>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b4250:	ed86 0a00 	vstr	s0, [r6]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4254:	f001 fc98 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4258:	f000 fdf8 	bl	b4e4c <_ZN6Stream10parseFloatEv>
        switch(state){
   b425c:	6821      	ldr	r1, [r4, #0]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b425e:	f8df b094 	ldr.w	fp, [pc, #148]	; b42f4 <_ZN9MagSensor4loopEv+0x11c>
        switch(state){
   b4262:	2901      	cmp	r1, #1
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b4264:	ed8b 0a00 	vstr	s0, [fp]
        switch(state){
   b4268:	d014      	beq.n	b4294 <_ZN9MagSensor4loopEv+0xbc>
   b426a:	2902      	cmp	r1, #2
   b426c:	d028      	beq.n	b42c0 <_ZN9MagSensor4loopEv+0xe8>
   b426e:	b971      	cbnz	r1, b428e <_ZN9MagSensor4loopEv+0xb6>
            // WAITING
            case 0: 
                if(vehicle_sensed == 1){ //capture trigger values
   b4270:	f8d9 2000 	ldr.w	r2, [r9]
   b4274:	2a01      	cmp	r2, #1
   b4276:	d10a      	bne.n	b428e <_ZN9MagSensor4loopEv+0xb6>
                    data[0] = mag_x;
   b4278:	4b19      	ldr	r3, [pc, #100]	; (b42e0 <_ZN9MagSensor4loopEv+0x108>)
   b427a:	f8d8 1000 	ldr.w	r1, [r8]
   b427e:	6019      	str	r1, [r3, #0]
                    data[1] = mag_y;
   b4280:	6839      	ldr	r1, [r7, #0]
   b4282:	6059      	str	r1, [r3, #4]
                    data[2] = mag_z;
   b4284:	6831      	ldr	r1, [r6, #0]
   b4286:	6099      	str	r1, [r3, #8]
                    data[3] = mag_RMS;
   b4288:	ed83 0a03 	vstr	s0, [r3, #12]
                    state = 1;
   b428c:	6022      	str	r2, [r4, #0]
                ready = 1;
                state = 0;
                break;
        }
    }
}
   b428e:	b005      	add	sp, #20
   b4290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                digitalWrite(Light, HIGH);
   b4294:	4b13      	ldr	r3, [pc, #76]	; (b42e4 <_ZN9MagSensor4loopEv+0x10c>)
   b4296:	8818      	ldrh	r0, [r3, #0]
   b4298:	f001 fc41 	bl	b5b1e <digitalWrite>
                if(vehicle_sensed == 0){ //capture reset values
   b429c:	f8d9 3000 	ldr.w	r3, [r9]
   b42a0:	2b00      	cmp	r3, #0
   b42a2:	d1f4      	bne.n	b428e <_ZN9MagSensor4loopEv+0xb6>
                    data[4] = mag_x;
   b42a4:	4b0e      	ldr	r3, [pc, #56]	; (b42e0 <_ZN9MagSensor4loopEv+0x108>)
   b42a6:	f8d8 2000 	ldr.w	r2, [r8]
   b42aa:	611a      	str	r2, [r3, #16]
                    data[5] = mag_y;
   b42ac:	683a      	ldr	r2, [r7, #0]
   b42ae:	615a      	str	r2, [r3, #20]
                    data[6] = mag_z;
   b42b0:	6832      	ldr	r2, [r6, #0]
   b42b2:	619a      	str	r2, [r3, #24]
                    data[7] = mag_RMS;
   b42b4:	f8db 2000 	ldr.w	r2, [fp]
   b42b8:	61da      	str	r2, [r3, #28]
                    state = 2;
   b42ba:	2302      	movs	r3, #2
   b42bc:	6023      	str	r3, [r4, #0]
   b42be:	e7e6      	b.n	b428e <_ZN9MagSensor4loopEv+0xb6>
                digitalWrite(Light, LOW);
   b42c0:	4b08      	ldr	r3, [pc, #32]	; (b42e4 <_ZN9MagSensor4loopEv+0x10c>)
   b42c2:	4629      	mov	r1, r5
   b42c4:	8818      	ldrh	r0, [r3, #0]
   b42c6:	f001 fc2a 	bl	b5b1e <digitalWrite>
                ready = 1;
   b42ca:	2301      	movs	r3, #1
   b42cc:	f8ca 3000 	str.w	r3, [sl]
                state = 0;
   b42d0:	6025      	str	r5, [r4, #0]
}
   b42d2:	e7dc      	b.n	b428e <_ZN9MagSensor4loopEv+0xb6>
   b42d4:	2003e650 	.word	0x2003e650
   b42d8:	2003e654 	.word	0x2003e654
   b42dc:	2003e65c 	.word	0x2003e65c
   b42e0:	2003e62c 	.word	0x2003e62c
   b42e4:	2003e5b4 	.word	0x2003e5b4
   b42e8:	2003e658 	.word	0x2003e658
   b42ec:	2003e624 	.word	0x2003e624
   b42f0:	2003e64c 	.word	0x2003e64c
   b42f4:	2003e664 	.word	0x2003e664

000b42f8 <_ZN9MagSensor7getDataEv>:
int MagSensor::setResetThreshold(int reset_threshold){
    return 0; //TODO
}

float* MagSensor::getData(){
    if(ready == 1){
   b42f8:	4b03      	ldr	r3, [pc, #12]	; (b4308 <_ZN9MagSensor7getDataEv+0x10>)
   b42fa:	681a      	ldr	r2, [r3, #0]
   b42fc:	2000      	movs	r0, #0
   b42fe:	2a01      	cmp	r2, #1
        ready = 0;
   b4300:	bf04      	itt	eq
   b4302:	6018      	streq	r0, [r3, #0]
        return data;
   b4304:	4801      	ldreq	r0, [pc, #4]	; (b430c <_ZN9MagSensor7getDataEv+0x14>)
    }
    return {};
   b4306:	4770      	bx	lr
   b4308:	2003e658 	.word	0x2003e658
   b430c:	2003e62c 	.word	0x2003e62c

000b4310 <_GLOBAL__sub_I__ZN9MagSensor9_instanceE>:
        val_(val) {
   b4310:	4b01      	ldr	r3, [pc, #4]	; (b4318 <_GLOBAL__sub_I__ZN9MagSensor9_instanceE+0x8>)
   b4312:	2200      	movs	r2, #0
   b4314:	701a      	strb	r2, [r3, #0]
   b4316:	4770      	bx	lr
   b4318:	2003e660 	.word	0x2003e660

000b431c <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b431c:	b513      	push	{r0, r1, r4, lr}
   b431e:	4b05      	ldr	r3, [pc, #20]	; (b4334 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b4320:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4322:	f88d 3000 	strb.w	r3, [sp]
   b4326:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4328:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b432a:	f000 ff8f 	bl	b524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b432e:	4620      	mov	r0, r4
   b4330:	b002      	add	sp, #8
   b4332:	bd10      	pop	{r4, pc}
   b4334:	2003e680 	.word	0x2003e680

000b4338 <setup>:
SYSTEM_MODE(AUTOMATIC);
SYSTEM_THREAD(ENABLED);

int totalVehicles = 0;

void setup() {  
   b4338:	b508      	push	{r3, lr}

  MagSensor::instance().setup();
   b433a:	f7ff fec3 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b433e:	f7ff fed3 	bl	b40e8 <_ZN9MagSensor5setupEv>
  //Serial.println("MagSensor instance initialized.");

  VehicleCounter::instance().setup();
   b4342:	f000 f8b5 	bl	b44b0 <_ZN14VehicleCounter8instanceEv>
  //Serial.println("Vehicle Counter Initiated");
}
   b4346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  VehicleCounter::instance().setup();
   b434a:	f000 b8c3 	b.w	b44d4 <_ZN14VehicleCounter5setupEv>

000b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b434e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4350:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4352:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4354:	b17c      	cbz	r4, b4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4356:	6863      	ldr	r3, [r4, #4]
   b4358:	3b01      	subs	r3, #1
   b435a:	6063      	str	r3, [r4, #4]
   b435c:	b95b      	cbnz	r3, b4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b435e:	6823      	ldr	r3, [r4, #0]
   b4360:	4620      	mov	r0, r4
   b4362:	689b      	ldr	r3, [r3, #8]
   b4364:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4366:	68a3      	ldr	r3, [r4, #8]
   b4368:	3b01      	subs	r3, #1
   b436a:	60a3      	str	r3, [r4, #8]
   b436c:	b91b      	cbnz	r3, b4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b436e:	6823      	ldr	r3, [r4, #0]
   b4370:	4620      	mov	r0, r4
   b4372:	68db      	ldr	r3, [r3, #12]
   b4374:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4376:	4628      	mov	r0, r5
   b4378:	bd38      	pop	{r3, r4, r5, pc}
	...

000b437c <loop>:

void loop() {
   b437c:	b510      	push	{r4, lr}
   b437e:	b08e      	sub	sp, #56	; 0x38
  float* vehicleData = MagSensor::instance().getData();
   b4380:	f7ff fea0 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b4384:	f7ff ffb8 	bl	b42f8 <_ZN9MagSensor7getDataEv>
   b4388:	4604      	mov	r4, r0
  MagSensor::instance().loop();
   b438a:	f7ff fe9b 	bl	b40c4 <_ZN9MagSensor8instanceEv>
   b438e:	f7ff ff23 	bl	b41d8 <_ZN9MagSensor4loopEv>
  if(vehicleData != 0){
   b4392:	2c00      	cmp	r4, #0
   b4394:	d061      	beq.n	b445a <loop+0xde>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        vehicleData[3],
                        vehicleData[0],
                        vehicleData[1],
                        vehicleData[2] ));
   b4396:	68e0      	ldr	r0, [r4, #12]
   b4398:	f001 fdc4 	bl	b5f24 <__aeabi_f2d>
   b439c:	4602      	mov	r2, r0
   b439e:	460b      	mov	r3, r1
   b43a0:	68a0      	ldr	r0, [r4, #8]
   b43a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b43a6:	f001 fdbd 	bl	b5f24 <__aeabi_f2d>
   b43aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b43ae:	6860      	ldr	r0, [r4, #4]
   b43b0:	f001 fdb8 	bl	b5f24 <__aeabi_f2d>
   b43b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b43b8:	6820      	ldr	r0, [r4, #0]
   b43ba:	f001 fdb3 	bl	b5f24 <__aeabi_f2d>
   b43be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b43c2:	e9cd 0100 	strd	r0, r1, [sp]
   b43c6:	4926      	ldr	r1, [pc, #152]	; (b4460 <loop+0xe4>)
   b43c8:	a80a      	add	r0, sp, #40	; 0x28
   b43ca:	f000 fbdd 	bl	b4b88 <_ZN6String6formatEPKcz>
   b43ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b43d0:	4924      	ldr	r1, [pc, #144]	; (b4464 <loop+0xe8>)
   b43d2:	a808      	add	r0, sp, #32
   b43d4:	f7ff ffa2 	bl	b431c <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b43d8:	a809      	add	r0, sp, #36	; 0x24
   b43da:	f7ff ffb8 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b43de:	a80a      	add	r0, sp, #40	; 0x28
   b43e0:	f000 fb2a 	bl	b4a38 <_ZN6StringD1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        vehicleData[7],
                        vehicleData[4],
                        vehicleData[5],
                        vehicleData[6]));
   b43e4:	69e0      	ldr	r0, [r4, #28]
   b43e6:	f001 fd9d 	bl	b5f24 <__aeabi_f2d>
   b43ea:	4602      	mov	r2, r0
   b43ec:	460b      	mov	r3, r1
   b43ee:	69a0      	ldr	r0, [r4, #24]
   b43f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b43f4:	f001 fd96 	bl	b5f24 <__aeabi_f2d>
   b43f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b43fc:	6960      	ldr	r0, [r4, #20]
   b43fe:	f001 fd91 	bl	b5f24 <__aeabi_f2d>
   b4402:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4406:	6920      	ldr	r0, [r4, #16]
   b4408:	f001 fd8c 	bl	b5f24 <__aeabi_f2d>
   b440c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b4410:	e9cd 0100 	strd	r0, r1, [sp]
   b4414:	4912      	ldr	r1, [pc, #72]	; (b4460 <loop+0xe4>)
   b4416:	a80a      	add	r0, sp, #40	; 0x28
   b4418:	f000 fbb6 	bl	b4b88 <_ZN6String6formatEPKcz>
   b441c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b441e:	4912      	ldr	r1, [pc, #72]	; (b4468 <loop+0xec>)
   b4420:	a808      	add	r0, sp, #32
   b4422:	f7ff ff7b 	bl	b431c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4426:	a809      	add	r0, sp, #36	; 0x24
   b4428:	f7ff ff91 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b442c:	a80a      	add	r0, sp, #40	; 0x28
   b442e:	f000 fb03 	bl	b4a38 <_ZN6StringD1Ev>
    Particle.publish("Total Vehicles", String(VehicleCounter::instance().loop())); // output vehicle count              
   b4432:	f000 f83d 	bl	b44b0 <_ZN14VehicleCounter8instanceEv>
   b4436:	f000 f84f 	bl	b44d8 <_ZN14VehicleCounter4loopEv>
   b443a:	220a      	movs	r2, #10
   b443c:	4601      	mov	r1, r0
   b443e:	a80a      	add	r0, sp, #40	; 0x28
   b4440:	f000 fb6b 	bl	b4b1a <_ZN6StringC1Eih>
   b4444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4446:	4909      	ldr	r1, [pc, #36]	; (b446c <loop+0xf0>)
   b4448:	a808      	add	r0, sp, #32
   b444a:	f7ff ff67 	bl	b431c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b444e:	a809      	add	r0, sp, #36	; 0x24
   b4450:	f7ff ff7d 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4454:	a80a      	add	r0, sp, #40	; 0x28
   b4456:	f000 faef 	bl	b4a38 <_ZN6StringD1Ev>
  }
   b445a:	b00e      	add	sp, #56	; 0x38
   b445c:	bd10      	pop	{r4, pc}
   b445e:	bf00      	nop
   b4460:	000b66bc 	.word	0x000b66bc
   b4464:	000b66eb 	.word	0x000b66eb
   b4468:	000b66fe 	.word	0x000b66fe
   b446c:	000b6708 	.word	0x000b6708

000b4470 <_GLOBAL__sub_I_SystemMode>:
   b4470:	b510      	push	{r4, lr}
   b4472:	4b08      	ldr	r3, [pc, #32]	; (b4494 <_GLOBAL__sub_I_SystemMode+0x24>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b4474:	4a08      	ldr	r2, [pc, #32]	; (b4498 <_GLOBAL__sub_I_SystemMode+0x28>)
   b4476:	2400      	movs	r4, #0
   b4478:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b447a:	4b08      	ldr	r3, [pc, #32]	; (b449c <_GLOBAL__sub_I_SystemMode+0x2c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b447c:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
   b447e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4482:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4484:	f000 f93e 	bl	b4704 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4488:	4621      	mov	r1, r4
   b448a:	2001      	movs	r0, #1
   b448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4490:	f000 b948 	b.w	b4724 <system_thread_set_state>
   b4494:	2003e680 	.word	0x2003e680
   b4498:	ffff0000 	.word	0xffff0000
   b449c:	2003e674 	.word	0x2003e674

000b44a0 <_ZN14VehicleCounterD1Ev>:

VehicleCounter::VehicleCounter() {
}

VehicleCounter::~VehicleCounter() {
}
   b44a0:	4770      	bx	lr

000b44a2 <_ZN14VehicleCounterD0Ev>:
VehicleCounter::~VehicleCounter() {
   b44a2:	b510      	push	{r4, lr}
}
   b44a4:	2104      	movs	r1, #4
VehicleCounter::~VehicleCounter() {
   b44a6:	4604      	mov	r4, r0
}
   b44a8:	f7ff fdf9 	bl	b409e <_ZdlPvj>
   b44ac:	4620      	mov	r0, r4
   b44ae:	bd10      	pop	{r4, pc}

000b44b0 <_ZN14VehicleCounter8instanceEv>:
VehicleCounter &VehicleCounter::instance() {
   b44b0:	b510      	push	{r4, lr}
    if (!_instance) {
   b44b2:	4c06      	ldr	r4, [pc, #24]	; (b44cc <_ZN14VehicleCounter8instanceEv+0x1c>)
   b44b4:	6823      	ldr	r3, [r4, #0]
   b44b6:	b933      	cbnz	r3, b44c6 <_ZN14VehicleCounter8instanceEv+0x16>
        _instance = new VehicleCounter();
   b44b8:	2004      	movs	r0, #4
   b44ba:	f7ff fdec 	bl	b4096 <_Znwj>
   b44be:	b108      	cbz	r0, b44c4 <_ZN14VehicleCounter8instanceEv+0x14>
VehicleCounter::VehicleCounter() {
   b44c0:	4b03      	ldr	r3, [pc, #12]	; (b44d0 <_ZN14VehicleCounter8instanceEv+0x20>)
   b44c2:	6003      	str	r3, [r0, #0]
        _instance = new VehicleCounter();
   b44c4:	6020      	str	r0, [r4, #0]
}
   b44c6:	6820      	ldr	r0, [r4, #0]
   b44c8:	bd10      	pop	{r4, pc}
   b44ca:	bf00      	nop
   b44cc:	2003e68c 	.word	0x2003e68c
   b44d0:	000b6720 	.word	0x000b6720

000b44d4 <_ZN14VehicleCounter5setupEv>:


void VehicleCounter::setup(){
}
   b44d4:	4770      	bx	lr
	...

000b44d8 <_ZN14VehicleCounter4loopEv>:

int VehicleCounter::loop(){     // updates vehicle count using MagSensor
        ++vehicleCount;
   b44d8:	4a04      	ldr	r2, [pc, #16]	; (b44ec <_ZN14VehicleCounter4loopEv+0x14>)
   b44da:	6813      	ldr	r3, [r2, #0]
   b44dc:	3301      	adds	r3, #1
   b44de:	6013      	str	r3, [r2, #0]
        ++totalVehicleCount;
   b44e0:	4b03      	ldr	r3, [pc, #12]	; (b44f0 <_ZN14VehicleCounter4loopEv+0x18>)
   b44e2:	6818      	ldr	r0, [r3, #0]
   b44e4:	3001      	adds	r0, #1
   b44e6:	6018      	str	r0, [r3, #0]
        return totalVehicleCount;
}
   b44e8:	4770      	bx	lr
   b44ea:	bf00      	nop
   b44ec:	2003e684 	.word	0x2003e684
   b44f0:	2003e688 	.word	0x2003e688

000b44f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <netdb_freeaddrinfo+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	689b      	ldr	r3, [r3, #8]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030268 	.word	0x00030268

000b4504 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <netdb_getaddrinfo+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	68db      	ldr	r3, [r3, #12]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030268 	.word	0x00030268

000b4514 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <HAL_Pin_Mode+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	689b      	ldr	r3, [r3, #8]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	0003022c 	.word	0x0003022c

000b4524 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <HAL_Get_Pin_Mode+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	68db      	ldr	r3, [r3, #12]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	0003022c 	.word	0x0003022c

000b4534 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <HAL_GPIO_Write+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	691b      	ldr	r3, [r3, #16]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003022c 	.word	0x0003022c

000b4544 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <HAL_RNG_GetRandomNumber+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	685b      	ldr	r3, [r3, #4]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030218 	.word	0x00030218

000b4554 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	695b      	ldr	r3, [r3, #20]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030218 	.word	0x00030218

000b4564 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <os_mutex_recursive_create+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030248 	.word	0x00030248

000b4574 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <inet_inet_ntop+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	695b      	ldr	r3, [r3, #20]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030264 	.word	0x00030264

000b4584 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_usart_write+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	68db      	ldr	r3, [r3, #12]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003023c 	.word	0x0003023c

000b4594 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <hal_usart_available+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	691b      	ldr	r3, [r3, #16]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003023c 	.word	0x0003023c

000b45a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <hal_usart_read+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	695b      	ldr	r3, [r3, #20]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003023c 	.word	0x0003023c

000b45b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <hal_usart_peek+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	699b      	ldr	r3, [r3, #24]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	0003023c 	.word	0x0003023c

000b45c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_usart_flush+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	69db      	ldr	r3, [r3, #28]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003023c 	.word	0x0003023c

000b45d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_usart_is_enabled+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6a1b      	ldr	r3, [r3, #32]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003023c 	.word	0x0003023c

000b45e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_usart_available_data_for_write+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003023c 	.word	0x0003023c

000b45f4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <hal_usart_begin_config+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003023c 	.word	0x0003023c

000b4604 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_usart_init_ex+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	0003023c 	.word	0x0003023c

000b4614 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_i2c_write+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6a1b      	ldr	r3, [r3, #32]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030228 	.word	0x00030228

000b4624 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_i2c_available+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030228 	.word	0x00030228

000b4634 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_i2c_read+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030228 	.word	0x00030228

000b4644 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <hal_i2c_peek+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030228 	.word	0x00030228

000b4654 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <hal_i2c_flush+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030228 	.word	0x00030228

000b4664 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <hal_i2c_is_enabled+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030228 	.word	0x00030228

000b4674 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <hal_i2c_init+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030228 	.word	0x00030228

000b4684 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_spi_init+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	69db      	ldr	r3, [r3, #28]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030230 	.word	0x00030230

000b4694 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_spi_is_enabled+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6a1b      	ldr	r3, [r3, #32]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030230 	.word	0x00030230

000b46a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <HAL_USB_USART_Init+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	681b      	ldr	r3, [r3, #0]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003024c 	.word	0x0003024c

000b46b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <HAL_USB_USART_Available_Data+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	691b      	ldr	r3, [r3, #16]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	0003024c 	.word	0x0003024c

000b46c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	695b      	ldr	r3, [r3, #20]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	0003024c 	.word	0x0003024c

000b46d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <HAL_USB_USART_Receive_Data+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	699b      	ldr	r3, [r3, #24]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	0003024c 	.word	0x0003024c

000b46e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <HAL_USB_USART_Send_Data+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	69db      	ldr	r3, [r3, #28]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	0003024c 	.word	0x0003024c

000b46f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <HAL_USB_USART_Flush_Data+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6a1b      	ldr	r3, [r3, #32]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	0003024c 	.word	0x0003024c

000b4704 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <set_system_mode+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	685b      	ldr	r3, [r3, #4]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030220 	.word	0x00030220

000b4714 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <system_delay_ms+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	695b      	ldr	r3, [r3, #20]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030220 	.word	0x00030220

000b4724 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <system_thread_set_state+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030220 	.word	0x00030220

000b4734 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <application_thread_current+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030220 	.word	0x00030220

000b4744 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <application_thread_invoke+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030220 	.word	0x00030220

000b4754 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b03      	ldr	r3, [pc, #12]	; (b4764 <system_ctrl_set_app_request_handler+0x10>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b475e:	9301      	str	r3, [sp, #4]
   b4760:	bd08      	pop	{r3, pc}
   b4762:	0000      	.short	0x0000
   b4764:	00030220 	.word	0x00030220

000b4768 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b03      	ldr	r3, [pc, #12]	; (b4778 <system_ctrl_set_result+0x10>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4772:	9301      	str	r3, [sp, #4]
   b4774:	bd08      	pop	{r3, pc}
   b4776:	0000      	.short	0x0000
   b4778:	00030220 	.word	0x00030220

000b477c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <network_connect+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	685b      	ldr	r3, [r3, #4]
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030240 	.word	0x00030240

000b478c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <network_connecting+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	689b      	ldr	r3, [r3, #8]
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030240 	.word	0x00030240

000b479c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <network_disconnect+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	68db      	ldr	r3, [r3, #12]
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030240 	.word	0x00030240

000b47ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <network_ready+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	691b      	ldr	r3, [r3, #16]
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	00030240 	.word	0x00030240

000b47bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <network_on+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	695b      	ldr	r3, [r3, #20]
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	00030240 	.word	0x00030240

000b47cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <network_off+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	699b      	ldr	r3, [r3, #24]
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	00030240 	.word	0x00030240

000b47dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <network_listen+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	69db      	ldr	r3, [r3, #28]
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	00030240 	.word	0x00030240

000b47ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <network_listening+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	6a1b      	ldr	r3, [r3, #32]
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	00030240 	.word	0x00030240

000b47fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <network_set_listen_timeout+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	00030240 	.word	0x00030240

000b480c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <network_get_listen_timeout+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	00030240 	.word	0x00030240

000b481c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <network_is_on+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	00030240 	.word	0x00030240

000b482c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <network_is_off+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	00030240 	.word	0x00030240

000b483c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <spark_cloud_flag_connected+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	695b      	ldr	r3, [r3, #20]
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	00030244 	.word	0x00030244

000b484c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <spark_send_event+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	6a1b      	ldr	r3, [r3, #32]
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	00030244 	.word	0x00030244

000b485c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	00030244 	.word	0x00030244

000b486c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <malloc+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	681b      	ldr	r3, [r3, #0]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	0003021c 	.word	0x0003021c

000b487c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <free+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	685b      	ldr	r3, [r3, #4]
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	0003021c 	.word	0x0003021c

000b488c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <realloc+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	689b      	ldr	r3, [r3, #8]
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	0003021c 	.word	0x0003021c

000b489c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <vsnprintf+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	0003021c 	.word	0x0003021c

000b48ac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <abort+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	0003021c 	.word	0x0003021c

000b48bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <_malloc_r+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	0003021c 	.word	0x0003021c

000b48cc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <__assert_func+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	0003021c 	.word	0x0003021c

000b48dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <newlib_impure_ptr_callback+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	0003021c 	.word	0x0003021c

000b48ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b48ec:	2200      	movs	r2, #0
   b48ee:	6840      	ldr	r0, [r0, #4]
   b48f0:	4611      	mov	r1, r2
   b48f2:	f7ff bf7b 	b.w	b47ec <network_listening>

000b48f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b48f6:	2200      	movs	r2, #0
   b48f8:	6840      	ldr	r0, [r0, #4]
   b48fa:	4611      	mov	r1, r2
   b48fc:	f7ff bf86 	b.w	b480c <network_get_listen_timeout>

000b4900 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4900:	6840      	ldr	r0, [r0, #4]
   b4902:	2200      	movs	r2, #0
   b4904:	f7ff bf7a 	b.w	b47fc <network_set_listen_timeout>

000b4908 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4908:	6840      	ldr	r0, [r0, #4]
   b490a:	2200      	movs	r2, #0
   b490c:	f081 0101 	eor.w	r1, r1, #1
   b4910:	f7ff bf64 	b.w	b47dc <network_listen>

000b4914 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4914:	2300      	movs	r3, #0
   b4916:	6840      	ldr	r0, [r0, #4]
   b4918:	461a      	mov	r2, r3
   b491a:	4619      	mov	r1, r3
   b491c:	f7ff bf56 	b.w	b47cc <network_off>

000b4920 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4920:	2300      	movs	r3, #0
   b4922:	6840      	ldr	r0, [r0, #4]
   b4924:	461a      	mov	r2, r3
   b4926:	4619      	mov	r1, r3
   b4928:	f7ff bf48 	b.w	b47bc <network_on>

000b492c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b492c:	2200      	movs	r2, #0
   b492e:	6840      	ldr	r0, [r0, #4]
   b4930:	4611      	mov	r1, r2
   b4932:	f7ff bf3b 	b.w	b47ac <network_ready>

000b4936 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4936:	2200      	movs	r2, #0
   b4938:	6840      	ldr	r0, [r0, #4]
   b493a:	4611      	mov	r1, r2
   b493c:	f7ff bf26 	b.w	b478c <network_connecting>

000b4940 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4940:	6840      	ldr	r0, [r0, #4]
   b4942:	2200      	movs	r2, #0
   b4944:	2102      	movs	r1, #2
   b4946:	f7ff bf29 	b.w	b479c <network_disconnect>

000b494a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b494a:	2300      	movs	r3, #0
   b494c:	6840      	ldr	r0, [r0, #4]
   b494e:	461a      	mov	r2, r3
   b4950:	f7ff bf14 	b.w	b477c <network_connect>

000b4954 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4954:	4b02      	ldr	r3, [pc, #8]	; (b4960 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4956:	2203      	movs	r2, #3
   b4958:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b495a:	4a02      	ldr	r2, [pc, #8]	; (b4964 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b495c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b495e:	4770      	bx	lr
   b4960:	2003e690 	.word	0x2003e690
   b4964:	000b6730 	.word	0x000b6730

000b4968 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4968:	b510      	push	{r4, lr}
   b496a:	4604      	mov	r4, r0
   b496c:	4608      	mov	r0, r1
{
    _spi = spi;
   b496e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4970:	f7ff fe88 	bl	b4684 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4974:	2300      	movs	r3, #0
   b4976:	6063      	str	r3, [r4, #4]
}
   b4978:	4620      	mov	r0, r4
   b497a:	bd10      	pop	{r4, pc}

000b497c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b497c:	4b05      	ldr	r3, [pc, #20]	; (b4994 <_GLOBAL__sub_I_System+0x18>)
   b497e:	2202      	movs	r2, #2
   b4980:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4982:	4b05      	ldr	r3, [pc, #20]	; (b4998 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4984:	4a05      	ldr	r2, [pc, #20]	; (b499c <_GLOBAL__sub_I_System+0x20>)
   b4986:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4988:	2000      	movs	r0, #0
   b498a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b498e:	f7ff beb9 	b.w	b4704 <set_system_mode>
   b4992:	bf00      	nop
   b4994:	2003e6a4 	.word	0x2003e6a4
   b4998:	2003e698 	.word	0x2003e698
   b499c:	ffff0000 	.word	0xffff0000

000b49a0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b49a0:	b510      	push	{r4, lr}
   b49a2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b49a4:	f001 fde7 	bl	b6576 <strlen>
   b49a8:	3801      	subs	r0, #1
   b49aa:	1823      	adds	r3, r4, r0
   b49ac:	4620      	mov	r0, r4
	while(i<j){
   b49ae:	4283      	cmp	r3, r0
   b49b0:	d906      	bls.n	b49c0 <_Z11str_reversePc+0x20>
		c = *i;
   b49b2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b49b4:	7819      	ldrb	r1, [r3, #0]
   b49b6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b49ba:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b49be:	e7f6      	b.n	b49ae <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b49c0:	bd10      	pop	{r4, pc}

000b49c2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b49c2:	b570      	push	{r4, r5, r6, lr}
   b49c4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b49c6:	1e91      	subs	r1, r2, #2
   b49c8:	2922      	cmp	r1, #34	; 0x22
   b49ca:	d81d      	bhi.n	b4a08 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b49cc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b49ce:	b930      	cbnz	r0, b49de <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b49d0:	4423      	add	r3, r4
            *ptr++ = '0';
   b49d2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b49d4:	429d      	cmp	r5, r3
   b49d6:	d210      	bcs.n	b49fa <ultoa+0x38>
            *ptr++ = '0';
   b49d8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b49dc:	e7fa      	b.n	b49d4 <ultoa+0x12>
            result.quot = a/radix;
   b49de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b49e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b49e6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b49e8:	2809      	cmp	r0, #9
                *ptr += '0';
   b49ea:	bf94      	ite	ls
   b49ec:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b49ee:	3157      	addhi	r1, #87	; 0x57
   b49f0:	b2c9      	uxtb	r1, r1
   b49f2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b49f6:	4630      	mov	r0, r6
	while(a){
   b49f8:	e7e9      	b.n	b49ce <ultoa+0xc>

	*ptr = '\0';
   b49fa:	2300      	movs	r3, #0
	str_reverse(buffer);
   b49fc:	4620      	mov	r0, r4
	*ptr = '\0';
   b49fe:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4a00:	f7ff ffce 	bl	b49a0 <_Z11str_reversePc>
	return buffer;
   b4a04:	4620      	mov	r0, r4
}
   b4a06:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4a08:	2000      	movs	r0, #0
   b4a0a:	e7fc      	b.n	b4a06 <ultoa+0x44>

000b4a0c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4a0c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b4a0e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4a10:	460c      	mov	r4, r1
   b4a12:	4615      	mov	r5, r2
	if(a<0){
   b4a14:	da0e      	bge.n	b4a34 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b4a1a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4a1e:	bf14      	ite	ne
   b4a20:	4258      	negne	r0, r3
   b4a22:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b4a24:	2301      	movs	r3, #1
		*buffer = '-';
   b4a26:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b4a28:	462a      	mov	r2, r5
   b4a2a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b4a2c:	f7ff ffc9 	bl	b49c2 <ultoa>
	}
	return buffer;
}
   b4a30:	4620      	mov	r0, r4
   b4a32:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4a34:	2301      	movs	r3, #1
   b4a36:	e7f9      	b.n	b4a2c <itoa+0x20>

000b4a38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4a38:	b510      	push	{r4, lr}
   b4a3a:	4604      	mov	r4, r0
{
	free(buffer);
   b4a3c:	6800      	ldr	r0, [r0, #0]
   b4a3e:	f7ff ff1d 	bl	b487c <free>
}
   b4a42:	4620      	mov	r0, r4
   b4a44:	bd10      	pop	{r4, pc}

000b4a46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4a46:	b510      	push	{r4, lr}
   b4a48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4a4a:	6800      	ldr	r0, [r0, #0]
   b4a4c:	b108      	cbz	r0, b4a52 <_ZN6String10invalidateEv+0xc>
   b4a4e:	f7ff ff15 	bl	b487c <free>
	buffer = NULL;
   b4a52:	2300      	movs	r3, #0
	capacity = len = 0;
   b4a54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4a58:	6023      	str	r3, [r4, #0]
}
   b4a5a:	bd10      	pop	{r4, pc}

000b4a5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4a5c:	b538      	push	{r3, r4, r5, lr}
   b4a5e:	4604      	mov	r4, r0
   b4a60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4a62:	6800      	ldr	r0, [r0, #0]
   b4a64:	3101      	adds	r1, #1
   b4a66:	f7ff ff11 	bl	b488c <realloc>
	if (newbuffer) {
   b4a6a:	b110      	cbz	r0, b4a72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4a6c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4a70:	2001      	movs	r0, #1
	}
	return 0;
}
   b4a72:	bd38      	pop	{r3, r4, r5, pc}

000b4a74 <_ZN6String7reserveEj>:
{
   b4a74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4a76:	6803      	ldr	r3, [r0, #0]
{
   b4a78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4a7a:	b123      	cbz	r3, b4a86 <_ZN6String7reserveEj+0x12>
   b4a7c:	6843      	ldr	r3, [r0, #4]
   b4a7e:	428b      	cmp	r3, r1
   b4a80:	d301      	bcc.n	b4a86 <_ZN6String7reserveEj+0x12>
   b4a82:	2001      	movs	r0, #1
}
   b4a84:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4a86:	4620      	mov	r0, r4
   b4a88:	f7ff ffe8 	bl	b4a5c <_ZN6String12changeBufferEj>
   b4a8c:	2800      	cmp	r0, #0
   b4a8e:	d0f9      	beq.n	b4a84 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4a90:	68a3      	ldr	r3, [r4, #8]
   b4a92:	2b00      	cmp	r3, #0
   b4a94:	d1f5      	bne.n	b4a82 <_ZN6String7reserveEj+0xe>
   b4a96:	6822      	ldr	r2, [r4, #0]
   b4a98:	7013      	strb	r3, [r2, #0]
   b4a9a:	e7f2      	b.n	b4a82 <_ZN6String7reserveEj+0xe>

000b4a9c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4a9e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4aa0:	4611      	mov	r1, r2
   b4aa2:	9201      	str	r2, [sp, #4]
{
   b4aa4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4aa6:	f7ff ffe5 	bl	b4a74 <_ZN6String7reserveEj>
   b4aaa:	9a01      	ldr	r2, [sp, #4]
   b4aac:	b928      	cbnz	r0, b4aba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4aae:	4620      	mov	r0, r4
   b4ab0:	f7ff ffc9 	bl	b4a46 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	b003      	add	sp, #12
   b4ab8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4aba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4abc:	4629      	mov	r1, r5
   b4abe:	6820      	ldr	r0, [r4, #0]
   b4ac0:	f001 fcf0 	bl	b64a4 <memcpy>
	buffer[len] = 0;
   b4ac4:	6822      	ldr	r2, [r4, #0]
   b4ac6:	68a3      	ldr	r3, [r4, #8]
   b4ac8:	2100      	movs	r1, #0
   b4aca:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4acc:	e7f2      	b.n	b4ab4 <_ZN6String4copyEPKcj+0x18>

000b4ace <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4ace:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4ad0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4ad2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4ad6:	4604      	mov	r4, r0
	len = 0;
   b4ad8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4ada:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4adc:	b141      	cbz	r1, b4af0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4ade:	4608      	mov	r0, r1
   b4ae0:	9101      	str	r1, [sp, #4]
   b4ae2:	f001 fd48 	bl	b6576 <strlen>
   b4ae6:	9901      	ldr	r1, [sp, #4]
   b4ae8:	4602      	mov	r2, r0
   b4aea:	4620      	mov	r0, r4
   b4aec:	f7ff ffd6 	bl	b4a9c <_ZN6String4copyEPKcj>
}
   b4af0:	4620      	mov	r0, r4
   b4af2:	b002      	add	sp, #8
   b4af4:	bd10      	pop	{r4, pc}

000b4af6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4af6:	b513      	push	{r0, r1, r4, lr}
   b4af8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4afa:	b159      	cbz	r1, b4b14 <_ZN6StringaSEPKc+0x1e>
   b4afc:	4608      	mov	r0, r1
   b4afe:	9101      	str	r1, [sp, #4]
   b4b00:	f001 fd39 	bl	b6576 <strlen>
   b4b04:	9901      	ldr	r1, [sp, #4]
   b4b06:	4602      	mov	r2, r0
   b4b08:	4620      	mov	r0, r4
   b4b0a:	f7ff ffc7 	bl	b4a9c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4b0e:	4620      	mov	r0, r4
   b4b10:	b002      	add	sp, #8
   b4b12:	bd10      	pop	{r4, pc}
	else invalidate();
   b4b14:	f7ff ff97 	bl	b4a46 <_ZN6String10invalidateEv>
   b4b18:	e7f9      	b.n	b4b0e <_ZN6StringaSEPKc+0x18>

000b4b1a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b4b1a:	b510      	push	{r4, lr}
   b4b1c:	4604      	mov	r4, r0
   b4b1e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b4b20:	2300      	movs	r3, #0
	capacity = 0;
   b4b22:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b4b26:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b4b28:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b4b2a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b4b2c:	a901      	add	r1, sp, #4
   b4b2e:	f7ff ff6d 	bl	b4a0c <itoa>
	*this = buf;
   b4b32:	a901      	add	r1, sp, #4
   b4b34:	4620      	mov	r0, r4
   b4b36:	f7ff ffde 	bl	b4af6 <_ZN6StringaSEPKc>
}
   b4b3a:	4620      	mov	r0, r4
   b4b3c:	b00a      	add	sp, #40	; 0x28
   b4b3e:	bd10      	pop	{r4, pc}

000b4b40 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4b40:	b570      	push	{r4, r5, r6, lr}
   b4b42:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4b44:	460e      	mov	r6, r1
   b4b46:	b909      	cbnz	r1, b4b4c <_ZN6String6concatEPKcj+0xc>
   b4b48:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4b4a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4b4c:	b16a      	cbz	r2, b4b6a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4b4e:	6884      	ldr	r4, [r0, #8]
   b4b50:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4b52:	4621      	mov	r1, r4
   b4b54:	f7ff ff8e 	bl	b4a74 <_ZN6String7reserveEj>
   b4b58:	2800      	cmp	r0, #0
   b4b5a:	d0f5      	beq.n	b4b48 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4b5c:	6828      	ldr	r0, [r5, #0]
   b4b5e:	68ab      	ldr	r3, [r5, #8]
   b4b60:	4631      	mov	r1, r6
   b4b62:	4418      	add	r0, r3
   b4b64:	f001 fce2 	bl	b652c <strcpy>
	len = newlen;
   b4b68:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4b6a:	2001      	movs	r0, #1
   b4b6c:	e7ed      	b.n	b4b4a <_ZN6String6concatEPKcj+0xa>

000b4b6e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4b6e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4b70:	2300      	movs	r3, #0
	buf[0] = c;
   b4b72:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4b76:	2201      	movs	r2, #1
   b4b78:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4b7a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4b7e:	f7ff ffdf 	bl	b4b40 <_ZN6String6concatEPKcj>
}
   b4b82:	b003      	add	sp, #12
   b4b84:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b88 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b4b88:	b40e      	push	{r1, r2, r3}
   b4b8a:	b570      	push	{r4, r5, r6, lr}
   b4b8c:	b087      	sub	sp, #28
   b4b8e:	ad0b      	add	r5, sp, #44	; 0x2c
   b4b90:	4604      	mov	r4, r0
   b4b92:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4b96:	9201      	str	r2, [sp, #4]
   b4b98:	462b      	mov	r3, r5
   b4b9a:	2105      	movs	r1, #5
   b4b9c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b4b9e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4ba0:	f7ff fe7c 	bl	b489c <vsnprintf>
    va_end(marker);

    String result;
   b4ba4:	490b      	ldr	r1, [pc, #44]	; (b4bd4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4ba6:	4606      	mov	r6, r0
    String result;
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff ff90 	bl	b4ace <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b4bae:	4631      	mov	r1, r6
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f7ff ff5f 	bl	b4a74 <_ZN6String7reserveEj>
    if (result.buffer) {
   b4bb6:	6820      	ldr	r0, [r4, #0]
   b4bb8:	b130      	cbz	r0, b4bc8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4bba:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b4bbc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4bbe:	462b      	mov	r3, r5
   b4bc0:	1c71      	adds	r1, r6, #1
   b4bc2:	f7ff fe6b 	bl	b489c <vsnprintf>
        va_end(marker);
        result.len = n;
   b4bc6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b4bc8:	4620      	mov	r0, r4
   b4bca:	b007      	add	sp, #28
   b4bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4bd0:	b003      	add	sp, #12
   b4bd2:	4770      	bx	lr
   b4bd4:	000b66fd 	.word	0x000b66fd

000b4bd8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4bd8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4bda:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4bdc:	4604      	mov	r4, r0
      if (_M_manager)
   b4bde:	b113      	cbz	r3, b4be6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4be0:	2203      	movs	r2, #3
   b4be2:	4601      	mov	r1, r0
   b4be4:	4798      	blx	r3
    }
   b4be6:	4620      	mov	r0, r4
   b4be8:	bd10      	pop	{r4, pc}

000b4bea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4bea:	b513      	push	{r0, r1, r4, lr}
   b4bec:	460b      	mov	r3, r1
   b4bee:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bf0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4bf4:	466c      	mov	r4, sp
   b4bf6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4bfa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4bfe:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c02:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4c06:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4c0a:	b002      	add	sp, #8
   b4c0c:	bd10      	pop	{r4, pc}
	...

000b4c10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4c10:	4802      	ldr	r0, [pc, #8]	; (b4c1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4c12:	2300      	movs	r3, #0
   b4c14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4c16:	f7ff bca5 	b.w	b4564 <os_mutex_recursive_create>
   b4c1a:	bf00      	nop
   b4c1c:	2003e6a8 	.word	0x2003e6a8

000b4c20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c22:	4606      	mov	r6, r0
   b4c24:	460d      	mov	r5, r1
  size_t n = 0;
   b4c26:	188f      	adds	r7, r1, r2
   b4c28:	2400      	movs	r4, #0
  while (size--) {
   b4c2a:	42bd      	cmp	r5, r7
   b4c2c:	d00c      	beq.n	b4c48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4c2e:	6833      	ldr	r3, [r6, #0]
   b4c30:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c34:	689b      	ldr	r3, [r3, #8]
   b4c36:	4630      	mov	r0, r6
   b4c38:	4798      	blx	r3
     if (chunk>=0)
   b4c3a:	1e03      	subs	r3, r0, #0
   b4c3c:	db01      	blt.n	b4c42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4c3e:	441c      	add	r4, r3
  while (size--) {
   b4c40:	e7f3      	b.n	b4c2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4c42:	2c00      	cmp	r4, #0
   b4c44:	bf08      	it	eq
   b4c46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4c48:	4620      	mov	r0, r4
   b4c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4c4c:	b513      	push	{r0, r1, r4, lr}
   b4c4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4c50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4c52:	b159      	cbz	r1, b4c6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4c54:	9101      	str	r1, [sp, #4]
   b4c56:	f001 fc8e 	bl	b6576 <strlen>
   b4c5a:	6823      	ldr	r3, [r4, #0]
   b4c5c:	9901      	ldr	r1, [sp, #4]
   b4c5e:	68db      	ldr	r3, [r3, #12]
   b4c60:	4602      	mov	r2, r0
   b4c62:	4620      	mov	r0, r4
    }
   b4c64:	b002      	add	sp, #8
   b4c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4c6a:	4718      	bx	r3
    }
   b4c6c:	b002      	add	sp, #8
   b4c6e:	bd10      	pop	{r4, pc}

000b4c70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4c70:	6803      	ldr	r3, [r0, #0]
   b4c72:	689b      	ldr	r3, [r3, #8]
   b4c74:	4718      	bx	r3

000b4c76 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c76:	b530      	push	{r4, r5, lr}
   b4c78:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c7a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c7c:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c82:	bf98      	it	ls
   b4c84:	220a      	movls	r2, #10
   b4c86:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c88:	460d      	mov	r5, r1
   b4c8a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c8e:	fb01 5312 	mls	r3, r1, r2, r5
   b4c92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c96:	2b09      	cmp	r3, #9
   b4c98:	bf94      	ite	ls
   b4c9a:	3330      	addls	r3, #48	; 0x30
   b4c9c:	3337      	addhi	r3, #55	; 0x37
   b4c9e:	b2db      	uxtb	r3, r3
  } while(n);
   b4ca0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4ca2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4ca6:	d9ef      	bls.n	b4c88 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ca8:	4621      	mov	r1, r4
   b4caa:	f7ff ffcf 	bl	b4c4c <_ZN5Print5writeEPKc>
}
   b4cae:	b00b      	add	sp, #44	; 0x2c
   b4cb0:	bd30      	pop	{r4, r5, pc}

000b4cb2 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4cb2:	b510      	push	{r4, lr}
   b4cb4:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4cb6:	f7ff fc4d 	bl	b4554 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4cba:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4cbc:	6823      	ldr	r3, [r4, #0]
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	695b      	ldr	r3, [r3, #20]
   b4cc2:	4798      	blx	r3
    if (c >= 0) return c;
   b4cc4:	2800      	cmp	r0, #0
   b4cc6:	da08      	bge.n	b4cda <_ZN6Stream9timedReadEv+0x28>
   b4cc8:	f7ff fc44 	bl	b4554 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4ccc:	68e3      	ldr	r3, [r4, #12]
   b4cce:	1ac0      	subs	r0, r0, r3
   b4cd0:	68a3      	ldr	r3, [r4, #8]
   b4cd2:	4298      	cmp	r0, r3
   b4cd4:	d3f2      	bcc.n	b4cbc <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4cd6:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4cda:	bd10      	pop	{r4, pc}

000b4cdc <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   b4cdc:	b510      	push	{r4, lr}
   b4cde:	4604      	mov	r4, r0
   b4ce0:	f7ff fc38 	bl	b4554 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4ce4:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   b4ce6:	6823      	ldr	r3, [r4, #0]
   b4ce8:	4620      	mov	r0, r4
   b4cea:	699b      	ldr	r3, [r3, #24]
   b4cec:	4798      	blx	r3
    if (c >= 0) return c;
   b4cee:	2800      	cmp	r0, #0
   b4cf0:	da08      	bge.n	b4d04 <_ZN6Stream9timedPeekEv+0x28>
   b4cf2:	f7ff fc2f 	bl	b4554 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4cf6:	68e3      	ldr	r3, [r4, #12]
   b4cf8:	1ac0      	subs	r0, r0, r3
   b4cfa:	68a3      	ldr	r3, [r4, #8]
   b4cfc:	4298      	cmp	r0, r3
   b4cfe:	d3f2      	bcc.n	b4ce6 <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   b4d00:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4d04:	bd10      	pop	{r4, pc}

000b4d06 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   b4d06:	b510      	push	{r4, lr}
   b4d08:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f7ff ffe6 	bl	b4cdc <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   b4d10:	2800      	cmp	r0, #0
   b4d12:	db0a      	blt.n	b4d2a <_ZN6Stream13peekNextDigitEv+0x24>
   b4d14:	282d      	cmp	r0, #45	; 0x2d
   b4d16:	d008      	beq.n	b4d2a <_ZN6Stream13peekNextDigitEv+0x24>
   b4d18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d1c:	2b09      	cmp	r3, #9
   b4d1e:	d904      	bls.n	b4d2a <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   b4d20:	6823      	ldr	r3, [r4, #0]
   b4d22:	4620      	mov	r0, r4
   b4d24:	695b      	ldr	r3, [r3, #20]
   b4d26:	4798      	blx	r3
    c = timedPeek();
   b4d28:	e7ef      	b.n	b4d0a <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   b4d2a:	bd10      	pop	{r4, pc}

000b4d2c <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   b4d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d30:	4605      	mov	r5, r0
   b4d32:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   b4d34:	f7ff ffe7 	bl	b4d06 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4d38:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   b4d3a:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   b4d3e:	db1c      	blt.n	b4d7a <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   b4d40:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   b4d42:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   b4d46:	4286      	cmp	r6, r0
   b4d48:	d008      	beq.n	b4d5c <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   b4d4a:	282d      	cmp	r0, #45	; 0x2d
   b4d4c:	d018      	beq.n	b4d80 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   b4d4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d52:	2b09      	cmp	r3, #9
   b4d54:	d802      	bhi.n	b4d5c <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   b4d56:	fb08 0404 	mla	r4, r8, r4, r0
   b4d5a:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   b4d5c:	682b      	ldr	r3, [r5, #0]
   b4d5e:	4628      	mov	r0, r5
   b4d60:	695b      	ldr	r3, [r3, #20]
   b4d62:	4798      	blx	r3
    c = timedPeek();
   b4d64:	4628      	mov	r0, r5
   b4d66:	f7ff ffb9 	bl	b4cdc <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   b4d6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d6e:	2b09      	cmp	r3, #9
   b4d70:	d9e9      	bls.n	b4d46 <_ZN6Stream8parseIntEc+0x1a>
   b4d72:	4286      	cmp	r6, r0
   b4d74:	d0f2      	beq.n	b4d5c <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   b4d76:	b107      	cbz	r7, b4d7a <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   b4d78:	4264      	negs	r4, r4
  return value;
}
   b4d7a:	4620      	mov	r0, r4
   b4d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   b4d80:	2701      	movs	r7, #1
   b4d82:	e7eb      	b.n	b4d5c <_ZN6Stream8parseIntEc+0x30>

000b4d84 <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   b4d84:	2101      	movs	r1, #1
   b4d86:	f7ff bfd1 	b.w	b4d2c <_ZN6Stream8parseIntEc>
   b4d8a:	0000      	movs	r0, r0
   b4d8c:	0000      	movs	r0, r0
	...

000b4d90 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   b4d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d94:	ed2d 8b02 	vpush	{d8}
   b4d98:	4605      	mov	r5, r0
   b4d9a:	460e      	mov	r6, r1
  bool isNegative = false;
  bool isFraction = false;
  long value = 0;
  float fraction = 1.0;

  int c = peekNextDigit();
   b4d9c:	f7ff ffb3 	bl	b4d06 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b4da0:	2800      	cmp	r0, #0
   b4da2:	db47      	blt.n	b4e34 <_ZN6Stream10parseFloatEc+0xa4>
    } else if (c == '.') {
      isFraction = true;
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
   b4da4:	f20f 099c 	addw	r9, pc, #156	; 0x9c
   b4da8:	e9d9 8900 	ldrd	r8, r9, [r9]
  long value = 0;
   b4dac:	2400      	movs	r4, #0
  float fraction = 1.0;
   b4dae:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  bool isFraction = false;
   b4db2:	4627      	mov	r7, r4
  bool isNegative = false;
   b4db4:	46a2      	mov	sl, r4
      value = value * 10 + c - '0';
   b4db6:	f04f 0b0a 	mov.w	fp, #10
    if(c == skipChar) {
   b4dba:	4286      	cmp	r6, r0
   b4dbc:	d017      	beq.n	b4dee <_ZN6Stream10parseFloatEc+0x5e>
    } else if(c == '-') {
   b4dbe:	282d      	cmp	r0, #45	; 0x2d
   b4dc0:	d033      	beq.n	b4e2a <_ZN6Stream10parseFloatEc+0x9a>
    } else if (c == '.') {
   b4dc2:	282e      	cmp	r0, #46	; 0x2e
   b4dc4:	d034      	beq.n	b4e30 <_ZN6Stream10parseFloatEc+0xa0>
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
   b4dc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4dca:	2b09      	cmp	r3, #9
   b4dcc:	d80f      	bhi.n	b4dee <_ZN6Stream10parseFloatEc+0x5e>
      value = value * 10 + c - '0';
   b4dce:	fb0b 0404 	mla	r4, fp, r4, r0
   b4dd2:	3c30      	subs	r4, #48	; 0x30
      if(isFraction)
   b4dd4:	b15f      	cbz	r7, b4dee <_ZN6Stream10parseFloatEc+0x5e>
         fraction *= 0.1;
   b4dd6:	ee18 0a10 	vmov	r0, s16
   b4dda:	f001 f8a3 	bl	b5f24 <__aeabi_f2d>
   b4dde:	4642      	mov	r2, r8
   b4de0:	464b      	mov	r3, r9
   b4de2:	f001 f8f7 	bl	b5fd4 <__aeabi_dmul>
   b4de6:	f001 fb07 	bl	b63f8 <__aeabi_d2f>
   b4dea:	ee08 0a10 	vmov	s16, r0
    }
    read();  // consume the character we got with peek
   b4dee:	682b      	ldr	r3, [r5, #0]
   b4df0:	4628      	mov	r0, r5
   b4df2:	695b      	ldr	r3, [r3, #20]
   b4df4:	4798      	blx	r3
    c = timedPeek();
   b4df6:	4628      	mov	r0, r5
   b4df8:	f7ff ff70 	bl	b4cdc <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
   b4dfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4e00:	2b09      	cmp	r3, #9
   b4e02:	d9da      	bls.n	b4dba <_ZN6Stream10parseFloatEc+0x2a>
   b4e04:	282e      	cmp	r0, #46	; 0x2e
   b4e06:	d0d8      	beq.n	b4dba <_ZN6Stream10parseFloatEc+0x2a>
   b4e08:	4286      	cmp	r6, r0
   b4e0a:	d0f0      	beq.n	b4dee <_ZN6Stream10parseFloatEc+0x5e>

  if(isNegative)
   b4e0c:	f1ba 0f00 	cmp.w	sl, #0
   b4e10:	d000      	beq.n	b4e14 <_ZN6Stream10parseFloatEc+0x84>
    value = -value;
   b4e12:	4264      	negs	r4, r4
  if(isFraction)
    return value * fraction;
   b4e14:	ee07 4a90 	vmov	s15, r4
   b4e18:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  if(isFraction)
   b4e1c:	b10f      	cbz	r7, b4e22 <_ZN6Stream10parseFloatEc+0x92>
    return value * fraction;
   b4e1e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
   b4e22:	ecbd 8b02 	vpop	{d8}
   b4e26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      isNegative = true;
   b4e2a:	f04f 0a01 	mov.w	sl, #1
   b4e2e:	e7de      	b.n	b4dee <_ZN6Stream10parseFloatEc+0x5e>
      isFraction = true;
   b4e30:	2701      	movs	r7, #1
   b4e32:	e7dc      	b.n	b4dee <_ZN6Stream10parseFloatEc+0x5e>
    return 0; // zero returned if timeout
   b4e34:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4e40 <_ZN6Stream10parseFloatEc+0xb0>
   b4e38:	e7f3      	b.n	b4e22 <_ZN6Stream10parseFloatEc+0x92>
   b4e3a:	bf00      	nop
   b4e3c:	f3af 8000 	nop.w
   b4e40:	00000000 	.word	0x00000000
   b4e44:	9999999a 	.word	0x9999999a
   b4e48:	3fb99999 	.word	0x3fb99999

000b4e4c <_ZN6Stream10parseFloatEv>:
  return parseFloat(NO_SKIP_CHAR);
   b4e4c:	2101      	movs	r1, #1
   b4e4e:	f7ff bf9f 	b.w	b4d90 <_ZN6Stream10parseFloatEc>
	...

000b4e54 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b4e54:	b570      	push	{r4, r5, r6, lr}
   b4e56:	460d      	mov	r5, r1
  String ret;
   b4e58:	4909      	ldr	r1, [pc, #36]	; (b4e80 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b4e5a:	4604      	mov	r4, r0
   b4e5c:	4616      	mov	r6, r2
  String ret;
   b4e5e:	f7ff fe36 	bl	b4ace <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4e62:	4628      	mov	r0, r5
   b4e64:	f7ff ff25 	bl	b4cb2 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b4e68:	2800      	cmp	r0, #0
   b4e6a:	db06      	blt.n	b4e7a <_ZN6Stream15readStringUntilEc+0x26>
   b4e6c:	4286      	cmp	r6, r0
   b4e6e:	d004      	beq.n	b4e7a <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4e70:	b2c1      	uxtb	r1, r0
   b4e72:	4620      	mov	r0, r4
   b4e74:	f7ff fe7b 	bl	b4b6e <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4e78:	e7f3      	b.n	b4e62 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b4e7a:	4620      	mov	r0, r4
   b4e7c:	bd70      	pop	{r4, r5, r6, pc}
   b4e7e:	bf00      	nop
   b4e80:	000b66fd 	.word	0x000b66fd

000b4e84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e84:	4b01      	ldr	r3, [pc, #4]	; (b4e8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e86:	4a02      	ldr	r2, [pc, #8]	; (b4e90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e8a:	4770      	bx	lr
   b4e8c:	2003e6ac 	.word	0x2003e6ac
   b4e90:	000b6764 	.word	0x000b6764

000b4e94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e94:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e96:	681a      	ldr	r2, [r3, #0]
   b4e98:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e9a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e9c:	4770      	bx	lr
   b4e9e:	bf00      	nop
   b4ea0:	2003e5b8 	.word	0x2003e5b8
   b4ea4:	2003e6b0 	.word	0x2003e6b0

000b4ea8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ea8:	2100      	movs	r1, #0
   b4eaa:	f7ff bc33 	b.w	b4714 <system_delay_ms>
	...

000b4eb0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4eb0:	4b01      	ldr	r3, [pc, #4]	; (b4eb8 <_GLOBAL__sub_I_RGB+0x8>)
   b4eb2:	2200      	movs	r2, #0
   b4eb4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4eb6:	4770      	bx	lr
   b4eb8:	2003e6b4 	.word	0x2003e6b4

000b4ebc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ebc:	4b01      	ldr	r3, [pc, #4]	; (b4ec4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4ebe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ec0:	4770      	bx	lr
   b4ec2:	bf00      	nop
   b4ec4:	2003e5bc 	.word	0x2003e5bc

000b4ec8 <serialEventRun>:
{
   b4ec8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4eca:	4b0b      	ldr	r3, [pc, #44]	; (b4ef8 <serialEventRun+0x30>)
   b4ecc:	b143      	cbz	r3, b4ee0 <serialEventRun+0x18>
   b4ece:	f000 fbfb 	bl	b56c8 <_Z16_fetch_usbserialv>
   b4ed2:	6803      	ldr	r3, [r0, #0]
   b4ed4:	691b      	ldr	r3, [r3, #16]
   b4ed6:	4798      	blx	r3
   b4ed8:	2800      	cmp	r0, #0
   b4eda:	dd01      	ble.n	b4ee0 <serialEventRun+0x18>
        serialEvent();
   b4edc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4ee0:	4b06      	ldr	r3, [pc, #24]	; (b4efc <serialEventRun+0x34>)
   b4ee2:	b143      	cbz	r3, b4ef6 <serialEventRun+0x2e>
   b4ee4:	f000 fe50 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b4ee8:	6803      	ldr	r3, [r0, #0]
   b4eea:	691b      	ldr	r3, [r3, #16]
   b4eec:	4798      	blx	r3
   b4eee:	2800      	cmp	r0, #0
   b4ef0:	dd01      	ble.n	b4ef6 <serialEventRun+0x2e>
        serialEvent1();
   b4ef2:	f3af 8000 	nop.w
}
   b4ef6:	bd08      	pop	{r3, pc}
	...

000b4f00 <_post_loop>:
{
   b4f00:	b508      	push	{r3, lr}
	serialEventRun();
   b4f02:	f7ff ffe1 	bl	b4ec8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4f06:	f7ff fb25 	bl	b4554 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f0a:	4b01      	ldr	r3, [pc, #4]	; (b4f10 <_post_loop+0x10>)
   b4f0c:	6018      	str	r0, [r3, #0]
}
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	2003e740 	.word	0x2003e740

000b4f14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f14:	4805      	ldr	r0, [pc, #20]	; (b4f2c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4f16:	4a06      	ldr	r2, [pc, #24]	; (b4f30 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4f18:	4906      	ldr	r1, [pc, #24]	; (b4f34 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4f1a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f1c:	1a12      	subs	r2, r2, r0
   b4f1e:	f001 fac1 	bl	b64a4 <memcpy>
    __backup_sram_signature = signature;
   b4f22:	4b05      	ldr	r3, [pc, #20]	; (b4f38 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f24:	4a05      	ldr	r2, [pc, #20]	; (b4f3c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f26:	601a      	str	r2, [r3, #0]
}
   b4f28:	bd08      	pop	{r3, pc}
   b4f2a:	bf00      	nop
   b4f2c:	2003f400 	.word	0x2003f400
   b4f30:	2003f404 	.word	0x2003f404
   b4f34:	000b69a4 	.word	0x000b69a4
   b4f38:	2003f400 	.word	0x2003f400
   b4f3c:	9a271c1e 	.word	0x9a271c1e

000b4f40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f42:	2300      	movs	r3, #0
   b4f44:	9300      	str	r3, [sp, #0]
   b4f46:	461a      	mov	r2, r3
   b4f48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f4c:	f7ff fc0c 	bl	b4768 <system_ctrl_set_result>
}
   b4f50:	b003      	add	sp, #12
   b4f52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f5a:	8843      	ldrh	r3, [r0, #2]
   b4f5c:	2b0a      	cmp	r3, #10
   b4f5e:	d008      	beq.n	b4f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f60:	2b50      	cmp	r3, #80	; 0x50
   b4f62:	d10b      	bne.n	b4f7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f64:	4b09      	ldr	r3, [pc, #36]	; (b4f8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f66:	681b      	ldr	r3, [r3, #0]
   b4f68:	b14b      	cbz	r3, b4f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f6a:	b003      	add	sp, #12
   b4f6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4f70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4f72:	f7ff ffe5 	bl	b4f40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4f76:	b003      	add	sp, #12
   b4f78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f7c:	2300      	movs	r3, #0
   b4f7e:	9300      	str	r3, [sp, #0]
   b4f80:	461a      	mov	r2, r3
   b4f82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f86:	f7ff fbef 	bl	b4768 <system_ctrl_set_result>
}
   b4f8a:	e7f4      	b.n	b4f76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4f8c:	2003e6c8 	.word	0x2003e6c8

000b4f90 <module_user_init_hook>:
{
   b4f90:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4f92:	4812      	ldr	r0, [pc, #72]	; (b4fdc <module_user_init_hook+0x4c>)
   b4f94:	2100      	movs	r1, #0
   b4f96:	f7ff fca1 	bl	b48dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4f9a:	4b11      	ldr	r3, [pc, #68]	; (b4fe0 <module_user_init_hook+0x50>)
   b4f9c:	681a      	ldr	r2, [r3, #0]
   b4f9e:	4b11      	ldr	r3, [pc, #68]	; (b4fe4 <module_user_init_hook+0x54>)
   b4fa0:	429a      	cmp	r2, r3
   b4fa2:	4b11      	ldr	r3, [pc, #68]	; (b4fe8 <module_user_init_hook+0x58>)
   b4fa4:	bf0c      	ite	eq
   b4fa6:	2201      	moveq	r2, #1
   b4fa8:	2200      	movne	r2, #0
   b4faa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4fac:	d001      	beq.n	b4fb2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4fae:	f7ff ffb1 	bl	b4f14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4fb2:	f7ff fac7 	bl	b4544 <HAL_RNG_GetRandomNumber>
   b4fb6:	4604      	mov	r4, r0
    srand(seed);
   b4fb8:	f001 fa8a 	bl	b64d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4fbc:	4b0b      	ldr	r3, [pc, #44]	; (b4fec <module_user_init_hook+0x5c>)
   b4fbe:	b113      	cbz	r3, b4fc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4fc0:	4620      	mov	r0, r4
   b4fc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4fc6:	2100      	movs	r1, #0
   b4fc8:	4808      	ldr	r0, [pc, #32]	; (b4fec <module_user_init_hook+0x5c>)
   b4fca:	f7ff fc47 	bl	b485c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4fd2:	4807      	ldr	r0, [pc, #28]	; (b4ff0 <module_user_init_hook+0x60>)
   b4fd4:	2100      	movs	r1, #0
   b4fd6:	f7ff bbbd 	b.w	b4754 <system_ctrl_set_app_request_handler>
   b4fda:	bf00      	nop
   b4fdc:	000b4ebd 	.word	0x000b4ebd
   b4fe0:	2003f400 	.word	0x2003f400
   b4fe4:	9a271c1e 	.word	0x9a271c1e
   b4fe8:	2003e6c4 	.word	0x2003e6c4
   b4fec:	00000000 	.word	0x00000000
   b4ff0:	000b4f59 	.word	0x000b4f59

000b4ff4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4ff4:	4770      	bx	lr

000b4ff6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4ff6:	2000      	movs	r0, #0
   b4ff8:	4770      	bx	lr

000b4ffa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4ffa:	b510      	push	{r4, lr}
   b4ffc:	2110      	movs	r1, #16
   b4ffe:	4604      	mov	r4, r0
   b5000:	f7ff f84d 	bl	b409e <_ZdlPvj>
   b5004:	4620      	mov	r0, r4
   b5006:	bd10      	pop	{r4, pc}

000b5008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5008:	b508      	push	{r3, lr}
      { delete this; }
   b500a:	f7ff fff6 	bl	b4ffa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b500e:	bd08      	pop	{r3, pc}

000b5010 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5010:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5012:	2200      	movs	r2, #0
   b5014:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5018:	6002      	str	r2, [r0, #0]
   b501a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b501c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b501e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5020:	680c      	ldr	r4, [r1, #0]
   b5022:	8085      	strh	r5, [r0, #4]
   b5024:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5026:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5028:	bd30      	pop	{r4, r5, pc}

000b502a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b502a:	b510      	push	{r4, lr}
   b502c:	4604      	mov	r4, r0
    free((void*)msg_);
   b502e:	6800      	ldr	r0, [r0, #0]
   b5030:	f7ff fc24 	bl	b487c <free>
}
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}

000b5038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5038:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b503a:	68c4      	ldr	r4, [r0, #12]
   b503c:	b1f4      	cbz	r4, b507c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b503e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5040:	2b02      	cmp	r3, #2
   b5042:	d103      	bne.n	b504c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5044:	f104 000c 	add.w	r0, r4, #12
   b5048:	f7ff ffef 	bl	b502a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b504c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b504e:	b135      	cbz	r5, b505e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5050:	4628      	mov	r0, r5
   b5052:	f7ff fdc1 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
   b5056:	2110      	movs	r1, #16
   b5058:	4628      	mov	r0, r5
   b505a:	f7ff f820 	bl	b409e <_ZdlPvj>
   b505e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5060:	b135      	cbz	r5, b5070 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5062:	4628      	mov	r0, r5
   b5064:	f7ff fdb8 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
   b5068:	2110      	movs	r1, #16
   b506a:	4628      	mov	r0, r5
   b506c:	f7ff f817 	bl	b409e <_ZdlPvj>
   b5070:	4620      	mov	r0, r4
   b5072:	2114      	movs	r1, #20
   b5074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5078:	f7ff b811 	b.w	b409e <_ZdlPvj>
   b507c:	bd38      	pop	{r3, r4, r5, pc}

000b507e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b507e:	680b      	ldr	r3, [r1, #0]
   b5080:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5082:	684b      	ldr	r3, [r1, #4]
   b5084:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5086:	b113      	cbz	r3, b508e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5088:	685a      	ldr	r2, [r3, #4]
   b508a:	3201      	adds	r2, #1
   b508c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b508e:	4770      	bx	lr

000b5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5092:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5094:	4668      	mov	r0, sp
   b5096:	460d      	mov	r5, r1
   b5098:	f7ff fff1 	bl	b507e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b509c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b509e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50a0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b50a2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b50a4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b50a6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b50a8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b50aa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b50ac:	f7ff f94f 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b50b0:	b135      	cbz	r5, b50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b50b2:	1d28      	adds	r0, r5, #4
   b50b4:	f7ff f94b 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50b8:	2108      	movs	r1, #8
   b50ba:	4628      	mov	r0, r5
   b50bc:	f7fe ffef 	bl	b409e <_ZdlPvj>
        return p;
    }
   b50c0:	4620      	mov	r0, r4
   b50c2:	b003      	add	sp, #12
   b50c4:	bd30      	pop	{r4, r5, pc}

000b50c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b50c6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b50c8:	b510      	push	{r4, lr}
      if (_M_empty())
   b50ca:	b90a      	cbnz	r2, b50d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b50cc:	f000 fdc2 	bl	b5c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b50d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b50d4:	68c3      	ldr	r3, [r0, #12]
   b50d6:	4718      	bx	r3

000b50d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b50d8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b50da:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b50dc:	f100 0110 	add.w	r1, r0, #16
   b50e0:	f7ff fff1 	bl	b50c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b50e4:	bd08      	pop	{r3, pc}

000b50e6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b50e6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b50e8:	b510      	push	{r4, lr}
      if (_M_empty())
   b50ea:	b90a      	cbnz	r2, b50f0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b50ec:	f000 fdb2 	bl	b5c54 <_ZSt25__throw_bad_function_callv>
    }
   b50f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b50f4:	68c3      	ldr	r3, [r0, #12]
   b50f6:	4718      	bx	r3

000b50f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b50f8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b50fa:	6800      	ldr	r0, [r0, #0]
   b50fc:	f100 0110 	add.w	r1, r0, #16
   b5100:	f7ff fff1 	bl	b50e6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5104:	bd08      	pop	{r3, pc}
	...

000b5108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5108:	b538      	push	{r3, r4, r5, lr}
   b510a:	2300      	movs	r3, #0
   b510c:	4604      	mov	r4, r0
   b510e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5110:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5112:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5114:	f7fe ffbf 	bl	b4096 <_Znwj>
   b5118:	b128      	cbz	r0, b5126 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b511a:	2301      	movs	r3, #1
   b511c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5120:	4b02      	ldr	r3, [pc, #8]	; (b512c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5122:	6003      	str	r3, [r0, #0]
   b5124:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5126:	6020      	str	r0, [r4, #0]
	}
   b5128:	4620      	mov	r0, r4
   b512a:	bd38      	pop	{r3, r4, r5, pc}
   b512c:	000b678c 	.word	0x000b678c

000b5130 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5130:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5132:	2300      	movs	r3, #0
   b5134:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5136:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5138:	4604      	mov	r4, r0
   b513a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b513c:	b12b      	cbz	r3, b514a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b513e:	2202      	movs	r2, #2
   b5140:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5142:	68eb      	ldr	r3, [r5, #12]
   b5144:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5146:	68ab      	ldr	r3, [r5, #8]
   b5148:	60a3      	str	r3, [r4, #8]
    }
   b514a:	4620      	mov	r0, r4
   b514c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5150:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5152:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5154:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5156:	4668      	mov	r0, sp
   b5158:	f7ff ff5a 	bl	b5010 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b515c:	f04f 0302 	mov.w	r3, #2
   b5160:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5164:	2a00      	cmp	r2, #0
   b5166:	d103      	bne.n	b5170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5168:	e8c4 3f41 	strexb	r1, r3, [r4]
   b516c:	2900      	cmp	r1, #0
   b516e:	d1f7      	bne.n	b5160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5170:	d125      	bne.n	b51be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5172:	f104 050c 	add.w	r5, r4, #12
   b5176:	4669      	mov	r1, sp
   b5178:	4628      	mov	r0, r5
   b517a:	f7ff ff49 	bl	b5010 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b517e:	f3bf 8f5b 	dmb	ish
   b5182:	2301      	movs	r3, #1
   b5184:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5186:	2000      	movs	r0, #0
   b5188:	f104 0308 	add.w	r3, r4, #8
   b518c:	f3bf 8f5b 	dmb	ish
   b5190:	e853 6f00 	ldrex	r6, [r3]
   b5194:	e843 0200 	strex	r2, r0, [r3]
   b5198:	2a00      	cmp	r2, #0
   b519a:	d1f9      	bne.n	b5190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b519c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b51a0:	b16e      	cbz	r6, b51be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b51a2:	f7ff fac7 	bl	b4734 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b51a6:	b178      	cbz	r0, b51c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b51a8:	4629      	mov	r1, r5
   b51aa:	4630      	mov	r0, r6
   b51ac:	f7ff ff8b 	bl	b50c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b51b0:	4630      	mov	r0, r6
   b51b2:	f7ff fd11 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b51b6:	2110      	movs	r1, #16
   b51b8:	4630      	mov	r0, r6
   b51ba:	f7fe ff70 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b51be:	4668      	mov	r0, sp
   b51c0:	f7ff ff33 	bl	b502a <_ZN8particle5ErrorD1Ev>
    }
   b51c4:	b009      	add	sp, #36	; 0x24
   b51c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b51c8:	4631      	mov	r1, r6
   b51ca:	a802      	add	r0, sp, #8
   b51cc:	f7ff ffb0 	bl	b5130 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b51d0:	68e0      	ldr	r0, [r4, #12]
   b51d2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b51d6:	b108      	cbz	r0, b51dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b51d8:	f001 f9b0 	bl	b653c <strdup>
        type_(type) {
   b51dc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b51de:	2010      	movs	r0, #16
   b51e0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b51e4:	f7fe ff57 	bl	b4096 <_Znwj>
   b51e8:	4605      	mov	r5, r0
   b51ea:	b1e8      	cbz	r0, b5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b51ec:	2700      	movs	r7, #0
   b51ee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51f0:	2018      	movs	r0, #24
   b51f2:	f7fe ff50 	bl	b4096 <_Znwj>
   b51f6:	4604      	mov	r4, r0
   b51f8:	b188      	cbz	r0, b521e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b51fa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b51fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b51fe:	a802      	add	r0, sp, #8
   b5200:	f7ff fcf3 	bl	b4bea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5204:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5206:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5208:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b520a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b520c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b520e:	a906      	add	r1, sp, #24
   b5210:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5212:	60e3      	str	r3, [r4, #12]
   b5214:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5218:	9205      	str	r2, [sp, #20]
   b521a:	f7ff fef9 	bl	b5010 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b521e:	4b08      	ldr	r3, [pc, #32]	; (b5240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5220:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5222:	4b08      	ldr	r3, [pc, #32]	; (b5244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5224:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5226:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5228:	a806      	add	r0, sp, #24
   b522a:	f7ff fefe 	bl	b502a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b522e:	a802      	add	r0, sp, #8
   b5230:	f7ff fcd2 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5234:	2200      	movs	r2, #0
   b5236:	4629      	mov	r1, r5
   b5238:	4803      	ldr	r0, [pc, #12]	; (b5248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b523a:	f7ff fa83 	bl	b4744 <application_thread_invoke>
   b523e:	e7b7      	b.n	b51b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5240:	000b50d9 	.word	0x000b50d9
   b5244:	000b535d 	.word	0x000b535d
   b5248:	000b585f 	.word	0x000b585f

000b524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5250:	b08b      	sub	sp, #44	; 0x2c
   b5252:	4605      	mov	r5, r0
   b5254:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5258:	460f      	mov	r7, r1
   b525a:	4690      	mov	r8, r2
   b525c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b525e:	f7ff faed 	bl	b483c <spark_cloud_flag_connected>
   b5262:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5264:	4683      	mov	fp, r0
   b5266:	bb38      	cbnz	r0, b52b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5268:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b526c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b526e:	a905      	add	r1, sp, #20
   b5270:	4630      	mov	r0, r6
   b5272:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5276:	f7ff fecb 	bl	b5010 <_ZN8particle5ErrorC1EOS0_>
   b527a:	2014      	movs	r0, #20
   b527c:	f7fe ff0b 	bl	b4096 <_Znwj>
   b5280:	4604      	mov	r4, r0
   b5282:	b148      	cbz	r0, b5298 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5284:	2302      	movs	r3, #2
   b5286:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5288:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b528a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b528e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5290:	4631      	mov	r1, r6
   b5292:	300c      	adds	r0, #12
   b5294:	f7ff febc 	bl	b5010 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5298:	4628      	mov	r0, r5
	: __shared_count(__p)
   b529a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b529c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b52a0:	f7ff ff32 	bl	b5108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b52a4:	4630      	mov	r0, r6
   b52a6:	f7ff fec0 	bl	b502a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b52aa:	a805      	add	r0, sp, #20
   b52ac:	f7ff febd 	bl	b502a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b52b0:	4628      	mov	r0, r5
   b52b2:	b00b      	add	sp, #44	; 0x2c
   b52b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b52b8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b52ba:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b52bc:	2014      	movs	r0, #20
   b52be:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b52c2:	9307      	str	r3, [sp, #28]
   b52c4:	f7fe fee7 	bl	b4096 <_Znwj>
   b52c8:	4601      	mov	r1, r0
   b52ca:	b118      	cbz	r0, b52d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b52cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b52d0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b52d2:	7044      	strb	r4, [r0, #1]
   b52d4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b52d6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b52d8:	f7ff ff16 	bl	b5108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b52dc:	4b1e      	ldr	r3, [pc, #120]	; (b5358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b52de:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b52e0:	2008      	movs	r0, #8
   b52e2:	f7fe fed8 	bl	b4096 <_Znwj>
   b52e6:	4604      	mov	r4, r0
   b52e8:	b110      	cbz	r0, b52f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b52ea:	a903      	add	r1, sp, #12
   b52ec:	f7ff fec7 	bl	b507e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b52f0:	9600      	str	r6, [sp, #0]
   b52f2:	fa5f f38a 	uxtb.w	r3, sl
   b52f6:	464a      	mov	r2, r9
   b52f8:	4641      	mov	r1, r8
   b52fa:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b52fc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b52fe:	f7ff faa5 	bl	b484c <spark_send_event>
   b5302:	b9b8      	cbnz	r0, b5334 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5304:	9b03      	ldr	r3, [sp, #12]
   b5306:	785b      	ldrb	r3, [r3, #1]
   b5308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b530c:	b993      	cbnz	r3, b5334 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b530e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5312:	a905      	add	r1, sp, #20
   b5314:	a803      	add	r0, sp, #12
   b5316:	9205      	str	r2, [sp, #20]
   b5318:	f8ad 3018 	strh.w	r3, [sp, #24]
   b531c:	f7ff ff18 	bl	b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5320:	a805      	add	r0, sp, #20
   b5322:	f7ff fe82 	bl	b502a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5326:	a805      	add	r0, sp, #20
   b5328:	9909      	ldr	r1, [sp, #36]	; 0x24
   b532a:	f7ff feb1 	bl	b5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b532e:	a806      	add	r0, sp, #24
   b5330:	f7ff f80d 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5334:	a903      	add	r1, sp, #12
   b5336:	a805      	add	r0, sp, #20
   b5338:	f7ff fea1 	bl	b507e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b533c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b533e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5340:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5342:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5344:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5346:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5348:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b534a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b534c:	f7fe ffff 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5350:	a804      	add	r0, sp, #16
   b5352:	f7fe fffc 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5356:	e7ab      	b.n	b52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5358:	000b53d9 	.word	0x000b53d9

000b535c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b535c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b535e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5360:	4605      	mov	r5, r0
	switch (__op)
   b5362:	d103      	bne.n	b536c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5364:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5366:	6003      	str	r3, [r0, #0]
      }
   b5368:	2000      	movs	r0, #0
   b536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b536c:	2a02      	cmp	r2, #2
   b536e:	d010      	beq.n	b5392 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5370:	2a03      	cmp	r2, #3
   b5372:	d1f9      	bne.n	b5368 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5374:	6804      	ldr	r4, [r0, #0]
   b5376:	2c00      	cmp	r4, #0
   b5378:	d0f6      	beq.n	b5368 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b537a:	f104 0010 	add.w	r0, r4, #16
   b537e:	f7ff fe54 	bl	b502a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5382:	4620      	mov	r0, r4
   b5384:	f7ff fc28 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5388:	2118      	movs	r1, #24
   b538a:	4620      	mov	r0, r4
   b538c:	f7fe fe87 	bl	b409e <_ZdlPvj>
   b5390:	e7ea      	b.n	b5368 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5392:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5394:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5396:	f7fe fe7e 	bl	b4096 <_Znwj>
   b539a:	4604      	mov	r4, r0
   b539c:	b150      	cbz	r0, b53b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b539e:	4631      	mov	r1, r6
   b53a0:	f7ff fec6 	bl	b5130 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b53a4:	6930      	ldr	r0, [r6, #16]
   b53a6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b53aa:	b108      	cbz	r0, b53b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b53ac:	f001 f8c6 	bl	b653c <strdup>
        type_(type) {
   b53b0:	6120      	str	r0, [r4, #16]
   b53b2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b53b4:	602c      	str	r4, [r5, #0]
	}
   b53b6:	e7d7      	b.n	b5368 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b53b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b53b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b53ba:	2300      	movs	r3, #0
   b53bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b53be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b53c0:	4604      	mov	r4, r0
   b53c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b53c4:	b12b      	cbz	r3, b53d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b53c6:	2202      	movs	r2, #2
   b53c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b53ca:	68eb      	ldr	r3, [r5, #12]
   b53cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b53ce:	68ab      	ldr	r3, [r5, #8]
   b53d0:	60a3      	str	r3, [r4, #8]
    }
   b53d2:	4620      	mov	r0, r4
   b53d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b53d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b53d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53da:	b089      	sub	sp, #36	; 0x24
   b53dc:	4604      	mov	r4, r0
   b53de:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b53e0:	a801      	add	r0, sp, #4
   b53e2:	4611      	mov	r1, r2
   b53e4:	f7ff fe54 	bl	b5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b53e8:	b1a4      	cbz	r4, b5414 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b53ea:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b53ec:	b11d      	cbz	r5, b53f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b53ee:	4628      	mov	r0, r5
   b53f0:	f001 f8a4 	bl	b653c <strdup>
   b53f4:	4605      	mov	r5, r0
   b53f6:	a801      	add	r0, sp, #4
   b53f8:	a903      	add	r1, sp, #12
        type_(type) {
   b53fa:	9503      	str	r5, [sp, #12]
   b53fc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5400:	f7ff fea6 	bl	b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5404:	a803      	add	r0, sp, #12
   b5406:	f7ff fe10 	bl	b502a <_ZN8particle5ErrorD1Ev>
   b540a:	a802      	add	r0, sp, #8
   b540c:	f7fe ff9f 	bl	b434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5410:	b009      	add	sp, #36	; 0x24
   b5412:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5414:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5416:	2301      	movs	r3, #1
   b5418:	e8d5 2f4f 	ldrexb	r2, [r5]
   b541c:	2a00      	cmp	r2, #0
   b541e:	d103      	bne.n	b5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5420:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5424:	2900      	cmp	r1, #0
   b5426:	d1f7      	bne.n	b5418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5428:	d1ef      	bne.n	b540a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b542a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b542c:	f3bf 8f5b 	dmb	ish
   b5430:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5432:	1d2b      	adds	r3, r5, #4
   b5434:	f3bf 8f5b 	dmb	ish
   b5438:	e853 6f00 	ldrex	r6, [r3]
   b543c:	e843 4200 	strex	r2, r4, [r3]
   b5440:	2a00      	cmp	r2, #0
   b5442:	d1f9      	bne.n	b5438 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5444:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5448:	2e00      	cmp	r6, #0
   b544a:	d0de      	beq.n	b540a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b544c:	4620      	mov	r0, r4
   b544e:	f7ff f971 	bl	b4734 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5452:	4607      	mov	r7, r0
   b5454:	b160      	cbz	r0, b5470 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5456:	f105 010c 	add.w	r1, r5, #12
   b545a:	4630      	mov	r0, r6
   b545c:	f7ff fe43 	bl	b50e6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5460:	4630      	mov	r0, r6
   b5462:	f7ff fbb9 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5466:	2110      	movs	r1, #16
   b5468:	4630      	mov	r0, r6
   b546a:	f7fe fe18 	bl	b409e <_ZdlPvj>
   b546e:	e7cc      	b.n	b540a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5470:	4631      	mov	r1, r6
   b5472:	a803      	add	r0, sp, #12
   b5474:	f7ff ffa0 	bl	b53b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5478:	7b2b      	ldrb	r3, [r5, #12]
   b547a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b547e:	2010      	movs	r0, #16
   b5480:	f7fe fe09 	bl	b4096 <_Znwj>
   b5484:	4605      	mov	r5, r0
   b5486:	b1d0      	cbz	r0, b54be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5488:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b548a:	2014      	movs	r0, #20
   b548c:	f7fe fe03 	bl	b4096 <_Znwj>
   b5490:	4604      	mov	r4, r0
   b5492:	b178      	cbz	r0, b54b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5494:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5496:	4601      	mov	r1, r0
   b5498:	a803      	add	r0, sp, #12
   b549a:	f7ff fba6 	bl	b4bea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b549e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b54a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54a2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54a4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b54a6:	9205      	str	r2, [sp, #20]
   b54a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54aa:	60e3      	str	r3, [r4, #12]
   b54ac:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b54b0:	9206      	str	r2, [sp, #24]
   b54b2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b54b4:	4b06      	ldr	r3, [pc, #24]	; (b54d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b54b6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b54b8:	4b06      	ldr	r3, [pc, #24]	; (b54d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54ba:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54bc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b54be:	a803      	add	r0, sp, #12
   b54c0:	f7ff fb8a 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b54c4:	2200      	movs	r2, #0
   b54c6:	4629      	mov	r1, r5
   b54c8:	4803      	ldr	r0, [pc, #12]	; (b54d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b54ca:	f7ff f93b 	bl	b4744 <application_thread_invoke>
   b54ce:	e7c7      	b.n	b5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b54d0:	000b50f9 	.word	0x000b50f9
   b54d4:	000b54dd 	.word	0x000b54dd
   b54d8:	000b585f 	.word	0x000b585f

000b54dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b54dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b54de:	b570      	push	{r4, r5, r6, lr}
   b54e0:	4604      	mov	r4, r0
	switch (__op)
   b54e2:	d103      	bne.n	b54ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b54e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54e6:	6003      	str	r3, [r0, #0]
      }
   b54e8:	2000      	movs	r0, #0
   b54ea:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b54ec:	2a02      	cmp	r2, #2
   b54ee:	d00c      	beq.n	b550a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b54f0:	2a03      	cmp	r2, #3
   b54f2:	d1f9      	bne.n	b54e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b54f4:	6804      	ldr	r4, [r0, #0]
   b54f6:	2c00      	cmp	r4, #0
   b54f8:	d0f6      	beq.n	b54e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b54fa:	4620      	mov	r0, r4
   b54fc:	f7ff fb6c 	bl	b4bd8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5500:	2114      	movs	r1, #20
   b5502:	4620      	mov	r0, r4
   b5504:	f7fe fdcb 	bl	b409e <_ZdlPvj>
   b5508:	e7ee      	b.n	b54e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b550a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b550c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b550e:	f7fe fdc2 	bl	b4096 <_Znwj>
   b5512:	4605      	mov	r5, r0
   b5514:	b120      	cbz	r0, b5520 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5516:	4631      	mov	r1, r6
   b5518:	f7ff ff4e 	bl	b53b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b551c:	7c33      	ldrb	r3, [r6, #16]
   b551e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5520:	6025      	str	r5, [r4, #0]
	}
   b5522:	e7e1      	b.n	b54e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5524 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5524:	4770      	bx	lr

000b5526 <_ZN9IPAddressD0Ev>:
   b5526:	b510      	push	{r4, lr}
   b5528:	2118      	movs	r1, #24
   b552a:	4604      	mov	r4, r0
   b552c:	f7fe fdb7 	bl	b409e <_ZdlPvj>
   b5530:	4620      	mov	r0, r4
   b5532:	bd10      	pop	{r4, pc}

000b5534 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5534:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5536:	7d03      	ldrb	r3, [r0, #20]
   b5538:	2b06      	cmp	r3, #6
{
   b553a:	b08d      	sub	sp, #52	; 0x34
   b553c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b553e:	f100 0704 	add.w	r7, r0, #4
   b5542:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5546:	d012      	beq.n	b556e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5548:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b554c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5550:	220a      	movs	r2, #10
   b5552:	4630      	mov	r0, r6
   b5554:	f7ff fb8f 	bl	b4c76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5558:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b555a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b555c:	d019      	beq.n	b5592 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b555e:	2c00      	cmp	r4, #0
   b5560:	d0f4      	beq.n	b554c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5562:	212e      	movs	r1, #46	; 0x2e
   b5564:	4630      	mov	r0, r6
   b5566:	f7ff fb83 	bl	b4c70 <_ZN5Print5printEc>
   b556a:	4404      	add	r4, r0
   b556c:	e7ee      	b.n	b554c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b556e:	232f      	movs	r3, #47	; 0x2f
   b5570:	466a      	mov	r2, sp
   b5572:	4639      	mov	r1, r7
   b5574:	200a      	movs	r0, #10
		buf[0] = 0;
   b5576:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b557a:	f7fe fffb 	bl	b4574 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b557e:	4668      	mov	r0, sp
   b5580:	f000 fff9 	bl	b6576 <strlen>
   b5584:	6833      	ldr	r3, [r6, #0]
   b5586:	4602      	mov	r2, r0
   b5588:	68db      	ldr	r3, [r3, #12]
   b558a:	4669      	mov	r1, sp
   b558c:	4630      	mov	r0, r6
   b558e:	4798      	blx	r3
   b5590:	4604      	mov	r4, r0
    }
    return n;
}
   b5592:	4620      	mov	r0, r4
   b5594:	b00d      	add	sp, #52	; 0x34
   b5596:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5598 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5598:	b510      	push	{r4, lr}
   b559a:	4b05      	ldr	r3, [pc, #20]	; (b55b0 <_ZN9IPAddressC1Ev+0x18>)
   b559c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b559e:	2211      	movs	r2, #17
   b55a0:	f840 3b04 	str.w	r3, [r0], #4
   b55a4:	2100      	movs	r1, #0
   b55a6:	f000 ff8b 	bl	b64c0 <memset>
}
   b55aa:	4620      	mov	r0, r4
   b55ac:	bd10      	pop	{r4, pc}
   b55ae:	bf00      	nop
   b55b0:	000b67a8 	.word	0x000b67a8

000b55b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b55b4:	4603      	mov	r3, r0
   b55b6:	4a07      	ldr	r2, [pc, #28]	; (b55d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b55b8:	b510      	push	{r4, lr}
   b55ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b55be:	f101 0210 	add.w	r2, r1, #16
   b55c2:	f851 4b04 	ldr.w	r4, [r1], #4
   b55c6:	f843 4b04 	str.w	r4, [r3], #4
   b55ca:	4291      	cmp	r1, r2
   b55cc:	d1f9      	bne.n	b55c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b55ce:	780a      	ldrb	r2, [r1, #0]
   b55d0:	701a      	strb	r2, [r3, #0]
}
   b55d2:	bd10      	pop	{r4, pc}
   b55d4:	000b67a8 	.word	0x000b67a8

000b55d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b55d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b55da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b55de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b55e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b55e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b55ea:	2304      	movs	r3, #4
   b55ec:	6041      	str	r1, [r0, #4]
   b55ee:	7503      	strb	r3, [r0, #20]
}
   b55f0:	bd10      	pop	{r4, pc}
	...

000b55f4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b55f4:	b507      	push	{r0, r1, r2, lr}
   b55f6:	4b06      	ldr	r3, [pc, #24]	; (b5610 <_ZN9IPAddressC1EPKh+0x1c>)
   b55f8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b55fa:	78cb      	ldrb	r3, [r1, #3]
   b55fc:	9300      	str	r3, [sp, #0]
   b55fe:	788b      	ldrb	r3, [r1, #2]
   b5600:	784a      	ldrb	r2, [r1, #1]
   b5602:	7809      	ldrb	r1, [r1, #0]
   b5604:	f7ff ffe8 	bl	b55d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5608:	b003      	add	sp, #12
   b560a:	f85d fb04 	ldr.w	pc, [sp], #4
   b560e:	bf00      	nop
   b5610:	000b67a8 	.word	0x000b67a8

000b5614 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5614:	7441      	strb	r1, [r0, #17]
}
   b5616:	4770      	bx	lr

000b5618 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5618:	4770      	bx	lr

000b561a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b561a:	4770      	bx	lr

000b561c <_ZN9USBSerial4readEv>:
{
   b561c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b561e:	2100      	movs	r1, #0
   b5620:	7c00      	ldrb	r0, [r0, #16]
   b5622:	f7ff f857 	bl	b46d4 <HAL_USB_USART_Receive_Data>
}
   b5626:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b562a:	bd08      	pop	{r3, pc}

000b562c <_ZN9USBSerial4peekEv>:
{
   b562c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b562e:	2101      	movs	r1, #1
   b5630:	7c00      	ldrb	r0, [r0, #16]
   b5632:	f7ff f84f 	bl	b46d4 <HAL_USB_USART_Receive_Data>
}
   b5636:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b563a:	bd08      	pop	{r3, pc}

000b563c <_ZN9USBSerial17availableForWriteEv>:
{
   b563c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b563e:	7c00      	ldrb	r0, [r0, #16]
   b5640:	f7ff f840 	bl	b46c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5648:	bd08      	pop	{r3, pc}

000b564a <_ZN9USBSerial9availableEv>:
{
   b564a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b564c:	7c00      	ldrb	r0, [r0, #16]
   b564e:	f7ff f831 	bl	b46b4 <HAL_USB_USART_Available_Data>
}
   b5652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5656:	bd08      	pop	{r3, pc}

000b5658 <_ZN9USBSerial5writeEh>:
{
   b5658:	b513      	push	{r0, r1, r4, lr}
   b565a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b565c:	7c00      	ldrb	r0, [r0, #16]
{
   b565e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5660:	f7ff f830 	bl	b46c4 <HAL_USB_USART_Available_Data_For_Write>
   b5664:	2800      	cmp	r0, #0
   b5666:	9901      	ldr	r1, [sp, #4]
   b5668:	dc01      	bgt.n	b566e <_ZN9USBSerial5writeEh+0x16>
   b566a:	7c60      	ldrb	r0, [r4, #17]
   b566c:	b120      	cbz	r0, b5678 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b566e:	7c20      	ldrb	r0, [r4, #16]
   b5670:	f7ff f838 	bl	b46e4 <HAL_USB_USART_Send_Data>
   b5674:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5678:	b002      	add	sp, #8
   b567a:	bd10      	pop	{r4, pc}

000b567c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b567c:	7c00      	ldrb	r0, [r0, #16]
   b567e:	f7ff b839 	b.w	b46f4 <HAL_USB_USART_Flush_Data>

000b5682 <_ZN9USBSerialD0Ev>:
   b5682:	b510      	push	{r4, lr}
   b5684:	2114      	movs	r1, #20
   b5686:	4604      	mov	r4, r0
   b5688:	f7fe fd09 	bl	b409e <_ZdlPvj>
   b568c:	4620      	mov	r0, r4
   b568e:	bd10      	pop	{r4, pc}

000b5690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5690:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5696:	4604      	mov	r4, r0
   b5698:	4608      	mov	r0, r1
   b569a:	2100      	movs	r1, #0
   b569c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b56a0:	4b04      	ldr	r3, [pc, #16]	; (b56b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b56a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b56a4:	2301      	movs	r3, #1
  _serial = serial;
   b56a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b56a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b56aa:	4611      	mov	r1, r2
   b56ac:	f7fe fffa 	bl	b46a4 <HAL_USB_USART_Init>
}
   b56b0:	4620      	mov	r0, r4
   b56b2:	bd10      	pop	{r4, pc}
   b56b4:	000b67bc 	.word	0x000b67bc

000b56b8 <_Z19acquireSerialBufferv>:
{
   b56b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b56ba:	2214      	movs	r2, #20
{
   b56bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b56be:	2100      	movs	r1, #0
   b56c0:	f000 fefe 	bl	b64c0 <memset>
}
   b56c4:	4620      	mov	r0, r4
   b56c6:	bd10      	pop	{r4, pc}

000b56c8 <_Z16_fetch_usbserialv>:
{
   b56c8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b56ca:	4c0f      	ldr	r4, [pc, #60]	; (b5708 <_Z16_fetch_usbserialv+0x40>)
{
   b56cc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b56ce:	a803      	add	r0, sp, #12
   b56d0:	f7ff fff2 	bl	b56b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b56d4:	7821      	ldrb	r1, [r4, #0]
   b56d6:	f3bf 8f5b 	dmb	ish
   b56da:	f011 0101 	ands.w	r1, r1, #1
   b56de:	d10f      	bne.n	b5700 <_Z16_fetch_usbserialv+0x38>
   b56e0:	4620      	mov	r0, r4
   b56e2:	9101      	str	r1, [sp, #4]
   b56e4:	f7fe fcdd 	bl	b40a2 <__cxa_guard_acquire>
   b56e8:	9901      	ldr	r1, [sp, #4]
   b56ea:	b148      	cbz	r0, b5700 <_Z16_fetch_usbserialv+0x38>
   b56ec:	aa03      	add	r2, sp, #12
   b56ee:	4807      	ldr	r0, [pc, #28]	; (b570c <_Z16_fetch_usbserialv+0x44>)
   b56f0:	f7ff ffce 	bl	b5690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b56f4:	4620      	mov	r0, r4
   b56f6:	f7fe fcd9 	bl	b40ac <__cxa_guard_release>
   b56fa:	4805      	ldr	r0, [pc, #20]	; (b5710 <_Z16_fetch_usbserialv+0x48>)
   b56fc:	f000 fecc 	bl	b6498 <atexit>
	return _usbserial;
}
   b5700:	4802      	ldr	r0, [pc, #8]	; (b570c <_Z16_fetch_usbserialv+0x44>)
   b5702:	b008      	add	sp, #32
   b5704:	bd10      	pop	{r4, pc}
   b5706:	bf00      	nop
   b5708:	2003e6cc 	.word	0x2003e6cc
   b570c:	2003e6d0 	.word	0x2003e6d0
   b5710:	000b5619 	.word	0x000b5619

000b5714 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5714:	2200      	movs	r2, #0
   b5716:	6840      	ldr	r0, [r0, #4]
   b5718:	4611      	mov	r1, r2
   b571a:	f7ff b847 	b.w	b47ac <network_ready>

000b571e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b571e:	2200      	movs	r2, #0
   b5720:	6840      	ldr	r0, [r0, #4]
   b5722:	4611      	mov	r1, r2
   b5724:	f7ff b862 	b.w	b47ec <network_listening>

000b5728 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5728:	2200      	movs	r2, #0
   b572a:	6840      	ldr	r0, [r0, #4]
   b572c:	4611      	mov	r1, r2
   b572e:	f7ff b86d 	b.w	b480c <network_get_listen_timeout>

000b5732 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5732:	6840      	ldr	r0, [r0, #4]
   b5734:	2200      	movs	r2, #0
   b5736:	f7ff b861 	b.w	b47fc <network_set_listen_timeout>

000b573a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b573a:	6840      	ldr	r0, [r0, #4]
   b573c:	2200      	movs	r2, #0
   b573e:	f081 0101 	eor.w	r1, r1, #1
   b5742:	f7ff b84b 	b.w	b47dc <network_listen>

000b5746 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5746:	2300      	movs	r3, #0
   b5748:	6840      	ldr	r0, [r0, #4]
   b574a:	461a      	mov	r2, r3
   b574c:	4619      	mov	r1, r3
   b574e:	f7ff b83d 	b.w	b47cc <network_off>

000b5752 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5752:	2300      	movs	r3, #0
   b5754:	6840      	ldr	r0, [r0, #4]
   b5756:	461a      	mov	r2, r3
   b5758:	4619      	mov	r1, r3
   b575a:	f7ff b82f 	b.w	b47bc <network_on>

000b575e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b575e:	2200      	movs	r2, #0
   b5760:	6840      	ldr	r0, [r0, #4]
   b5762:	4611      	mov	r1, r2
   b5764:	f7ff b812 	b.w	b478c <network_connecting>

000b5768 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5768:	6840      	ldr	r0, [r0, #4]
   b576a:	2200      	movs	r2, #0
   b576c:	2102      	movs	r1, #2
   b576e:	f7ff b815 	b.w	b479c <network_disconnect>

000b5772 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5772:	2300      	movs	r3, #0
   b5774:	6840      	ldr	r0, [r0, #4]
   b5776:	461a      	mov	r2, r3
   b5778:	f7ff b800 	b.w	b477c <network_connect>

000b577c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b577c:	4b08      	ldr	r3, [pc, #32]	; (b57a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b577e:	b510      	push	{r4, lr}
   b5780:	2428      	movs	r4, #40	; 0x28
   b5782:	4622      	mov	r2, r4
   b5784:	4618      	mov	r0, r3
   b5786:	2100      	movs	r1, #0
   b5788:	f000 fe9a 	bl	b64c0 <memset>
   b578c:	4b05      	ldr	r3, [pc, #20]	; (b57a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b578e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5790:	f04f 32ff 	mov.w	r2, #4294967295
   b5794:	6042      	str	r2, [r0, #4]
   b5796:	2204      	movs	r2, #4
   b5798:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b579a:	4a03      	ldr	r2, [pc, #12]	; (b57a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b579c:	601a      	str	r2, [r3, #0]
   b579e:	bd10      	pop	{r4, pc}
   b57a0:	2003e6ec 	.word	0x2003e6ec
   b57a4:	2003e6e4 	.word	0x2003e6e4
   b57a8:	000b67ec 	.word	0x000b67ec

000b57ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b57ac:	4770      	bx	lr

000b57ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b57ae:	7441      	strb	r1, [r0, #17]
}
   b57b0:	4770      	bx	lr

000b57b2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b57b2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b57b4:	7c00      	ldrb	r0, [r0, #16]
   b57b6:	f7fe ff15 	bl	b45e4 <hal_usart_available_data_for_write>
}
   b57ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57be:	bd08      	pop	{r3, pc}

000b57c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b57c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b57c2:	7c00      	ldrb	r0, [r0, #16]
   b57c4:	f7fe fee6 	bl	b4594 <hal_usart_available>
}
   b57c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57cc:	bd08      	pop	{r3, pc}

000b57ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b57ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b57d0:	7c00      	ldrb	r0, [r0, #16]
   b57d2:	f7fe feef 	bl	b45b4 <hal_usart_peek>
}
   b57d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57da:	bd08      	pop	{r3, pc}

000b57dc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b57dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b57de:	7c00      	ldrb	r0, [r0, #16]
   b57e0:	f7fe fee0 	bl	b45a4 <hal_usart_read>
}
   b57e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57e8:	bd08      	pop	{r3, pc}

000b57ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b57ea:	7c00      	ldrb	r0, [r0, #16]
   b57ec:	f7fe beea 	b.w	b45c4 <hal_usart_flush>

000b57f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b57f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b57f2:	7c45      	ldrb	r5, [r0, #17]
{
   b57f4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b57f6:	b12d      	cbz	r5, b5804 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b57f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b57fa:	b003      	add	sp, #12
   b57fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5800:	f7fe bec0 	b.w	b4584 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5804:	7c00      	ldrb	r0, [r0, #16]
   b5806:	9101      	str	r1, [sp, #4]
   b5808:	f7fe feec 	bl	b45e4 <hal_usart_available_data_for_write>
   b580c:	2800      	cmp	r0, #0
   b580e:	9901      	ldr	r1, [sp, #4]
   b5810:	dcf2      	bgt.n	b57f8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5812:	4628      	mov	r0, r5
   b5814:	b003      	add	sp, #12
   b5816:	bd30      	pop	{r4, r5, pc}

000b5818 <_ZN11USARTSerialD0Ev>:
   b5818:	b510      	push	{r4, lr}
   b581a:	2114      	movs	r1, #20
   b581c:	4604      	mov	r4, r0
   b581e:	f7fe fc3e 	bl	b409e <_ZdlPvj>
   b5822:	4620      	mov	r0, r4
   b5824:	bd10      	pop	{r4, pc}
	...

000b5828 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5828:	b510      	push	{r4, lr}
   b582a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b582e:	4604      	mov	r4, r0
   b5830:	4608      	mov	r0, r1
   b5832:	4611      	mov	r1, r2
   b5834:	2200      	movs	r2, #0
   b5836:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b583a:	4b04      	ldr	r3, [pc, #16]	; (b584c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b583c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b583e:	2301      	movs	r3, #1
  _serial = serial;
   b5840:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5842:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5844:	f7fe fede 	bl	b4604 <hal_usart_init_ex>
}
   b5848:	4620      	mov	r0, r4
   b584a:	bd10      	pop	{r4, pc}
   b584c:	000b6828 	.word	0x000b6828

000b5850 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5850:	7c00      	ldrb	r0, [r0, #16]
   b5852:	2300      	movs	r3, #0
   b5854:	f7fe bece 	b.w	b45f4 <hal_usart_begin_config>

000b5858 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5858:	2200      	movs	r2, #0
   b585a:	f7ff bff9 	b.w	b5850 <_ZN11USARTSerial5beginEmm>

000b585e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b585e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5860:	6883      	ldr	r3, [r0, #8]
   b5862:	4604      	mov	r4, r0
   b5864:	b90b      	cbnz	r3, b586a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5866:	f000 f9f5 	bl	b5c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b586a:	68c3      	ldr	r3, [r0, #12]
   b586c:	4798      	blx	r3
      if (_M_manager)
   b586e:	68a3      	ldr	r3, [r4, #8]
   b5870:	b11b      	cbz	r3, b587a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5872:	2203      	movs	r2, #3
   b5874:	4621      	mov	r1, r4
   b5876:	4620      	mov	r0, r4
   b5878:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b587a:	4620      	mov	r0, r4
   b587c:	2110      	movs	r1, #16
}
   b587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5882:	f7fe bc0c 	b.w	b409e <_ZdlPvj>

000b5886 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5886:	4770      	bx	lr

000b5888 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b588a:	4606      	mov	r6, r0
   b588c:	4615      	mov	r5, r2
   b588e:	460c      	mov	r4, r1
   b5890:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5892:	42bc      	cmp	r4, r7
   b5894:	d006      	beq.n	b58a4 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5896:	6833      	ldr	r3, [r6, #0]
   b5898:	f814 1b01 	ldrb.w	r1, [r4], #1
   b589c:	689b      	ldr	r3, [r3, #8]
   b589e:	4630      	mov	r0, r6
   b58a0:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58a2:	e7f6      	b.n	b5892 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58a4:	4628      	mov	r0, r5
   b58a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58a8 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58a8:	7c00      	ldrb	r0, [r0, #16]
   b58aa:	2200      	movs	r2, #0
   b58ac:	f7fe beb2 	b.w	b4614 <hal_i2c_write>

000b58b0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58b0:	7c00      	ldrb	r0, [r0, #16]
   b58b2:	2100      	movs	r1, #0
   b58b4:	f7fe beb6 	b.w	b4624 <hal_i2c_available>

000b58b8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58b8:	7c00      	ldrb	r0, [r0, #16]
   b58ba:	2100      	movs	r1, #0
   b58bc:	f7fe beba 	b.w	b4634 <hal_i2c_read>

000b58c0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58c0:	7c00      	ldrb	r0, [r0, #16]
   b58c2:	2100      	movs	r1, #0
   b58c4:	f7fe bebe 	b.w	b4644 <hal_i2c_peek>

000b58c8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b58c8:	7c00      	ldrb	r0, [r0, #16]
   b58ca:	2100      	movs	r1, #0
   b58cc:	f7fe bec2 	b.w	b4654 <hal_i2c_flush>

000b58d0 <_ZN7TwoWireD0Ev>:
   b58d0:	b510      	push	{r4, lr}
   b58d2:	2114      	movs	r1, #20
   b58d4:	4604      	mov	r4, r0
   b58d6:	f7fe fbe2 	bl	b409e <_ZdlPvj>
   b58da:	4620      	mov	r0, r4
   b58dc:	bd10      	pop	{r4, pc}
	...

000b58e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58e0:	b538      	push	{r3, r4, r5, lr}
   b58e2:	4604      	mov	r4, r0
   b58e4:	4615      	mov	r5, r2
   b58e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58ea:	2200      	movs	r2, #0
   b58ec:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58f0:	4b09      	ldr	r3, [pc, #36]	; (b5918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b58f2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58f4:	4608      	mov	r0, r1
   b58f6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b58f8:	4629      	mov	r1, r5
   b58fa:	f7fe febb 	bl	b4674 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b58fe:	30bf      	adds	r0, #191	; 0xbf
   b5900:	d108      	bne.n	b5914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5902:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5904:	07db      	lsls	r3, r3, #31
   b5906:	d505      	bpl.n	b5914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5908:	6868      	ldr	r0, [r5, #4]
   b590a:	f7fe ffb7 	bl	b487c <free>
    free(conf.tx_buffer);
   b590e:	68e8      	ldr	r0, [r5, #12]
   b5910:	f7fe ffb4 	bl	b487c <free>
}
   b5914:	4620      	mov	r0, r4
   b5916:	bd38      	pop	{r3, r4, r5, pc}
   b5918:	000b6858 	.word	0x000b6858

000b591c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b591c:	2300      	movs	r3, #0
   b591e:	6840      	ldr	r0, [r0, #4]
   b5920:	461a      	mov	r2, r3
   b5922:	f7fe bf2b 	b.w	b477c <network_connect>

000b5926 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5926:	6840      	ldr	r0, [r0, #4]
   b5928:	2200      	movs	r2, #0
   b592a:	2102      	movs	r1, #2
   b592c:	f7fe bf36 	b.w	b479c <network_disconnect>

000b5930 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5930:	2200      	movs	r2, #0
   b5932:	6840      	ldr	r0, [r0, #4]
   b5934:	4611      	mov	r1, r2
   b5936:	f7fe bf29 	b.w	b478c <network_connecting>

000b593a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b593a:	2200      	movs	r2, #0
   b593c:	6840      	ldr	r0, [r0, #4]
   b593e:	4611      	mov	r1, r2
   b5940:	f7fe bf34 	b.w	b47ac <network_ready>

000b5944 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5944:	2300      	movs	r3, #0
   b5946:	6840      	ldr	r0, [r0, #4]
   b5948:	461a      	mov	r2, r3
   b594a:	4619      	mov	r1, r3
   b594c:	f7fe bf36 	b.w	b47bc <network_on>

000b5950 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5950:	2300      	movs	r3, #0
   b5952:	6840      	ldr	r0, [r0, #4]
   b5954:	461a      	mov	r2, r3
   b5956:	4619      	mov	r1, r3
   b5958:	f7fe bf38 	b.w	b47cc <network_off>

000b595c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b595c:	6840      	ldr	r0, [r0, #4]
   b595e:	2100      	movs	r1, #0
   b5960:	f7fe bf5c 	b.w	b481c <network_is_on>

000b5964 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5964:	6840      	ldr	r0, [r0, #4]
   b5966:	2100      	movs	r1, #0
   b5968:	f7fe bf60 	b.w	b482c <network_is_off>

000b596c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b596c:	6840      	ldr	r0, [r0, #4]
   b596e:	2200      	movs	r2, #0
   b5970:	f081 0101 	eor.w	r1, r1, #1
   b5974:	f7fe bf32 	b.w	b47dc <network_listen>

000b5978 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5978:	6840      	ldr	r0, [r0, #4]
   b597a:	2200      	movs	r2, #0
   b597c:	f7fe bf3e 	b.w	b47fc <network_set_listen_timeout>

000b5980 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5980:	2200      	movs	r2, #0
   b5982:	6840      	ldr	r0, [r0, #4]
   b5984:	4611      	mov	r1, r2
   b5986:	f7fe bf41 	b.w	b480c <network_get_listen_timeout>

000b598a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b598a:	2200      	movs	r2, #0
   b598c:	6840      	ldr	r0, [r0, #4]
   b598e:	4611      	mov	r1, r2
   b5990:	f7fe bf2c 	b.w	b47ec <network_listening>

000b5994 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5998:	b095      	sub	sp, #84	; 0x54
   b599a:	4614      	mov	r4, r2
   b599c:	460d      	mov	r5, r1
   b599e:	4607      	mov	r7, r0
    IPAddress addr;
   b59a0:	f7ff fdfa 	bl	b5598 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b59a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b59a6:	221c      	movs	r2, #28
   b59a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b59aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b59ac:	f000 fd88 	bl	b64c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b59b0:	2340      	movs	r3, #64	; 0x40
   b59b2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b59b4:	4620      	mov	r0, r4
   b59b6:	466b      	mov	r3, sp
   b59b8:	aa0c      	add	r2, sp, #48	; 0x30
   b59ba:	2100      	movs	r1, #0
   b59bc:	f7fe fda2 	bl	b4504 <netdb_getaddrinfo>
    if (!r) {
   b59c0:	4604      	mov	r4, r0
   b59c2:	2800      	cmp	r0, #0
   b59c4:	d14b      	bne.n	b5a5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59c6:	4602      	mov	r2, r0
   b59c8:	2101      	movs	r1, #1
   b59ca:	6868      	ldr	r0, [r5, #4]
   b59cc:	f7fe feee 	bl	b47ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59d4:	4622      	mov	r2, r4
   b59d6:	6868      	ldr	r0, [r5, #4]
   b59d8:	f7fe fee8 	bl	b47ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b59dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59de:	4681      	mov	r9, r0
        bool ok = false;
   b59e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b59e2:	2e00      	cmp	r6, #0
   b59e4:	d03b      	beq.n	b5a5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b59e6:	2900      	cmp	r1, #0
   b59e8:	d139      	bne.n	b5a5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b59ea:	6873      	ldr	r3, [r6, #4]
   b59ec:	2b02      	cmp	r3, #2
   b59ee:	d003      	beq.n	b59f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b59f0:	2b0a      	cmp	r3, #10
   b59f2:	d011      	beq.n	b5a18 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b59f4:	69f6      	ldr	r6, [r6, #28]
   b59f6:	e7f4      	b.n	b59e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b59f8:	f1b8 0f00 	cmp.w	r8, #0
   b59fc:	d0fa      	beq.n	b59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b59fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5a00:	a806      	add	r0, sp, #24
   b5a02:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5a04:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5a06:	f7ff fdf5 	bl	b55f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a0c:	1d3c      	adds	r4, r7, #4
   b5a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a10:	682b      	ldr	r3, [r5, #0]
   b5a12:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a14:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5a16:	e7ed      	b.n	b59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5a18:	f1b9 0f00 	cmp.w	r9, #0
   b5a1c:	d0ea      	beq.n	b59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5a1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5a20:	2210      	movs	r2, #16
   b5a22:	a801      	add	r0, sp, #4
   b5a24:	f000 fd4c 	bl	b64c0 <memset>
                    a.v = 6;
   b5a28:	2306      	movs	r3, #6
   b5a2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5a2e:	ad01      	add	r5, sp, #4
   b5a30:	f104 0308 	add.w	r3, r4, #8
   b5a34:	3418      	adds	r4, #24
   b5a36:	6818      	ldr	r0, [r3, #0]
   b5a38:	6859      	ldr	r1, [r3, #4]
   b5a3a:	462a      	mov	r2, r5
   b5a3c:	c203      	stmia	r2!, {r0, r1}
   b5a3e:	3308      	adds	r3, #8
   b5a40:	42a3      	cmp	r3, r4
   b5a42:	4615      	mov	r5, r2
   b5a44:	d1f7      	bne.n	b5a36 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5a46:	a901      	add	r1, sp, #4
   b5a48:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5a4a:	ad07      	add	r5, sp, #28
   b5a4c:	f7ff fdb2 	bl	b55b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a52:	1d3c      	adds	r4, r7, #4
   b5a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a56:	682b      	ldr	r3, [r5, #0]
   b5a58:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a5a:	4649      	mov	r1, r9
   b5a5c:	e7ca      	b.n	b59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5a5e:	9800      	ldr	r0, [sp, #0]
   b5a60:	f7fe fd48 	bl	b44f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5a64:	4638      	mov	r0, r7
   b5a66:	b015      	add	sp, #84	; 0x54
   b5a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5a6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5a6c:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5a6e:	4a03      	ldr	r2, [pc, #12]	; (b5a7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5a70:	601a      	str	r2, [r3, #0]
   b5a72:	2200      	movs	r2, #0
   b5a74:	605a      	str	r2, [r3, #4]

} // spark
   b5a76:	4770      	bx	lr
   b5a78:	2003e714 	.word	0x2003e714
   b5a7c:	000b6880 	.word	0x000b6880

000b5a80 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5a80:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5a82:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5a84:	d902      	bls.n	b5a8c <pinAvailable+0xc>
    return false;
   b5a86:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5a88:	b002      	add	sp, #8
   b5a8a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5a8c:	f1a0 030b 	sub.w	r3, r0, #11
   b5a90:	2b02      	cmp	r3, #2
   b5a92:	d81a      	bhi.n	b5aca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5a94:	4c17      	ldr	r4, [pc, #92]	; (b5af4 <pinAvailable+0x74>)
   b5a96:	7821      	ldrb	r1, [r4, #0]
   b5a98:	f3bf 8f5b 	dmb	ish
   b5a9c:	f011 0101 	ands.w	r1, r1, #1
   b5aa0:	d10b      	bne.n	b5aba <pinAvailable+0x3a>
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	9101      	str	r1, [sp, #4]
   b5aa6:	f7fe fafc 	bl	b40a2 <__cxa_guard_acquire>
   b5aaa:	9901      	ldr	r1, [sp, #4]
   b5aac:	b128      	cbz	r0, b5aba <pinAvailable+0x3a>
   b5aae:	4812      	ldr	r0, [pc, #72]	; (b5af8 <pinAvailable+0x78>)
   b5ab0:	f7fe ff5a 	bl	b4968 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f7fe faf9 	bl	b40ac <__cxa_guard_release>
   b5aba:	4b0f      	ldr	r3, [pc, #60]	; (b5af8 <pinAvailable+0x78>)
   b5abc:	7818      	ldrb	r0, [r3, #0]
   b5abe:	f7fe fde9 	bl	b4694 <hal_spi_is_enabled>
   b5ac2:	2800      	cmp	r0, #0
   b5ac4:	d1df      	bne.n	b5a86 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5ac6:	2001      	movs	r0, #1
   b5ac8:	e7de      	b.n	b5a88 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5aca:	2801      	cmp	r0, #1
   b5acc:	d809      	bhi.n	b5ae2 <pinAvailable+0x62>
   b5ace:	f000 f89b 	bl	b5c08 <_Z19__fetch_global_Wirev>
   b5ad2:	2100      	movs	r1, #0
   b5ad4:	7c00      	ldrb	r0, [r0, #16]
   b5ad6:	f7fe fdc5 	bl	b4664 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5ada:	f080 0001 	eor.w	r0, r0, #1
   b5ade:	b2c0      	uxtb	r0, r0
   b5ae0:	e7d2      	b.n	b5a88 <pinAvailable+0x8>
   b5ae2:	3809      	subs	r0, #9
   b5ae4:	2801      	cmp	r0, #1
   b5ae6:	d8ee      	bhi.n	b5ac6 <pinAvailable+0x46>
   b5ae8:	f000 f84e 	bl	b5b88 <_Z22__fetch_global_Serial1v>
   b5aec:	7c00      	ldrb	r0, [r0, #16]
   b5aee:	f7fe fd71 	bl	b45d4 <hal_usart_is_enabled>
   b5af2:	e7f2      	b.n	b5ada <pinAvailable+0x5a>
   b5af4:	2003e71c 	.word	0x2003e71c
   b5af8:	2003e720 	.word	0x2003e720

000b5afc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5afc:	2823      	cmp	r0, #35	; 0x23
{
   b5afe:	b538      	push	{r3, r4, r5, lr}
   b5b00:	4604      	mov	r4, r0
   b5b02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b04:	d80a      	bhi.n	b5b1c <pinMode+0x20>
   b5b06:	29ff      	cmp	r1, #255	; 0xff
   b5b08:	d008      	beq.n	b5b1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5b0a:	f7ff ffb9 	bl	b5a80 <pinAvailable>
   b5b0e:	b128      	cbz	r0, b5b1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5b10:	4629      	mov	r1, r5
   b5b12:	4620      	mov	r0, r4
}
   b5b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5b18:	f7fe bcfc 	b.w	b4514 <HAL_Pin_Mode>
}
   b5b1c:	bd38      	pop	{r3, r4, r5, pc}

000b5b1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5b1e:	b538      	push	{r3, r4, r5, lr}
   b5b20:	4604      	mov	r4, r0
   b5b22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5b24:	f7fe fcfe 	bl	b4524 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5b28:	28ff      	cmp	r0, #255	; 0xff
   b5b2a:	d010      	beq.n	b5b4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5b2c:	2806      	cmp	r0, #6
   b5b2e:	d804      	bhi.n	b5b3a <digitalWrite+0x1c>
   b5b30:	234d      	movs	r3, #77	; 0x4d
   b5b32:	fa23 f000 	lsr.w	r0, r3, r0
   b5b36:	07c3      	lsls	r3, r0, #31
   b5b38:	d409      	bmi.n	b5b4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	f7ff ffa0 	bl	b5a80 <pinAvailable>
   b5b40:	b128      	cbz	r0, b5b4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5b42:	4629      	mov	r1, r5
   b5b44:	4620      	mov	r0, r4
}
   b5b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5b4a:	f7fe bcf3 	b.w	b4534 <HAL_GPIO_Write>
}
   b5b4e:	bd38      	pop	{r3, r4, r5, pc}

000b5b50 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b50:	4770      	bx	lr
	...

000b5b54 <_Z20acquireSerial1Bufferv>:
{
   b5b54:	b538      	push	{r3, r4, r5, lr}
   b5b56:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5b58:	2514      	movs	r5, #20
   b5b5a:	462a      	mov	r2, r5
   b5b5c:	2100      	movs	r1, #0
   b5b5e:	f000 fcaf 	bl	b64c0 <memset>
   b5b62:	8025      	strh	r5, [r4, #0]
   b5b64:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b66:	4907      	ldr	r1, [pc, #28]	; (b5b84 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5b68:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b6a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5b6c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b6e:	f000 f86f 	bl	b5c50 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b72:	4904      	ldr	r1, [pc, #16]	; (b5b84 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5b74:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b76:	4628      	mov	r0, r5
   b5b78:	f000 f86a 	bl	b5c50 <_ZnajRKSt9nothrow_t>
    };
   b5b7c:	60e0      	str	r0, [r4, #12]
}
   b5b7e:	4620      	mov	r0, r4
   b5b80:	bd38      	pop	{r3, r4, r5, pc}
   b5b82:	bf00      	nop
   b5b84:	000b68b4 	.word	0x000b68b4

000b5b88 <_Z22__fetch_global_Serial1v>:
{
   b5b88:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b8a:	4d0e      	ldr	r5, [pc, #56]	; (b5bc4 <_Z22__fetch_global_Serial1v+0x3c>)
   b5b8c:	7829      	ldrb	r1, [r5, #0]
   b5b8e:	f3bf 8f5b 	dmb	ish
   b5b92:	f011 0401 	ands.w	r4, r1, #1
{
   b5b96:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b98:	d111      	bne.n	b5bbe <_Z22__fetch_global_Serial1v+0x36>
   b5b9a:	4628      	mov	r0, r5
   b5b9c:	f7fe fa81 	bl	b40a2 <__cxa_guard_acquire>
   b5ba0:	b168      	cbz	r0, b5bbe <_Z22__fetch_global_Serial1v+0x36>
   b5ba2:	a801      	add	r0, sp, #4
   b5ba4:	f7ff ffd6 	bl	b5b54 <_Z20acquireSerial1Bufferv>
   b5ba8:	aa01      	add	r2, sp, #4
   b5baa:	4621      	mov	r1, r4
   b5bac:	4806      	ldr	r0, [pc, #24]	; (b5bc8 <_Z22__fetch_global_Serial1v+0x40>)
   b5bae:	f7ff fe3b 	bl	b5828 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5bb2:	4628      	mov	r0, r5
   b5bb4:	f7fe fa7a 	bl	b40ac <__cxa_guard_release>
   b5bb8:	4804      	ldr	r0, [pc, #16]	; (b5bcc <_Z22__fetch_global_Serial1v+0x44>)
   b5bba:	f000 fc6d 	bl	b6498 <atexit>
    return serial1;
}
   b5bbe:	4802      	ldr	r0, [pc, #8]	; (b5bc8 <_Z22__fetch_global_Serial1v+0x40>)
   b5bc0:	b007      	add	sp, #28
   b5bc2:	bd30      	pop	{r4, r5, pc}
   b5bc4:	2003e728 	.word	0x2003e728
   b5bc8:	2003e72c 	.word	0x2003e72c
   b5bcc:	000b5b51 	.word	0x000b5b51

000b5bd0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5bd0:	4770      	bx	lr
	...

000b5bd4 <_Z17acquireWireBufferv>:
{
   b5bd4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5bd6:	4b0a      	ldr	r3, [pc, #40]	; (b5c00 <_Z17acquireWireBufferv+0x2c>)
   b5bd8:	6003      	str	r3, [r0, #0]
   b5bda:	2301      	movs	r3, #1
{
   b5bdc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5bde:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5be0:	4908      	ldr	r1, [pc, #32]	; (b5c04 <_Z17acquireWireBufferv+0x30>)
   b5be2:	2020      	movs	r0, #32
   b5be4:	f000 f834 	bl	b5c50 <_ZnajRKSt9nothrow_t>
	};
   b5be8:	2520      	movs	r5, #32
   b5bea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5bec:	4905      	ldr	r1, [pc, #20]	; (b5c04 <_Z17acquireWireBufferv+0x30>)
	};
   b5bee:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5bf0:	4628      	mov	r0, r5
   b5bf2:	f000 f82d 	bl	b5c50 <_ZnajRKSt9nothrow_t>
	};
   b5bf6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	bd38      	pop	{r3, r4, r5, pc}
   b5bfe:	bf00      	nop
   b5c00:	00010018 	.word	0x00010018
   b5c04:	000b68b4 	.word	0x000b68b4

000b5c08 <_Z19__fetch_global_Wirev>:
{
   b5c08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c0a:	4d0e      	ldr	r5, [pc, #56]	; (b5c44 <_Z19__fetch_global_Wirev+0x3c>)
   b5c0c:	7829      	ldrb	r1, [r5, #0]
   b5c0e:	f3bf 8f5b 	dmb	ish
   b5c12:	f011 0401 	ands.w	r4, r1, #1
{
   b5c16:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c18:	d111      	bne.n	b5c3e <_Z19__fetch_global_Wirev+0x36>
   b5c1a:	4628      	mov	r0, r5
   b5c1c:	f7fe fa41 	bl	b40a2 <__cxa_guard_acquire>
   b5c20:	b168      	cbz	r0, b5c3e <_Z19__fetch_global_Wirev+0x36>
   b5c22:	4668      	mov	r0, sp
   b5c24:	f7ff ffd6 	bl	b5bd4 <_Z17acquireWireBufferv>
   b5c28:	466a      	mov	r2, sp
   b5c2a:	4621      	mov	r1, r4
   b5c2c:	4806      	ldr	r0, [pc, #24]	; (b5c48 <_Z19__fetch_global_Wirev+0x40>)
   b5c2e:	f7ff fe57 	bl	b58e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5c32:	4628      	mov	r0, r5
   b5c34:	f7fe fa3a 	bl	b40ac <__cxa_guard_release>
   b5c38:	4804      	ldr	r0, [pc, #16]	; (b5c4c <_Z19__fetch_global_Wirev+0x44>)
   b5c3a:	f000 fc2d 	bl	b6498 <atexit>
	return wire;
}
   b5c3e:	4802      	ldr	r0, [pc, #8]	; (b5c48 <_Z19__fetch_global_Wirev+0x40>)
   b5c40:	b007      	add	sp, #28
   b5c42:	bd30      	pop	{r4, r5, pc}
   b5c44:	2003e744 	.word	0x2003e744
   b5c48:	2003e748 	.word	0x2003e748
   b5c4c:	000b5bd1 	.word	0x000b5bd1

000b5c50 <_ZnajRKSt9nothrow_t>:
   b5c50:	f7fe ba23 	b.w	b409a <_Znaj>

000b5c54 <_ZSt25__throw_bad_function_callv>:
   b5c54:	b508      	push	{r3, lr}
   b5c56:	f7fe fe29 	bl	b48ac <abort>
	...

000b5c5c <__aeabi_drsub>:
   b5c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5c60:	e002      	b.n	b5c68 <__adddf3>
   b5c62:	bf00      	nop

000b5c64 <__aeabi_dsub>:
   b5c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5c68 <__adddf3>:
   b5c68:	b530      	push	{r4, r5, lr}
   b5c6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5c6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5c72:	ea94 0f05 	teq	r4, r5
   b5c76:	bf08      	it	eq
   b5c78:	ea90 0f02 	teqeq	r0, r2
   b5c7c:	bf1f      	itttt	ne
   b5c7e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5c82:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5c86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5c8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5c8e:	f000 80e2 	beq.w	b5e56 <__adddf3+0x1ee>
   b5c92:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5c96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5c9a:	bfb8      	it	lt
   b5c9c:	426d      	neglt	r5, r5
   b5c9e:	dd0c      	ble.n	b5cba <__adddf3+0x52>
   b5ca0:	442c      	add	r4, r5
   b5ca2:	ea80 0202 	eor.w	r2, r0, r2
   b5ca6:	ea81 0303 	eor.w	r3, r1, r3
   b5caa:	ea82 0000 	eor.w	r0, r2, r0
   b5cae:	ea83 0101 	eor.w	r1, r3, r1
   b5cb2:	ea80 0202 	eor.w	r2, r0, r2
   b5cb6:	ea81 0303 	eor.w	r3, r1, r3
   b5cba:	2d36      	cmp	r5, #54	; 0x36
   b5cbc:	bf88      	it	hi
   b5cbe:	bd30      	pophi	{r4, r5, pc}
   b5cc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5cc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5ccc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5cd0:	d002      	beq.n	b5cd8 <__adddf3+0x70>
   b5cd2:	4240      	negs	r0, r0
   b5cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5cd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5ce0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5ce4:	d002      	beq.n	b5cec <__adddf3+0x84>
   b5ce6:	4252      	negs	r2, r2
   b5ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5cec:	ea94 0f05 	teq	r4, r5
   b5cf0:	f000 80a7 	beq.w	b5e42 <__adddf3+0x1da>
   b5cf4:	f1a4 0401 	sub.w	r4, r4, #1
   b5cf8:	f1d5 0e20 	rsbs	lr, r5, #32
   b5cfc:	db0d      	blt.n	b5d1a <__adddf3+0xb2>
   b5cfe:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5d02:	fa22 f205 	lsr.w	r2, r2, r5
   b5d06:	1880      	adds	r0, r0, r2
   b5d08:	f141 0100 	adc.w	r1, r1, #0
   b5d0c:	fa03 f20e 	lsl.w	r2, r3, lr
   b5d10:	1880      	adds	r0, r0, r2
   b5d12:	fa43 f305 	asr.w	r3, r3, r5
   b5d16:	4159      	adcs	r1, r3
   b5d18:	e00e      	b.n	b5d38 <__adddf3+0xd0>
   b5d1a:	f1a5 0520 	sub.w	r5, r5, #32
   b5d1e:	f10e 0e20 	add.w	lr, lr, #32
   b5d22:	2a01      	cmp	r2, #1
   b5d24:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5d28:	bf28      	it	cs
   b5d2a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5d2e:	fa43 f305 	asr.w	r3, r3, r5
   b5d32:	18c0      	adds	r0, r0, r3
   b5d34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5d38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5d3c:	d507      	bpl.n	b5d4e <__adddf3+0xe6>
   b5d3e:	f04f 0e00 	mov.w	lr, #0
   b5d42:	f1dc 0c00 	rsbs	ip, ip, #0
   b5d46:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5d4a:	eb6e 0101 	sbc.w	r1, lr, r1
   b5d4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5d52:	d31b      	bcc.n	b5d8c <__adddf3+0x124>
   b5d54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5d58:	d30c      	bcc.n	b5d74 <__adddf3+0x10c>
   b5d5a:	0849      	lsrs	r1, r1, #1
   b5d5c:	ea5f 0030 	movs.w	r0, r0, rrx
   b5d60:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5d64:	f104 0401 	add.w	r4, r4, #1
   b5d68:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5d6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5d70:	f080 809a 	bcs.w	b5ea8 <__adddf3+0x240>
   b5d74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5d78:	bf08      	it	eq
   b5d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5d7e:	f150 0000 	adcs.w	r0, r0, #0
   b5d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5d86:	ea41 0105 	orr.w	r1, r1, r5
   b5d8a:	bd30      	pop	{r4, r5, pc}
   b5d8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5d90:	4140      	adcs	r0, r0
   b5d92:	eb41 0101 	adc.w	r1, r1, r1
   b5d96:	3c01      	subs	r4, #1
   b5d98:	bf28      	it	cs
   b5d9a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5d9e:	d2e9      	bcs.n	b5d74 <__adddf3+0x10c>
   b5da0:	f091 0f00 	teq	r1, #0
   b5da4:	bf04      	itt	eq
   b5da6:	4601      	moveq	r1, r0
   b5da8:	2000      	moveq	r0, #0
   b5daa:	fab1 f381 	clz	r3, r1
   b5dae:	bf08      	it	eq
   b5db0:	3320      	addeq	r3, #32
   b5db2:	f1a3 030b 	sub.w	r3, r3, #11
   b5db6:	f1b3 0220 	subs.w	r2, r3, #32
   b5dba:	da0c      	bge.n	b5dd6 <__adddf3+0x16e>
   b5dbc:	320c      	adds	r2, #12
   b5dbe:	dd08      	ble.n	b5dd2 <__adddf3+0x16a>
   b5dc0:	f102 0c14 	add.w	ip, r2, #20
   b5dc4:	f1c2 020c 	rsb	r2, r2, #12
   b5dc8:	fa01 f00c 	lsl.w	r0, r1, ip
   b5dcc:	fa21 f102 	lsr.w	r1, r1, r2
   b5dd0:	e00c      	b.n	b5dec <__adddf3+0x184>
   b5dd2:	f102 0214 	add.w	r2, r2, #20
   b5dd6:	bfd8      	it	le
   b5dd8:	f1c2 0c20 	rsble	ip, r2, #32
   b5ddc:	fa01 f102 	lsl.w	r1, r1, r2
   b5de0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5de4:	bfdc      	itt	le
   b5de6:	ea41 010c 	orrle.w	r1, r1, ip
   b5dea:	4090      	lslle	r0, r2
   b5dec:	1ae4      	subs	r4, r4, r3
   b5dee:	bfa2      	ittt	ge
   b5df0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5df4:	4329      	orrge	r1, r5
   b5df6:	bd30      	popge	{r4, r5, pc}
   b5df8:	ea6f 0404 	mvn.w	r4, r4
   b5dfc:	3c1f      	subs	r4, #31
   b5dfe:	da1c      	bge.n	b5e3a <__adddf3+0x1d2>
   b5e00:	340c      	adds	r4, #12
   b5e02:	dc0e      	bgt.n	b5e22 <__adddf3+0x1ba>
   b5e04:	f104 0414 	add.w	r4, r4, #20
   b5e08:	f1c4 0220 	rsb	r2, r4, #32
   b5e0c:	fa20 f004 	lsr.w	r0, r0, r4
   b5e10:	fa01 f302 	lsl.w	r3, r1, r2
   b5e14:	ea40 0003 	orr.w	r0, r0, r3
   b5e18:	fa21 f304 	lsr.w	r3, r1, r4
   b5e1c:	ea45 0103 	orr.w	r1, r5, r3
   b5e20:	bd30      	pop	{r4, r5, pc}
   b5e22:	f1c4 040c 	rsb	r4, r4, #12
   b5e26:	f1c4 0220 	rsb	r2, r4, #32
   b5e2a:	fa20 f002 	lsr.w	r0, r0, r2
   b5e2e:	fa01 f304 	lsl.w	r3, r1, r4
   b5e32:	ea40 0003 	orr.w	r0, r0, r3
   b5e36:	4629      	mov	r1, r5
   b5e38:	bd30      	pop	{r4, r5, pc}
   b5e3a:	fa21 f004 	lsr.w	r0, r1, r4
   b5e3e:	4629      	mov	r1, r5
   b5e40:	bd30      	pop	{r4, r5, pc}
   b5e42:	f094 0f00 	teq	r4, #0
   b5e46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5e4a:	bf06      	itte	eq
   b5e4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5e50:	3401      	addeq	r4, #1
   b5e52:	3d01      	subne	r5, #1
   b5e54:	e74e      	b.n	b5cf4 <__adddf3+0x8c>
   b5e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5e5a:	bf18      	it	ne
   b5e5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5e60:	d029      	beq.n	b5eb6 <__adddf3+0x24e>
   b5e62:	ea94 0f05 	teq	r4, r5
   b5e66:	bf08      	it	eq
   b5e68:	ea90 0f02 	teqeq	r0, r2
   b5e6c:	d005      	beq.n	b5e7a <__adddf3+0x212>
   b5e6e:	ea54 0c00 	orrs.w	ip, r4, r0
   b5e72:	bf04      	itt	eq
   b5e74:	4619      	moveq	r1, r3
   b5e76:	4610      	moveq	r0, r2
   b5e78:	bd30      	pop	{r4, r5, pc}
   b5e7a:	ea91 0f03 	teq	r1, r3
   b5e7e:	bf1e      	ittt	ne
   b5e80:	2100      	movne	r1, #0
   b5e82:	2000      	movne	r0, #0
   b5e84:	bd30      	popne	{r4, r5, pc}
   b5e86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5e8a:	d105      	bne.n	b5e98 <__adddf3+0x230>
   b5e8c:	0040      	lsls	r0, r0, #1
   b5e8e:	4149      	adcs	r1, r1
   b5e90:	bf28      	it	cs
   b5e92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5e96:	bd30      	pop	{r4, r5, pc}
   b5e98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5e9c:	bf3c      	itt	cc
   b5e9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5ea2:	bd30      	popcc	{r4, r5, pc}
   b5ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5ea8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5eb0:	f04f 0000 	mov.w	r0, #0
   b5eb4:	bd30      	pop	{r4, r5, pc}
   b5eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5eba:	bf1a      	itte	ne
   b5ebc:	4619      	movne	r1, r3
   b5ebe:	4610      	movne	r0, r2
   b5ec0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5ec4:	bf1c      	itt	ne
   b5ec6:	460b      	movne	r3, r1
   b5ec8:	4602      	movne	r2, r0
   b5eca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5ece:	bf06      	itte	eq
   b5ed0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5ed4:	ea91 0f03 	teqeq	r1, r3
   b5ed8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5edc:	bd30      	pop	{r4, r5, pc}
   b5ede:	bf00      	nop

000b5ee0 <__aeabi_ui2d>:
   b5ee0:	f090 0f00 	teq	r0, #0
   b5ee4:	bf04      	itt	eq
   b5ee6:	2100      	moveq	r1, #0
   b5ee8:	4770      	bxeq	lr
   b5eea:	b530      	push	{r4, r5, lr}
   b5eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5ef4:	f04f 0500 	mov.w	r5, #0
   b5ef8:	f04f 0100 	mov.w	r1, #0
   b5efc:	e750      	b.n	b5da0 <__adddf3+0x138>
   b5efe:	bf00      	nop

000b5f00 <__aeabi_i2d>:
   b5f00:	f090 0f00 	teq	r0, #0
   b5f04:	bf04      	itt	eq
   b5f06:	2100      	moveq	r1, #0
   b5f08:	4770      	bxeq	lr
   b5f0a:	b530      	push	{r4, r5, lr}
   b5f0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5f10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5f14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5f18:	bf48      	it	mi
   b5f1a:	4240      	negmi	r0, r0
   b5f1c:	f04f 0100 	mov.w	r1, #0
   b5f20:	e73e      	b.n	b5da0 <__adddf3+0x138>
   b5f22:	bf00      	nop

000b5f24 <__aeabi_f2d>:
   b5f24:	0042      	lsls	r2, r0, #1
   b5f26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5f2a:	ea4f 0131 	mov.w	r1, r1, rrx
   b5f2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5f32:	bf1f      	itttt	ne
   b5f34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5f38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5f3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5f40:	4770      	bxne	lr
   b5f42:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5f46:	bf08      	it	eq
   b5f48:	4770      	bxeq	lr
   b5f4a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5f4e:	bf04      	itt	eq
   b5f50:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5f54:	4770      	bxeq	lr
   b5f56:	b530      	push	{r4, r5, lr}
   b5f58:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5f64:	e71c      	b.n	b5da0 <__adddf3+0x138>
   b5f66:	bf00      	nop

000b5f68 <__aeabi_ul2d>:
   b5f68:	ea50 0201 	orrs.w	r2, r0, r1
   b5f6c:	bf08      	it	eq
   b5f6e:	4770      	bxeq	lr
   b5f70:	b530      	push	{r4, r5, lr}
   b5f72:	f04f 0500 	mov.w	r5, #0
   b5f76:	e00a      	b.n	b5f8e <__aeabi_l2d+0x16>

000b5f78 <__aeabi_l2d>:
   b5f78:	ea50 0201 	orrs.w	r2, r0, r1
   b5f7c:	bf08      	it	eq
   b5f7e:	4770      	bxeq	lr
   b5f80:	b530      	push	{r4, r5, lr}
   b5f82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5f86:	d502      	bpl.n	b5f8e <__aeabi_l2d+0x16>
   b5f88:	4240      	negs	r0, r0
   b5f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5f8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5f92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5f96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5f9a:	f43f aed8 	beq.w	b5d4e <__adddf3+0xe6>
   b5f9e:	f04f 0203 	mov.w	r2, #3
   b5fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5fa6:	bf18      	it	ne
   b5fa8:	3203      	addne	r2, #3
   b5faa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5fae:	bf18      	it	ne
   b5fb0:	3203      	addne	r2, #3
   b5fb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5fb6:	f1c2 0320 	rsb	r3, r2, #32
   b5fba:	fa00 fc03 	lsl.w	ip, r0, r3
   b5fbe:	fa20 f002 	lsr.w	r0, r0, r2
   b5fc2:	fa01 fe03 	lsl.w	lr, r1, r3
   b5fc6:	ea40 000e 	orr.w	r0, r0, lr
   b5fca:	fa21 f102 	lsr.w	r1, r1, r2
   b5fce:	4414      	add	r4, r2
   b5fd0:	e6bd      	b.n	b5d4e <__adddf3+0xe6>
   b5fd2:	bf00      	nop

000b5fd4 <__aeabi_dmul>:
   b5fd4:	b570      	push	{r4, r5, r6, lr}
   b5fd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5fda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5fe2:	bf1d      	ittte	ne
   b5fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5fe8:	ea94 0f0c 	teqne	r4, ip
   b5fec:	ea95 0f0c 	teqne	r5, ip
   b5ff0:	f000 f8de 	bleq	b61b0 <__aeabi_dmul+0x1dc>
   b5ff4:	442c      	add	r4, r5
   b5ff6:	ea81 0603 	eor.w	r6, r1, r3
   b5ffa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5ffe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6002:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6006:	bf18      	it	ne
   b6008:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b600c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6014:	d038      	beq.n	b6088 <__aeabi_dmul+0xb4>
   b6016:	fba0 ce02 	umull	ip, lr, r0, r2
   b601a:	f04f 0500 	mov.w	r5, #0
   b601e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6022:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6026:	fbe0 e503 	umlal	lr, r5, r0, r3
   b602a:	f04f 0600 	mov.w	r6, #0
   b602e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6032:	f09c 0f00 	teq	ip, #0
   b6036:	bf18      	it	ne
   b6038:	f04e 0e01 	orrne.w	lr, lr, #1
   b603c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6040:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6044:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6048:	d204      	bcs.n	b6054 <__aeabi_dmul+0x80>
   b604a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b604e:	416d      	adcs	r5, r5
   b6050:	eb46 0606 	adc.w	r6, r6, r6
   b6054:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6058:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b605c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6060:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6064:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6068:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b606c:	bf88      	it	hi
   b606e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6072:	d81e      	bhi.n	b60b2 <__aeabi_dmul+0xde>
   b6074:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6078:	bf08      	it	eq
   b607a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b607e:	f150 0000 	adcs.w	r0, r0, #0
   b6082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6086:	bd70      	pop	{r4, r5, r6, pc}
   b6088:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b608c:	ea46 0101 	orr.w	r1, r6, r1
   b6090:	ea40 0002 	orr.w	r0, r0, r2
   b6094:	ea81 0103 	eor.w	r1, r1, r3
   b6098:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b609c:	bfc2      	ittt	gt
   b609e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b60a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b60a6:	bd70      	popgt	{r4, r5, r6, pc}
   b60a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b60ac:	f04f 0e00 	mov.w	lr, #0
   b60b0:	3c01      	subs	r4, #1
   b60b2:	f300 80ab 	bgt.w	b620c <__aeabi_dmul+0x238>
   b60b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b60ba:	bfde      	ittt	le
   b60bc:	2000      	movle	r0, #0
   b60be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b60c2:	bd70      	pople	{r4, r5, r6, pc}
   b60c4:	f1c4 0400 	rsb	r4, r4, #0
   b60c8:	3c20      	subs	r4, #32
   b60ca:	da35      	bge.n	b6138 <__aeabi_dmul+0x164>
   b60cc:	340c      	adds	r4, #12
   b60ce:	dc1b      	bgt.n	b6108 <__aeabi_dmul+0x134>
   b60d0:	f104 0414 	add.w	r4, r4, #20
   b60d4:	f1c4 0520 	rsb	r5, r4, #32
   b60d8:	fa00 f305 	lsl.w	r3, r0, r5
   b60dc:	fa20 f004 	lsr.w	r0, r0, r4
   b60e0:	fa01 f205 	lsl.w	r2, r1, r5
   b60e4:	ea40 0002 	orr.w	r0, r0, r2
   b60e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b60ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b60f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b60f4:	fa21 f604 	lsr.w	r6, r1, r4
   b60f8:	eb42 0106 	adc.w	r1, r2, r6
   b60fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6100:	bf08      	it	eq
   b6102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6106:	bd70      	pop	{r4, r5, r6, pc}
   b6108:	f1c4 040c 	rsb	r4, r4, #12
   b610c:	f1c4 0520 	rsb	r5, r4, #32
   b6110:	fa00 f304 	lsl.w	r3, r0, r4
   b6114:	fa20 f005 	lsr.w	r0, r0, r5
   b6118:	fa01 f204 	lsl.w	r2, r1, r4
   b611c:	ea40 0002 	orr.w	r0, r0, r2
   b6120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6124:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6128:	f141 0100 	adc.w	r1, r1, #0
   b612c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6130:	bf08      	it	eq
   b6132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6136:	bd70      	pop	{r4, r5, r6, pc}
   b6138:	f1c4 0520 	rsb	r5, r4, #32
   b613c:	fa00 f205 	lsl.w	r2, r0, r5
   b6140:	ea4e 0e02 	orr.w	lr, lr, r2
   b6144:	fa20 f304 	lsr.w	r3, r0, r4
   b6148:	fa01 f205 	lsl.w	r2, r1, r5
   b614c:	ea43 0302 	orr.w	r3, r3, r2
   b6150:	fa21 f004 	lsr.w	r0, r1, r4
   b6154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6158:	fa21 f204 	lsr.w	r2, r1, r4
   b615c:	ea20 0002 	bic.w	r0, r0, r2
   b6160:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6168:	bf08      	it	eq
   b616a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b616e:	bd70      	pop	{r4, r5, r6, pc}
   b6170:	f094 0f00 	teq	r4, #0
   b6174:	d10f      	bne.n	b6196 <__aeabi_dmul+0x1c2>
   b6176:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b617a:	0040      	lsls	r0, r0, #1
   b617c:	eb41 0101 	adc.w	r1, r1, r1
   b6180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6184:	bf08      	it	eq
   b6186:	3c01      	subeq	r4, #1
   b6188:	d0f7      	beq.n	b617a <__aeabi_dmul+0x1a6>
   b618a:	ea41 0106 	orr.w	r1, r1, r6
   b618e:	f095 0f00 	teq	r5, #0
   b6192:	bf18      	it	ne
   b6194:	4770      	bxne	lr
   b6196:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b619a:	0052      	lsls	r2, r2, #1
   b619c:	eb43 0303 	adc.w	r3, r3, r3
   b61a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b61a4:	bf08      	it	eq
   b61a6:	3d01      	subeq	r5, #1
   b61a8:	d0f7      	beq.n	b619a <__aeabi_dmul+0x1c6>
   b61aa:	ea43 0306 	orr.w	r3, r3, r6
   b61ae:	4770      	bx	lr
   b61b0:	ea94 0f0c 	teq	r4, ip
   b61b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b61b8:	bf18      	it	ne
   b61ba:	ea95 0f0c 	teqne	r5, ip
   b61be:	d00c      	beq.n	b61da <__aeabi_dmul+0x206>
   b61c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b61c4:	bf18      	it	ne
   b61c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b61ca:	d1d1      	bne.n	b6170 <__aeabi_dmul+0x19c>
   b61cc:	ea81 0103 	eor.w	r1, r1, r3
   b61d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b61d4:	f04f 0000 	mov.w	r0, #0
   b61d8:	bd70      	pop	{r4, r5, r6, pc}
   b61da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b61de:	bf06      	itte	eq
   b61e0:	4610      	moveq	r0, r2
   b61e2:	4619      	moveq	r1, r3
   b61e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b61e8:	d019      	beq.n	b621e <__aeabi_dmul+0x24a>
   b61ea:	ea94 0f0c 	teq	r4, ip
   b61ee:	d102      	bne.n	b61f6 <__aeabi_dmul+0x222>
   b61f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b61f4:	d113      	bne.n	b621e <__aeabi_dmul+0x24a>
   b61f6:	ea95 0f0c 	teq	r5, ip
   b61fa:	d105      	bne.n	b6208 <__aeabi_dmul+0x234>
   b61fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6200:	bf1c      	itt	ne
   b6202:	4610      	movne	r0, r2
   b6204:	4619      	movne	r1, r3
   b6206:	d10a      	bne.n	b621e <__aeabi_dmul+0x24a>
   b6208:	ea81 0103 	eor.w	r1, r1, r3
   b620c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6210:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6218:	f04f 0000 	mov.w	r0, #0
   b621c:	bd70      	pop	{r4, r5, r6, pc}
   b621e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6222:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6226:	bd70      	pop	{r4, r5, r6, pc}

000b6228 <__aeabi_ddiv>:
   b6228:	b570      	push	{r4, r5, r6, lr}
   b622a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b622e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6236:	bf1d      	ittte	ne
   b6238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b623c:	ea94 0f0c 	teqne	r4, ip
   b6240:	ea95 0f0c 	teqne	r5, ip
   b6244:	f000 f8a7 	bleq	b6396 <__aeabi_ddiv+0x16e>
   b6248:	eba4 0405 	sub.w	r4, r4, r5
   b624c:	ea81 0e03 	eor.w	lr, r1, r3
   b6250:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6254:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6258:	f000 8088 	beq.w	b636c <__aeabi_ddiv+0x144>
   b625c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6260:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6264:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6268:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b626c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6270:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6274:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6278:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b627c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6280:	429d      	cmp	r5, r3
   b6282:	bf08      	it	eq
   b6284:	4296      	cmpeq	r6, r2
   b6286:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b628a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b628e:	d202      	bcs.n	b6296 <__aeabi_ddiv+0x6e>
   b6290:	085b      	lsrs	r3, r3, #1
   b6292:	ea4f 0232 	mov.w	r2, r2, rrx
   b6296:	1ab6      	subs	r6, r6, r2
   b6298:	eb65 0503 	sbc.w	r5, r5, r3
   b629c:	085b      	lsrs	r3, r3, #1
   b629e:	ea4f 0232 	mov.w	r2, r2, rrx
   b62a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b62a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b62aa:	ebb6 0e02 	subs.w	lr, r6, r2
   b62ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b62b2:	bf22      	ittt	cs
   b62b4:	1ab6      	subcs	r6, r6, r2
   b62b6:	4675      	movcs	r5, lr
   b62b8:	ea40 000c 	orrcs.w	r0, r0, ip
   b62bc:	085b      	lsrs	r3, r3, #1
   b62be:	ea4f 0232 	mov.w	r2, r2, rrx
   b62c2:	ebb6 0e02 	subs.w	lr, r6, r2
   b62c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b62ca:	bf22      	ittt	cs
   b62cc:	1ab6      	subcs	r6, r6, r2
   b62ce:	4675      	movcs	r5, lr
   b62d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b62d4:	085b      	lsrs	r3, r3, #1
   b62d6:	ea4f 0232 	mov.w	r2, r2, rrx
   b62da:	ebb6 0e02 	subs.w	lr, r6, r2
   b62de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b62e2:	bf22      	ittt	cs
   b62e4:	1ab6      	subcs	r6, r6, r2
   b62e6:	4675      	movcs	r5, lr
   b62e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b62ec:	085b      	lsrs	r3, r3, #1
   b62ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b62f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b62f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b62fa:	bf22      	ittt	cs
   b62fc:	1ab6      	subcs	r6, r6, r2
   b62fe:	4675      	movcs	r5, lr
   b6300:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6304:	ea55 0e06 	orrs.w	lr, r5, r6
   b6308:	d018      	beq.n	b633c <__aeabi_ddiv+0x114>
   b630a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b630e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6312:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b631a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b631e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6322:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6326:	d1c0      	bne.n	b62aa <__aeabi_ddiv+0x82>
   b6328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b632c:	d10b      	bne.n	b6346 <__aeabi_ddiv+0x11e>
   b632e:	ea41 0100 	orr.w	r1, r1, r0
   b6332:	f04f 0000 	mov.w	r0, #0
   b6336:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b633a:	e7b6      	b.n	b62aa <__aeabi_ddiv+0x82>
   b633c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6340:	bf04      	itt	eq
   b6342:	4301      	orreq	r1, r0
   b6344:	2000      	moveq	r0, #0
   b6346:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b634a:	bf88      	it	hi
   b634c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6350:	f63f aeaf 	bhi.w	b60b2 <__aeabi_dmul+0xde>
   b6354:	ebb5 0c03 	subs.w	ip, r5, r3
   b6358:	bf04      	itt	eq
   b635a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b635e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6362:	f150 0000 	adcs.w	r0, r0, #0
   b6366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b636a:	bd70      	pop	{r4, r5, r6, pc}
   b636c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6370:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6374:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6378:	bfc2      	ittt	gt
   b637a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b637e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6382:	bd70      	popgt	{r4, r5, r6, pc}
   b6384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6388:	f04f 0e00 	mov.w	lr, #0
   b638c:	3c01      	subs	r4, #1
   b638e:	e690      	b.n	b60b2 <__aeabi_dmul+0xde>
   b6390:	ea45 0e06 	orr.w	lr, r5, r6
   b6394:	e68d      	b.n	b60b2 <__aeabi_dmul+0xde>
   b6396:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b639a:	ea94 0f0c 	teq	r4, ip
   b639e:	bf08      	it	eq
   b63a0:	ea95 0f0c 	teqeq	r5, ip
   b63a4:	f43f af3b 	beq.w	b621e <__aeabi_dmul+0x24a>
   b63a8:	ea94 0f0c 	teq	r4, ip
   b63ac:	d10a      	bne.n	b63c4 <__aeabi_ddiv+0x19c>
   b63ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b63b2:	f47f af34 	bne.w	b621e <__aeabi_dmul+0x24a>
   b63b6:	ea95 0f0c 	teq	r5, ip
   b63ba:	f47f af25 	bne.w	b6208 <__aeabi_dmul+0x234>
   b63be:	4610      	mov	r0, r2
   b63c0:	4619      	mov	r1, r3
   b63c2:	e72c      	b.n	b621e <__aeabi_dmul+0x24a>
   b63c4:	ea95 0f0c 	teq	r5, ip
   b63c8:	d106      	bne.n	b63d8 <__aeabi_ddiv+0x1b0>
   b63ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b63ce:	f43f aefd 	beq.w	b61cc <__aeabi_dmul+0x1f8>
   b63d2:	4610      	mov	r0, r2
   b63d4:	4619      	mov	r1, r3
   b63d6:	e722      	b.n	b621e <__aeabi_dmul+0x24a>
   b63d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b63dc:	bf18      	it	ne
   b63de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b63e2:	f47f aec5 	bne.w	b6170 <__aeabi_dmul+0x19c>
   b63e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b63ea:	f47f af0d 	bne.w	b6208 <__aeabi_dmul+0x234>
   b63ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b63f2:	f47f aeeb 	bne.w	b61cc <__aeabi_dmul+0x1f8>
   b63f6:	e712      	b.n	b621e <__aeabi_dmul+0x24a>

000b63f8 <__aeabi_d2f>:
   b63f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b63fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6400:	bf24      	itt	cs
   b6402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b640a:	d90d      	bls.n	b6428 <__aeabi_d2f+0x30>
   b640c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b641c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6420:	bf08      	it	eq
   b6422:	f020 0001 	biceq.w	r0, r0, #1
   b6426:	4770      	bx	lr
   b6428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b642c:	d121      	bne.n	b6472 <__aeabi_d2f+0x7a>
   b642e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6432:	bfbc      	itt	lt
   b6434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6438:	4770      	bxlt	lr
   b643a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b643e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6442:	f1c2 0218 	rsb	r2, r2, #24
   b6446:	f1c2 0c20 	rsb	ip, r2, #32
   b644a:	fa10 f30c 	lsls.w	r3, r0, ip
   b644e:	fa20 f002 	lsr.w	r0, r0, r2
   b6452:	bf18      	it	ne
   b6454:	f040 0001 	orrne.w	r0, r0, #1
   b6458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b645c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6460:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6464:	ea40 000c 	orr.w	r0, r0, ip
   b6468:	fa23 f302 	lsr.w	r3, r3, r2
   b646c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6470:	e7cc      	b.n	b640c <__aeabi_d2f+0x14>
   b6472:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6476:	d107      	bne.n	b6488 <__aeabi_d2f+0x90>
   b6478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b647c:	bf1e      	ittt	ne
   b647e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6486:	4770      	bxne	lr
   b6488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b648c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6494:	4770      	bx	lr
   b6496:	bf00      	nop

000b6498 <atexit>:
   b6498:	2300      	movs	r3, #0
   b649a:	4601      	mov	r1, r0
   b649c:	461a      	mov	r2, r3
   b649e:	4618      	mov	r0, r3
   b64a0:	f000 b872 	b.w	b6588 <__register_exitproc>

000b64a4 <memcpy>:
   b64a4:	440a      	add	r2, r1
   b64a6:	4291      	cmp	r1, r2
   b64a8:	f100 33ff 	add.w	r3, r0, #4294967295
   b64ac:	d100      	bne.n	b64b0 <memcpy+0xc>
   b64ae:	4770      	bx	lr
   b64b0:	b510      	push	{r4, lr}
   b64b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b64b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b64ba:	4291      	cmp	r1, r2
   b64bc:	d1f9      	bne.n	b64b2 <memcpy+0xe>
   b64be:	bd10      	pop	{r4, pc}

000b64c0 <memset>:
   b64c0:	4402      	add	r2, r0
   b64c2:	4603      	mov	r3, r0
   b64c4:	4293      	cmp	r3, r2
   b64c6:	d100      	bne.n	b64ca <memset+0xa>
   b64c8:	4770      	bx	lr
   b64ca:	f803 1b01 	strb.w	r1, [r3], #1
   b64ce:	e7f9      	b.n	b64c4 <memset+0x4>

000b64d0 <srand>:
   b64d0:	b538      	push	{r3, r4, r5, lr}
   b64d2:	4b10      	ldr	r3, [pc, #64]	; (b6514 <srand+0x44>)
   b64d4:	681d      	ldr	r5, [r3, #0]
   b64d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b64d8:	4604      	mov	r4, r0
   b64da:	b9b3      	cbnz	r3, b650a <srand+0x3a>
   b64dc:	2018      	movs	r0, #24
   b64de:	f7fe f9c5 	bl	b486c <malloc>
   b64e2:	4602      	mov	r2, r0
   b64e4:	63a8      	str	r0, [r5, #56]	; 0x38
   b64e6:	b920      	cbnz	r0, b64f2 <srand+0x22>
   b64e8:	4b0b      	ldr	r3, [pc, #44]	; (b6518 <srand+0x48>)
   b64ea:	480c      	ldr	r0, [pc, #48]	; (b651c <srand+0x4c>)
   b64ec:	2142      	movs	r1, #66	; 0x42
   b64ee:	f7fe f9ed 	bl	b48cc <__assert_func>
   b64f2:	490b      	ldr	r1, [pc, #44]	; (b6520 <srand+0x50>)
   b64f4:	4b0b      	ldr	r3, [pc, #44]	; (b6524 <srand+0x54>)
   b64f6:	e9c0 1300 	strd	r1, r3, [r0]
   b64fa:	4b0b      	ldr	r3, [pc, #44]	; (b6528 <srand+0x58>)
   b64fc:	6083      	str	r3, [r0, #8]
   b64fe:	230b      	movs	r3, #11
   b6500:	8183      	strh	r3, [r0, #12]
   b6502:	2100      	movs	r1, #0
   b6504:	2001      	movs	r0, #1
   b6506:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b650a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b650c:	2200      	movs	r2, #0
   b650e:	611c      	str	r4, [r3, #16]
   b6510:	615a      	str	r2, [r3, #20]
   b6512:	bd38      	pop	{r3, r4, r5, pc}
   b6514:	2003e5bc 	.word	0x2003e5bc
   b6518:	000b68b5 	.word	0x000b68b5
   b651c:	000b68cc 	.word	0x000b68cc
   b6520:	abcd330e 	.word	0xabcd330e
   b6524:	e66d1234 	.word	0xe66d1234
   b6528:	0005deec 	.word	0x0005deec

000b652c <strcpy>:
   b652c:	4603      	mov	r3, r0
   b652e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6532:	f803 2b01 	strb.w	r2, [r3], #1
   b6536:	2a00      	cmp	r2, #0
   b6538:	d1f9      	bne.n	b652e <strcpy+0x2>
   b653a:	4770      	bx	lr

000b653c <strdup>:
   b653c:	4b02      	ldr	r3, [pc, #8]	; (b6548 <strdup+0xc>)
   b653e:	4601      	mov	r1, r0
   b6540:	6818      	ldr	r0, [r3, #0]
   b6542:	f000 b803 	b.w	b654c <_strdup_r>
   b6546:	bf00      	nop
   b6548:	2003e5bc 	.word	0x2003e5bc

000b654c <_strdup_r>:
   b654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b654e:	4604      	mov	r4, r0
   b6550:	4608      	mov	r0, r1
   b6552:	460d      	mov	r5, r1
   b6554:	f000 f80f 	bl	b6576 <strlen>
   b6558:	1c42      	adds	r2, r0, #1
   b655a:	4611      	mov	r1, r2
   b655c:	4620      	mov	r0, r4
   b655e:	9201      	str	r2, [sp, #4]
   b6560:	f7fe f9ac 	bl	b48bc <_malloc_r>
   b6564:	4604      	mov	r4, r0
   b6566:	b118      	cbz	r0, b6570 <_strdup_r+0x24>
   b6568:	9a01      	ldr	r2, [sp, #4]
   b656a:	4629      	mov	r1, r5
   b656c:	f7ff ff9a 	bl	b64a4 <memcpy>
   b6570:	4620      	mov	r0, r4
   b6572:	b003      	add	sp, #12
   b6574:	bd30      	pop	{r4, r5, pc}

000b6576 <strlen>:
   b6576:	4603      	mov	r3, r0
   b6578:	f813 2b01 	ldrb.w	r2, [r3], #1
   b657c:	2a00      	cmp	r2, #0
   b657e:	d1fb      	bne.n	b6578 <strlen+0x2>
   b6580:	1a18      	subs	r0, r3, r0
   b6582:	3801      	subs	r0, #1
   b6584:	4770      	bx	lr
	...

000b6588 <__register_exitproc>:
   b6588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b658c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6648 <__register_exitproc+0xc0>
   b6590:	4606      	mov	r6, r0
   b6592:	f8d8 0000 	ldr.w	r0, [r8]
   b6596:	461f      	mov	r7, r3
   b6598:	460d      	mov	r5, r1
   b659a:	4691      	mov	r9, r2
   b659c:	f000 f856 	bl	b664c <__retarget_lock_acquire_recursive>
   b65a0:	4b25      	ldr	r3, [pc, #148]	; (b6638 <__register_exitproc+0xb0>)
   b65a2:	681c      	ldr	r4, [r3, #0]
   b65a4:	b934      	cbnz	r4, b65b4 <__register_exitproc+0x2c>
   b65a6:	4c25      	ldr	r4, [pc, #148]	; (b663c <__register_exitproc+0xb4>)
   b65a8:	601c      	str	r4, [r3, #0]
   b65aa:	4b25      	ldr	r3, [pc, #148]	; (b6640 <__register_exitproc+0xb8>)
   b65ac:	b113      	cbz	r3, b65b4 <__register_exitproc+0x2c>
   b65ae:	681b      	ldr	r3, [r3, #0]
   b65b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b65b4:	6863      	ldr	r3, [r4, #4]
   b65b6:	2b1f      	cmp	r3, #31
   b65b8:	dd07      	ble.n	b65ca <__register_exitproc+0x42>
   b65ba:	f8d8 0000 	ldr.w	r0, [r8]
   b65be:	f000 f847 	bl	b6650 <__retarget_lock_release_recursive>
   b65c2:	f04f 30ff 	mov.w	r0, #4294967295
   b65c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b65ca:	b34e      	cbz	r6, b6620 <__register_exitproc+0x98>
   b65cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b65d0:	b988      	cbnz	r0, b65f6 <__register_exitproc+0x6e>
   b65d2:	4b1c      	ldr	r3, [pc, #112]	; (b6644 <__register_exitproc+0xbc>)
   b65d4:	b923      	cbnz	r3, b65e0 <__register_exitproc+0x58>
   b65d6:	f8d8 0000 	ldr.w	r0, [r8]
   b65da:	f000 f838 	bl	b664e <__retarget_lock_release>
   b65de:	e7f0      	b.n	b65c2 <__register_exitproc+0x3a>
   b65e0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b65e4:	f7fe f942 	bl	b486c <malloc>
   b65e8:	2800      	cmp	r0, #0
   b65ea:	d0f4      	beq.n	b65d6 <__register_exitproc+0x4e>
   b65ec:	2300      	movs	r3, #0
   b65ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b65f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b65f6:	6863      	ldr	r3, [r4, #4]
   b65f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b65fc:	2201      	movs	r2, #1
   b65fe:	409a      	lsls	r2, r3
   b6600:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6604:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6608:	4313      	orrs	r3, r2
   b660a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b660e:	2e02      	cmp	r6, #2
   b6610:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6614:	bf02      	ittt	eq
   b6616:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b661a:	4313      	orreq	r3, r2
   b661c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6620:	6863      	ldr	r3, [r4, #4]
   b6622:	f8d8 0000 	ldr.w	r0, [r8]
   b6626:	1c5a      	adds	r2, r3, #1
   b6628:	3302      	adds	r3, #2
   b662a:	6062      	str	r2, [r4, #4]
   b662c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6630:	f000 f80e 	bl	b6650 <__retarget_lock_release_recursive>
   b6634:	2000      	movs	r0, #0
   b6636:	e7c6      	b.n	b65c6 <__register_exitproc+0x3e>
   b6638:	2003e7e8 	.word	0x2003e7e8
   b663c:	2003e75c 	.word	0x2003e75c
   b6640:	00000000 	.word	0x00000000
   b6644:	000b486d 	.word	0x000b486d
   b6648:	2003e620 	.word	0x2003e620

000b664c <__retarget_lock_acquire_recursive>:
   b664c:	4770      	bx	lr

000b664e <__retarget_lock_release>:
   b664e:	4770      	bx	lr

000b6650 <__retarget_lock_release_recursive>:
   b6650:	4770      	bx	lr

000b6652 <link_code_end>:
	...

000b6654 <dynalib_user>:
   b6654:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6664:	0000 0000 6854 6572 6873 6c6f 3a64 2520     ....Threshold: %
   b6674:	2c64 5220 7365 7465 6854 6572 6873 6c6f     d, ResetThreshol
   b6684:	3a64 2520 2c64 4220 7361 6c65 6e69 2065     d: %d, Baseline 
   b6694:	6625 4400 7665 6369 2065 6f63 666e 6769     %f.Device config
   b66a4:	7275 6465 0000 0000                         ured....

000b66ac <_ZTV9MagSensor>:
	...
   b66b4:	40b3 000b 40b5 000b 6d5b 6761 525f 534d     .@...@..[mag_RMS
   b66c4:	203a 6625 202c 616d 5f67 3a78 2520 2c66     : %f, mag_x: %f,
   b66d4:	6d20 6761 795f 203a 6625 202c 616d 5f67      mag_y: %f, mag_
   b66e4:	3a7a 2520 5d66 4400 7465 6365 6974 676e     z: %f].Detecting
   b66f4:	5620 6865 6369 656c 0021 6552 656c 7361      Vehicle!.Releas
   b6704:	6465 002e 6f54 6174 206c 6556 6968 6c63     ed..Total Vehicl
   b6714:	7365 0000                                   es..

000b6718 <_ZTV14VehicleCounter>:
	...
   b6720:	44a1 000b 44a3 000b                         .D...D..

000b6728 <_ZTVN5spark13EthernetClassE>:
	...
   b6730:	494b 000b 4941 000b 4937 000b 492d 000b     KI..AI..7I..-I..
   b6740:	4921 000b 4915 000b 595d 000b 5965 000b     !I...I..]Y..eY..
   b6750:	4909 000b 4901 000b 48f7 000b 48ed 000b     .I...I...H...H..
   b6760:	5995 000b 7061 0070 5925 252d 2d6d 6425     .Y..app.%Y-%m-%d
   b6770:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b6780:	6d69 0065                                   ime.

000b6784 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b678c:	4ff5 000b 4ffb 000b 5039 000b 5009 000b     .O...O..9P...P..
   b679c:	4ff7 000b                                   .O..

000b67a0 <_ZTV9IPAddress>:
	...
   b67a8:	5535 000b 5525 000b 5527 000b               5U..%U..'U..

000b67b4 <_ZTV9USBSerial>:
	...
   b67bc:	561b 000b 5683 000b 5659 000b 4c21 000b     .V...V..YV..!L..
   b67cc:	564b 000b 561d 000b 562d 000b 567d 000b     KV...V..-V..}V..
   b67dc:	563d 000b 5615 000b                         =V...V..

000b67e4 <_ZTVN5spark13CellularClassE>:
	...
   b67ec:	5773 000b 5769 000b 575f 000b 5715 000b     sW..iW.._W...W..
   b67fc:	5753 000b 5747 000b 595d 000b 5965 000b     SW..GW..]Y..eY..
   b680c:	573b 000b 5733 000b 5729 000b 571f 000b     ;W..3W..)W...W..
   b681c:	5995 000b                                   .Y..

000b6820 <_ZTV11USARTSerial>:
	...
   b6828:	57ad 000b 5819 000b 57f1 000b 4c21 000b     .W...X...W..!L..
   b6838:	57c1 000b 57dd 000b 57cf 000b 57eb 000b     .W...W...W...W..
   b6848:	57af 000b 57b3 000b                         .W...W..

000b6850 <_ZTV7TwoWire>:
	...
   b6858:	5887 000b 58d1 000b 58a9 000b 5889 000b     .X...X...X...X..
   b6868:	58b1 000b 58b9 000b 58c1 000b 58c9 000b     .X...X...X...X..

000b6878 <_ZTVN5spark12NetworkClassE>:
	...
   b6880:	591d 000b 5927 000b 5931 000b 593b 000b     .Y..'Y..1Y..;Y..
   b6890:	5945 000b 5951 000b 595d 000b 5965 000b     EY..QY..]Y..eY..
   b68a0:	596d 000b 5979 000b 5981 000b 598b 000b     mY..yY...Y...Y..
   b68b0:	5995 000b                                   .Y..

000b68b4 <_ZSt7nothrow>:
   b68b4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b68c4:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b68d4:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b68e4:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b68f4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6904:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6914:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6924:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6934:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6944:	646e 632e                                    nd.c.

000b6949 <link_const_variable_data_end>:
   b6949:	00          	.byte	0x00
	...

000b694c <link_constructors_location>:
   b694c:	000b4311 	.word	0x000b4311
   b6950:	000b4471 	.word	0x000b4471
   b6954:	000b4955 	.word	0x000b4955
   b6958:	000b497d 	.word	0x000b497d
   b695c:	000b4c11 	.word	0x000b4c11
   b6960:	000b4e85 	.word	0x000b4e85
   b6964:	000b4e95 	.word	0x000b4e95
   b6968:	000b4eb1 	.word	0x000b4eb1
   b696c:	000b577d 	.word	0x000b577d
   b6970:	000b5a6d 	.word	0x000b5a6d

000b6974 <link_constructors_end>:
	...
