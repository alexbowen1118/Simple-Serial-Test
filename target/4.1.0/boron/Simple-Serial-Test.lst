
/Users/chipmc/Documents/Maker/Particle/Utilities/Simple-Serial-Test/target/4.1.0/boron/Simple-Serial-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003060  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7080  000b7080  00007080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b70a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e5b8  000b70a8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c8  2003e628  2003e628  0002e628  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7118  000b7118  00027118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7140  000b7140  00027140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013013a  00000000  00000000  00027144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013f2d  00000000  00000000  0015727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003a95f  00000000  00000000  0016b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002be8  00000000  00000000  001a5b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a598  00000000  00000000  001a86f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e4a  00000000  00000000  001b2c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ff7b  00000000  00000000  001ebad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136133  00000000  00000000  0022ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007d8c  00000000  00000000  00361b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fc6b 	bl	b690c <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fc73 	bl	b6928 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5b8 	.word	0x2003e5b8
   b404c:	000b70a8 	.word	0x000b70a8
   b4050:	2003e628 	.word	0x2003e628
   b4054:	2003e628 	.word	0x2003e628
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f001 ff0b 	bl	b5e7c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7054 	.word	0x000b7054
   b4080:	000b707c 	.word	0x000b707c

000b4084 <module_user_setup>:
   b4084:	f000 b89c 	b.w	b41c0 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f000 f90f 	bl	b42ac <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f001 beab 	b.w	b5dec <_post_loop>

000b4096 <_Znwj>:
   b4096:	f000 bd89 	b.w	b4bac <malloc>

000b409a <_Znaj>:
   b409a:	f000 bd87 	b.w	b4bac <malloc>

000b409e <_ZdlPvj>:
   b409e:	f000 bd8d 	b.w	b4bbc <free>

000b40a2 <__cxa_guard_acquire>:
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_Z11getBaselinev>:
 */

SYSTEM_MODE(AUTOMATIC);
SYSTEM_THREAD(ENABLED);

float getBaseline(){
   b40b2:	b508      	push	{r3, lr}
  return MagModel::instance().getBaseline();
   b40b4:	f000 f9ac 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b40b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().getBaseline();
   b40bc:	f000 ba70 	b.w	b45a0 <_ZN8MagModel11getBaselineEv>

000b40c0 <_Z19recalibrateBaselinev>:

float recalibrateBaseline(){
   b40c0:	b508      	push	{r3, lr}
  return MagModel::instance().recalibrateBaseline();
   b40c2:	f000 f9a5 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().recalibrateBaseline();
   b40ca:	f000 ba77 	b.w	b45bc <_ZN8MagModel19recalibrateBaselineEv>

000b40ce <_Z12getThresholdv>:

int getThreshold(){
   b40ce:	b508      	push	{r3, lr}
  return MagModel::instance().getThreshold();
   b40d0:	f000 f99e 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b40d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().getThreshold();
   b40d8:	f000 ba82 	b.w	b45e0 <_ZN8MagModel12getThresholdEv>

000b40dc <_Z12setThreshold6String>:

int setThreshold(String threshold){
   b40dc:	b538      	push	{r3, r4, r5, lr}
   b40de:	4605      	mov	r5, r0
  return MagModel::instance().setThreshold(threshold.toInt()); // returns -1 if > MAX_THRESHOLD
   b40e0:	f000 f996 	bl	b4410 <_ZN8MagModel8instanceEv>
   b40e4:	4604      	mov	r4, r0
   b40e6:	4628      	mov	r0, r5
   b40e8:	f001 fcee 	bl	b5ac8 <_ZNK6String5toIntEv>
   b40ec:	4601      	mov	r1, r0
   b40ee:	4620      	mov	r0, r4
}
   b40f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return MagModel::instance().setThreshold(threshold.toInt()); // returns -1 if > MAX_THRESHOLD
   b40f4:	f000 bae4 	b.w	b46c0 <_ZN8MagModel12setThresholdEi>

000b40f8 <_Z17getResetThresholdv>:

int getResetThreshold(){
   b40f8:	b508      	push	{r3, lr}
  return MagModel::instance().getResetThreshold();
   b40fa:	f000 f989 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().getResetThreshold();
   b4102:	f000 ba73 	b.w	b45ec <_ZN8MagModel17getResetThresholdEv>

000b4106 <_Z17setResetThreshold6String>:

int setResetThreshold(String reset_threshold){
   b4106:	b538      	push	{r3, r4, r5, lr}
   b4108:	4605      	mov	r5, r0
  return MagModel::instance().setResetThreshold(reset_threshold.toInt()); ;// returns -1 if > MAX_RESET_THRESHOLD
   b410a:	f000 f981 	bl	b4410 <_ZN8MagModel8instanceEv>
   b410e:	4604      	mov	r4, r0
   b4110:	4628      	mov	r0, r5
   b4112:	f001 fcd9 	bl	b5ac8 <_ZNK6String5toIntEv>
   b4116:	4601      	mov	r1, r0
   b4118:	4620      	mov	r0, r4
}
   b411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return MagModel::instance().setResetThreshold(reset_threshold.toInt()); ;// returns -1 if > MAX_RESET_THRESHOLD
   b411e:	f000 bafd 	b.w	b471c <_ZN8MagModel17setResetThresholdEi>

000b4122 <_Z16getCountAndResetv>:

int getCountAndReset(){
   b4122:	b508      	push	{r3, lr}
  return MagModel::instance().getCountAndReset();
   b4124:	f000 f974 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b4128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().getCountAndReset();
   b412c:	f000 bb3e 	b.w	b47ac <_ZN8MagModel16getCountAndResetEv>

000b4130 <_Z20getTotalVehicleCountv>:

int getTotalVehicleCount(){
   b4130:	b508      	push	{r3, lr}
  return MagModel::instance().getTotalVehicleCount();
   b4132:	f000 f96d 	bl	b4410 <_ZN8MagModel8instanceEv>
}
   b4136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return MagModel::instance().getTotalVehicleCount();
   b413a:	f000 bb1d 	b.w	b4778 <_ZN8MagModel20getTotalVehicleCountEv>
	...

000b4140 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0>:
        return 0;
    }

    // Registers a function as a variable
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
   b4140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
   b4142:	2300      	movs	r3, #0
   b4144:	e9cd 3301 	strd	r3, r3, [sp, #4]
        extra.size = sizeof(extra);
   b4148:	230c      	movs	r3, #12
   b414a:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.copy = [](const void* var, void** data, size_t* size) {
   b414e:	4b04      	ldr	r3, [pc, #16]	; (b4160 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0+0x20>)
   b4150:	9303      	str	r3, [sp, #12]
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b4152:	2202      	movs	r2, #2
   b4154:	ab01      	add	r3, sp, #4
   b4156:	f000 fca1 	bl	b4a9c <spark_variable>
    }
   b415a:	b005      	add	sp, #20
   b415c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4160:	000b4165 	.word	0x000b4165

000b4164 <_ZZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_>:
        extra.copy = [](const void* var, void** data, size_t* size) {
   b4164:	b570      	push	{r4, r5, r6, lr}
   b4166:	460d      	mov	r5, r1
   b4168:	4616      	mov	r6, r2
            const typename VariableType::ValueType val = fn();
   b416a:	4780      	blx	r0
   b416c:	4604      	mov	r4, r0
        size = sizeof(T);
   b416e:	2004      	movs	r0, #4
   b4170:	6030      	str	r0, [r6, #0]
        data = malloc(sizeof(T));
   b4172:	f000 fd1b 	bl	b4bac <malloc>
   b4176:	6028      	str	r0, [r5, #0]
        if (!data) {
   b4178:	b110      	cbz	r0, b4180 <_ZZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x1c>
        memcpy(data, &val, sizeof(T));
   b417a:	6004      	str	r4, [r0, #0]
        return 0;
   b417c:	2000      	movs	r0, #0
        extra.copy = [](const void* var, void** data, size_t* size) {
   b417e:	bd70      	pop	{r4, r5, r6, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b4180:	4800      	ldr	r0, [pc, #0]	; (b4184 <_ZZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x20>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b4182:	e7fc      	b.n	b417e <_ZZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x1a>
   b4184:	fffffefc 	.word	0xfffffefc

000b4188 <_ZZN10CloudClass20register_variable_fnIFfvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_>:
   b4188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b418a:	4615      	mov	r5, r2
   b418c:	460c      	mov	r4, r1
            const typename VariableType::ValueType val = fn();
   b418e:	4780      	blx	r0
   b4190:	ee10 0a10 	vmov	r0, s0
   b4194:	f002 f8f6 	bl	b6384 <__aeabi_f2d>
   b4198:	e9cd 0100 	strd	r0, r1, [sp]
        size = sizeof(T);
   b419c:	2008      	movs	r0, #8
   b419e:	6028      	str	r0, [r5, #0]
        data = malloc(sizeof(T));
   b41a0:	f000 fd04 	bl	b4bac <malloc>
   b41a4:	4603      	mov	r3, r0
   b41a6:	6020      	str	r0, [r4, #0]
        if (!data) {
   b41a8:	b130      	cbz	r0, b41b8 <_ZZN10CloudClass20register_variable_fnIFfvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x30>
        memcpy(data, &val, sizeof(T));
   b41aa:	466a      	mov	r2, sp
   b41ac:	ca03      	ldmia	r2!, {r0, r1}
   b41ae:	6018      	str	r0, [r3, #0]
   b41b0:	6059      	str	r1, [r3, #4]
        return 0;
   b41b2:	2000      	movs	r0, #0
        extra.copy = [](const void* var, void** data, size_t* size) {
   b41b4:	b003      	add	sp, #12
   b41b6:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   b41b8:	4800      	ldr	r0, [pc, #0]	; (b41bc <_ZZN10CloudClass20register_variable_fnIFfvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x34>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b41ba:	e7fb      	b.n	b41b4 <_ZZN10CloudClass20register_variable_fnIFfvELDnEEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES8_SA_SB_+0x2c>
   b41bc:	fffffefc 	.word	0xfffffefc

000b41c0 <setup>:

void setup() {  
   b41c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  // Initiate the MagModel.
  MagModel::instance().setup();
   b41c2:	f000 f925 	bl	b4410 <_ZN8MagModel8instanceEv>
   b41c6:	f000 fa17 	bl	b45f8 <_ZN8MagModel5setupEv>
   b41ca:	4d1b      	ldr	r5, [pc, #108]	; (b4238 <setup+0x78>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b41cc:	491b      	ldr	r1, [pc, #108]	; (b423c <setup+0x7c>)
   b41ce:	481c      	ldr	r0, [pc, #112]	; (b4240 <setup+0x80>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   b41d0:	9503      	str	r5, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b41d2:	ab01      	add	r3, sp, #4
   b41d4:	2209      	movs	r2, #9
        spark_variable_t extra = {};
   b41d6:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   b41d8:	260c      	movs	r6, #12
        spark_variable_t extra = {};
   b41da:	e9cd 4401 	strd	r4, r4, [sp, #4]
        extra.size = sizeof(extra);
   b41de:	f8ad 6004 	strh.w	r6, [sp, #4]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b41e2:	f000 fc5b 	bl	b4a9c <spark_variable>
        return register_variable_fn(varKey, std::forward<T>(fn));
   b41e6:	4917      	ldr	r1, [pc, #92]	; (b4244 <setup+0x84>)
   b41e8:	4817      	ldr	r0, [pc, #92]	; (b4248 <setup+0x88>)
   b41ea:	f7ff ffa9 	bl	b4140 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0>
   b41ee:	4917      	ldr	r1, [pc, #92]	; (b424c <setup+0x8c>)
   b41f0:	4817      	ldr	r0, [pc, #92]	; (b4250 <setup+0x90>)
   b41f2:	f7ff ffa5 	bl	b4140 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0>
   b41f6:	4917      	ldr	r1, [pc, #92]	; (b4254 <setup+0x94>)
   b41f8:	4817      	ldr	r0, [pc, #92]	; (b4258 <setup+0x98>)
   b41fa:	f7ff ffa1 	bl	b4140 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0>
   b41fe:	4917      	ldr	r1, [pc, #92]	; (b425c <setup+0x9c>)
   b4200:	4817      	ldr	r0, [pc, #92]	; (b4260 <setup+0xa0>)
   b4202:	f7ff ff9d 	bl	b4140 <_ZN10CloudClass20register_variable_fnIFivELDnEEEbPKcRKT_.isra.0>
        spark_variable_t extra = {};
   b4206:	e9cd 4401 	strd	r4, r4, [sp, #4]
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b420a:	4c16      	ldr	r4, [pc, #88]	; (b4264 <setup+0xa4>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b420c:	4916      	ldr	r1, [pc, #88]	; (b4268 <setup+0xa8>)
   b420e:	4817      	ldr	r0, [pc, #92]	; (b426c <setup+0xac>)
        extra.size = sizeof(extra);
   b4210:	f8ad 6004 	strh.w	r6, [sp, #4]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b4214:	ab01      	add	r3, sp, #4
   b4216:	2209      	movs	r2, #9
        extra.copy = [](const void* var, void** data, size_t* size) {
   b4218:	9503      	str	r5, [sp, #12]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   b421a:	f000 fc3f 	bl	b4a9c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b421e:	4a14      	ldr	r2, [pc, #80]	; (b4270 <setup+0xb0>)
   b4220:	4914      	ldr	r1, [pc, #80]	; (b4274 <setup+0xb4>)
   b4222:	4620      	mov	r0, r4
   b4224:	f000 fdeb 	bl	b4dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4228:	4a13      	ldr	r2, [pc, #76]	; (b4278 <setup+0xb8>)
   b422a:	4914      	ldr	r1, [pc, #80]	; (b427c <setup+0xbc>)
   b422c:	4620      	mov	r0, r4
  Particle.variable("Recalibrate Baseline", recalibrateBaseline);

  // Declare Particle functions.
  Particle.function("Set the Threshold", setThreshold);
  Particle.function("Set the Reset Threshold", setResetThreshold);
}
   b422e:	b004      	add	sp, #16
   b4230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4234:	f000 bde3 	b.w	b4dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4238:	000b4189 	.word	0x000b4189
   b423c:	000b40b3 	.word	0x000b40b3
   b4240:	000b6c0e 	.word	0x000b6c0e
   b4244:	000b40cf 	.word	0x000b40cf
   b4248:	000b6c1f 	.word	0x000b6c1f
   b424c:	000b40f9 	.word	0x000b40f9
   b4250:	000b6c31 	.word	0x000b6c31
   b4254:	000b4123 	.word	0x000b4123
   b4258:	000b6be8 	.word	0x000b6be8
   b425c:	000b4131 	.word	0x000b4131
   b4260:	000b6bf3 	.word	0x000b6bf3
   b4264:	000b4dd3 	.word	0x000b4dd3
   b4268:	000b40c1 	.word	0x000b40c1
   b426c:	000b6c02 	.word	0x000b6c02
   b4270:	000b6c17 	.word	0x000b6c17
   b4274:	000b40dd 	.word	0x000b40dd
   b4278:	000b6c29 	.word	0x000b6c29
   b427c:	000b4107 	.word	0x000b4107

000b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4280:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4282:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4284:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4286:	b17c      	cbz	r4, b42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4288:	6863      	ldr	r3, [r4, #4]
   b428a:	3b01      	subs	r3, #1
   b428c:	6063      	str	r3, [r4, #4]
   b428e:	b95b      	cbnz	r3, b42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4290:	6823      	ldr	r3, [r4, #0]
   b4292:	4620      	mov	r0, r4
   b4294:	689b      	ldr	r3, [r3, #8]
   b4296:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4298:	68a3      	ldr	r3, [r4, #8]
   b429a:	3b01      	subs	r3, #1
   b429c:	60a3      	str	r3, [r4, #8]
   b429e:	b91b      	cbnz	r3, b42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b42a0:	6823      	ldr	r3, [r4, #0]
   b42a2:	4620      	mov	r0, r4
   b42a4:	68db      	ldr	r3, [r3, #12]
   b42a6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b42a8:	4628      	mov	r0, r5
   b42aa:	bd38      	pop	{r3, r4, r5, pc}

000b42ac <loop>:

void loop() {
   b42ac:	b530      	push	{r4, r5, lr}
   b42ae:	b08f      	sub	sp, #60	; 0x3c

  // Ask the magnetometer for passData.
  float* passData = MagModel::instance().getPassData();
   b42b0:	f000 f8ae 	bl	b4410 <_ZN8MagModel8instanceEv>
   b42b4:	f000 f968 	bl	b4588 <_ZN8MagModel11getPassDataEv>
   b42b8:	4604      	mov	r4, r0

  // Loop MagModel for next iteration.
  MagModel::instance().loop();
   b42ba:	f000 f8a9 	bl	b4410 <_ZN8MagModel8instanceEv>
   b42be:	f000 f8b9 	bl	b4434 <_ZN8MagModel4loopEv>

  // If passData came in, publish events.
  if(passData != 0) {
   b42c2:	2c00      	cmp	r4, #0
   b42c4:	d05d      	beq.n	b4382 <loop+0xd6>

    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        passData[3],
                        passData[0],
                        passData[1],
                        passData[2] ));
   b42c6:	68e0      	ldr	r0, [r4, #12]
   b42c8:	4d2f      	ldr	r5, [pc, #188]	; (b4388 <loop+0xdc>)
   b42ca:	f002 f85b 	bl	b6384 <__aeabi_f2d>
   b42ce:	4602      	mov	r2, r0
   b42d0:	460b      	mov	r3, r1
   b42d2:	68a0      	ldr	r0, [r4, #8]
   b42d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b42d8:	f002 f854 	bl	b6384 <__aeabi_f2d>
   b42dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b42e0:	6860      	ldr	r0, [r4, #4]
   b42e2:	f002 f84f 	bl	b6384 <__aeabi_f2d>
   b42e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b42ea:	6820      	ldr	r0, [r4, #0]
   b42ec:	f002 f84a 	bl	b6384 <__aeabi_f2d>
   b42f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b42f4:	e9cd 0100 	strd	r0, r1, [sp]
   b42f8:	a80a      	add	r0, sp, #40	; 0x28
   b42fa:	4924      	ldr	r1, [pc, #144]	; (b438c <loop+0xe0>)
   b42fc:	f001 fbea 	bl	b5ad4 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4300:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4304:	4922      	ldr	r1, [pc, #136]	; (b4390 <loop+0xe4>)
   b4306:	f88d 3000 	strb.w	r3, [sp]
   b430a:	a808      	add	r0, sp, #32
   b430c:	233c      	movs	r3, #60	; 0x3c
   b430e:	f000 fe6d 	bl	b4fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4312:	a809      	add	r0, sp, #36	; 0x24
   b4314:	f7ff ffb4 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Detecting Vehicle!", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b4318:	a80a      	add	r0, sp, #40	; 0x28
   b431a:	f001 fb13 	bl	b5944 <_ZN6StringD1Ev>

    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
                        passData[7],
                        passData[4],
                        passData[5],
                        passData[6]));
   b431e:	69e0      	ldr	r0, [r4, #28]
   b4320:	f002 f830 	bl	b6384 <__aeabi_f2d>
   b4324:	4602      	mov	r2, r0
   b4326:	460b      	mov	r3, r1
   b4328:	69a0      	ldr	r0, [r4, #24]
   b432a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b432e:	f002 f829 	bl	b6384 <__aeabi_f2d>
   b4332:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4336:	6960      	ldr	r0, [r4, #20]
   b4338:	f002 f824 	bl	b6384 <__aeabi_f2d>
   b433c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4340:	6920      	ldr	r0, [r4, #16]
   b4342:	f002 f81f 	bl	b6384 <__aeabi_f2d>
   b4346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b434a:	e9cd 0100 	strd	r0, r1, [sp]
   b434e:	a80a      	add	r0, sp, #40	; 0x28
   b4350:	490e      	ldr	r1, [pc, #56]	; (b438c <loop+0xe0>)
   b4352:	f001 fbbf 	bl	b5ad4 <_ZN6String6formatEPKcz>
   b4356:	782b      	ldrb	r3, [r5, #0]
   b4358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b435a:	490e      	ldr	r1, [pc, #56]	; (b4394 <loop+0xe8>)
   b435c:	f88d 3000 	strb.w	r3, [sp]
   b4360:	a808      	add	r0, sp, #32
   b4362:	233c      	movs	r3, #60	; 0x3c
   b4364:	f000 fe42 	bl	b4fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4368:	a809      	add	r0, sp, #36	; 0x24
   b436a:	f7ff ff89 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Released.", String::format("[mag_RMS: %f, mag_x: %f, mag_y: %f, mag_z: %f]", 
   b436e:	a80a      	add	r0, sp, #40	; 0x28
   b4370:	f001 fae8 	bl	b5944 <_ZN6StringD1Ev>
    
    MagModel::instance().getTotalVehicleCount();           
   b4374:	f000 f84c 	bl	b4410 <_ZN8MagModel8instanceEv>
  }
   b4378:	b00f      	add	sp, #60	; 0x3c
   b437a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    MagModel::instance().getTotalVehicleCount();           
   b437e:	f000 b9fb 	b.w	b4778 <_ZN8MagModel20getTotalVehicleCountEv>
   b4382:	b00f      	add	sp, #60	; 0x3c
   b4384:	bd30      	pop	{r4, r5, pc}
   b4386:	bf00      	nop
   b4388:	2003e634 	.word	0x2003e634
   b438c:	000b6c41 	.word	0x000b6c41
   b4390:	000b6c70 	.word	0x000b6c70
   b4394:	000b6c83 	.word	0x000b6c83

000b4398 <_GLOBAL__sub_I_SystemMode>:
   b4398:	b510      	push	{r4, lr}
        val_(val) {
   b439a:	4b08      	ldr	r3, [pc, #32]	; (b43bc <_GLOBAL__sub_I_SystemMode+0x24>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b439c:	4a08      	ldr	r2, [pc, #32]	; (b43c0 <_GLOBAL__sub_I_SystemMode+0x28>)
   b439e:	2400      	movs	r4, #0
   b43a0:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b43a2:	4b08      	ldr	r3, [pc, #32]	; (b43c4 <_GLOBAL__sub_I_SystemMode+0x2c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b43a4:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
   b43a6:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b43aa:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b43ac:	f000 fb3a 	bl	b4a24 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b43b0:	4621      	mov	r1, r4
   b43b2:	2001      	movs	r0, #1
   b43b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b43b8:	f000 bb44 	b.w	b4a44 <system_thread_set_state>
   b43bc:	2003e634 	.word	0x2003e634
   b43c0:	ffff0000 	.word	0xffff0000
   b43c4:	2003e628 	.word	0x2003e628

000b43c8 <_ZN8MagModelD1Ev>:

MagModel::MagModel() {
}

MagModel::~MagModel() {
}
   b43c8:	4770      	bx	lr

000b43ca <_ZN8MagModelD0Ev>:
MagModel::~MagModel() {
   b43ca:	b510      	push	{r4, lr}
}
   b43cc:	2104      	movs	r1, #4
MagModel::~MagModel() {
   b43ce:	4604      	mov	r4, r0
}
   b43d0:	f7ff fe65 	bl	b409e <_ZdlPvj>
   b43d4:	4620      	mov	r0, r4
   b43d6:	bd10      	pop	{r4, pc}

000b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b43d8:	b513      	push	{r0, r1, r4, lr}
   b43da:	4b05      	ldr	r3, [pc, #20]	; (b43f0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b43dc:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43de:	f88d 3000 	strb.w	r3, [sp]
   b43e2:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b43e4:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43e6:	f000 fe01 	bl	b4fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b43ea:	4620      	mov	r0, r4
   b43ec:	b002      	add	sp, #8
   b43ee:	bd10      	pop	{r4, pc}
   b43f0:	2003e65c 	.word	0x2003e65c

000b43f4 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f4:	b40e      	push	{r1, r2, r3}
   b43f6:	b503      	push	{r0, r1, lr}
   b43f8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43fa:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43fc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4400:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4402:	f001 f978 	bl	b56f6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4406:	b002      	add	sp, #8
   b4408:	f85d eb04 	ldr.w	lr, [sp], #4
   b440c:	b003      	add	sp, #12
   b440e:	4770      	bx	lr

000b4410 <_ZN8MagModel8instanceEv>:
MagModel &MagModel::instance() {
   b4410:	b510      	push	{r4, lr}
  if (!_instance) {
   b4412:	4c06      	ldr	r4, [pc, #24]	; (b442c <_ZN8MagModel8instanceEv+0x1c>)
   b4414:	6823      	ldr	r3, [r4, #0]
   b4416:	b933      	cbnz	r3, b4426 <_ZN8MagModel8instanceEv+0x16>
      _instance = new MagModel();
   b4418:	2004      	movs	r0, #4
   b441a:	f7ff fe3c 	bl	b4096 <_Znwj>
   b441e:	b108      	cbz	r0, b4424 <_ZN8MagModel8instanceEv+0x14>
MagModel::MagModel() {
   b4420:	4b03      	ldr	r3, [pc, #12]	; (b4430 <_ZN8MagModel8instanceEv+0x20>)
   b4422:	6003      	str	r3, [r0, #0]
      _instance = new MagModel();
   b4424:	6020      	str	r0, [r4, #0]
}
   b4426:	6820      	ldr	r0, [r4, #0]
   b4428:	bd10      	pop	{r4, pc}
   b442a:	bf00      	nop
   b442c:	2003e68c 	.word	0x2003e68c
   b4430:	000b6d4c 	.word	0x000b6d4c

000b4434 <_ZN8MagModel4loopEv>:
 * Serial data format coming from magnetometer:
 * 
 * threshold(int),reset_threshold(int),baseline(float),mag_x(float),
 * mag_y(float),mag_z(float),mag_RMS(float),vehicle_sensed(int)/n
 */
void MagModel::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b4434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    if(ready == 0) {
   b4438:	4e45      	ldr	r6, [pc, #276]	; (b4550 <_ZN8MagModel4loopEv+0x11c>)
   b443a:	6835      	ldr	r5, [r6, #0]
void MagModel::loop(){       // Returns 1 if a vehicle has been fully sensed.
   b443c:	b085      	sub	sp, #20
    if(ready == 0) {
   b443e:	2d00      	cmp	r5, #0
   b4440:	d15a      	bne.n	b44f8 <_ZN8MagModel4loopEv+0xc4>

        Serial1.readStringUntil('\n'); //wait for clean line        
   b4442:	f001 fe11 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b4446:	220a      	movs	r2, #10
   b4448:	4601      	mov	r1, r0
   b444a:	4668      	mov	r0, sp
   b444c:	f001 fa62 	bl	b5914 <_ZN6Stream15readStringUntilEc>
   b4450:	4668      	mov	r0, sp
   b4452:	f001 fa77 	bl	b5944 <_ZN6StringD1Ev>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b4456:	f001 fe07 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b445a:	f001 f9f6 	bl	b584a <_ZN6Stream8parseIntEv>
   b445e:	f8df a118 	ldr.w	sl, [pc, #280]	; b4578 <_ZN8MagModel4loopEv+0x144>
        threshold = Serial1.parseInt(); //parse threshold
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
        baseline = Serial1.parseFloat(); //parse baseline
        mag_x = Serial1.parseFloat(); //store mag_x
   b4462:	f8df 9118 	ldr.w	r9, [pc, #280]	; b457c <_ZN8MagModel4loopEv+0x148>
        vehicle_sensed = Serial1.parseInt(); //used to check if vehicle_sensed
   b4466:	f8ca 0000 	str.w	r0, [sl]
        threshold = Serial1.parseInt(); //parse threshold
   b446a:	f001 fdfd 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b446e:	f001 f9ec 	bl	b584a <_ZN6Stream8parseIntEv>
   b4472:	4b38      	ldr	r3, [pc, #224]	; (b4554 <_ZN8MagModel4loopEv+0x120>)
        mag_y = Serial1.parseFloat(); //store mag_y
   b4474:	f8df 8108 	ldr.w	r8, [pc, #264]	; b4580 <_ZN8MagModel4loopEv+0x14c>
        threshold = Serial1.parseInt(); //parse threshold
   b4478:	6018      	str	r0, [r3, #0]
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
   b447a:	f001 fdf5 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b447e:	f001 f9e4 	bl	b584a <_ZN6Stream8parseIntEv>
   b4482:	4b35      	ldr	r3, [pc, #212]	; (b4558 <_ZN8MagModel4loopEv+0x124>)
        mag_z = Serial1.parseFloat(); //store mag_z
   b4484:	4f35      	ldr	r7, [pc, #212]	; (b455c <_ZN8MagModel4loopEv+0x128>)
        reset_threshold = Serial1.parseInt(); //parse reset_threshold
   b4486:	6018      	str	r0, [r3, #0]
        baseline = Serial1.parseFloat(); //parse baseline
   b4488:	f001 fdee 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b448c:	f001 fa3e 	bl	b590c <_ZN6Stream10parseFloatEv>
   b4490:	4b33      	ldr	r3, [pc, #204]	; (b4560 <_ZN8MagModel4loopEv+0x12c>)
        mag_RMS = Serial1.parseFloat(); //store mag_RMS

        // Simple FSM for vehicle_sensed state
        switch(state){
   b4492:	4c34      	ldr	r4, [pc, #208]	; (b4564 <_ZN8MagModel4loopEv+0x130>)
        baseline = Serial1.parseFloat(); //parse baseline
   b4494:	ed83 0a00 	vstr	s0, [r3]
        mag_x = Serial1.parseFloat(); //store mag_x
   b4498:	f001 fde6 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b449c:	f001 fa36 	bl	b590c <_ZN6Stream10parseFloatEv>
   b44a0:	ed89 0a00 	vstr	s0, [r9]
        mag_y = Serial1.parseFloat(); //store mag_y
   b44a4:	f001 fde0 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b44a8:	f001 fa30 	bl	b590c <_ZN6Stream10parseFloatEv>
   b44ac:	ed88 0a00 	vstr	s0, [r8]
        mag_z = Serial1.parseFloat(); //store mag_z
   b44b0:	f001 fdda 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b44b4:	f001 fa2a 	bl	b590c <_ZN6Stream10parseFloatEv>
   b44b8:	ed87 0a00 	vstr	s0, [r7]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b44bc:	f001 fdd4 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b44c0:	f001 fa24 	bl	b590c <_ZN6Stream10parseFloatEv>
        switch(state){
   b44c4:	6821      	ldr	r1, [r4, #0]
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b44c6:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b4584 <_ZN8MagModel4loopEv+0x150>
        switch(state){
   b44ca:	2901      	cmp	r1, #1
        mag_RMS = Serial1.parseFloat(); //store mag_RMS
   b44cc:	ed8b 0a00 	vstr	s0, [fp]
        switch(state){
   b44d0:	d015      	beq.n	b44fe <_ZN8MagModel4loopEv+0xca>
   b44d2:	2902      	cmp	r1, #2
   b44d4:	d02a      	beq.n	b452c <_ZN8MagModel4loopEv+0xf8>
   b44d6:	b979      	cbnz	r1, b44f8 <_ZN8MagModel4loopEv+0xc4>

            // WAITING
            case 0: 

                if(vehicle_sensed == 1){ //capture trigger values
   b44d8:	f8da 2000 	ldr.w	r2, [sl]
   b44dc:	2a01      	cmp	r2, #1
   b44de:	d10b      	bne.n	b44f8 <_ZN8MagModel4loopEv+0xc4>

                    passData[0] = mag_x;
   b44e0:	4b21      	ldr	r3, [pc, #132]	; (b4568 <_ZN8MagModel4loopEv+0x134>)
   b44e2:	f8d9 1000 	ldr.w	r1, [r9]
   b44e6:	6019      	str	r1, [r3, #0]
                    passData[1] = mag_y;
   b44e8:	f8d8 1000 	ldr.w	r1, [r8]
   b44ec:	6059      	str	r1, [r3, #4]
                    passData[2] = mag_z;
   b44ee:	6839      	ldr	r1, [r7, #0]
   b44f0:	6099      	str	r1, [r3, #8]
                    passData[3] = mag_RMS;
   b44f2:	ed83 0a03 	vstr	s0, [r3, #12]

                    state = 1;
   b44f6:	6022      	str	r2, [r4, #0]

            default:
                break;
        }
    }
}
   b44f8:	b005      	add	sp, #20
   b44fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                digitalWrite(Light, HIGH);
   b44fe:	4b1b      	ldr	r3, [pc, #108]	; (b456c <_ZN8MagModel4loopEv+0x138>)
   b4500:	8818      	ldrh	r0, [r3, #0]
   b4502:	f001 fd3c 	bl	b5f7e <digitalWrite>
                if(vehicle_sensed == 0){ //capture reset values
   b4506:	f8da 3000 	ldr.w	r3, [sl]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d1f4      	bne.n	b44f8 <_ZN8MagModel4loopEv+0xc4>
                    passData[4] = mag_x;
   b450e:	4b16      	ldr	r3, [pc, #88]	; (b4568 <_ZN8MagModel4loopEv+0x134>)
   b4510:	f8d9 2000 	ldr.w	r2, [r9]
   b4514:	611a      	str	r2, [r3, #16]
                    passData[5] = mag_y;
   b4516:	f8d8 2000 	ldr.w	r2, [r8]
   b451a:	615a      	str	r2, [r3, #20]
                    passData[6] = mag_z;
   b451c:	683a      	ldr	r2, [r7, #0]
   b451e:	619a      	str	r2, [r3, #24]
                    passData[7] = mag_RMS;
   b4520:	f8db 2000 	ldr.w	r2, [fp]
   b4524:	61da      	str	r2, [r3, #28]
                    state = 2;
   b4526:	2302      	movs	r3, #2
   b4528:	6023      	str	r3, [r4, #0]
   b452a:	e7e5      	b.n	b44f8 <_ZN8MagModel4loopEv+0xc4>
                digitalWrite(Light, LOW);
   b452c:	4b0f      	ldr	r3, [pc, #60]	; (b456c <_ZN8MagModel4loopEv+0x138>)
   b452e:	4629      	mov	r1, r5
   b4530:	8818      	ldrh	r0, [r3, #0]
   b4532:	f001 fd24 	bl	b5f7e <digitalWrite>
                ++vehicleCount;
   b4536:	4a0e      	ldr	r2, [pc, #56]	; (b4570 <_ZN8MagModel4loopEv+0x13c>)
                state = 0;
   b4538:	6025      	str	r5, [r4, #0]
                ++vehicleCount;
   b453a:	6813      	ldr	r3, [r2, #0]
   b453c:	3301      	adds	r3, #1
   b453e:	6013      	str	r3, [r2, #0]
                ++totalVehicleCount;
   b4540:	4a0c      	ldr	r2, [pc, #48]	; (b4574 <_ZN8MagModel4loopEv+0x140>)
   b4542:	6813      	ldr	r3, [r2, #0]
   b4544:	3301      	adds	r3, #1
   b4546:	6013      	str	r3, [r2, #0]
                ready = 1;
   b4548:	2301      	movs	r3, #1
   b454a:	6033      	str	r3, [r6, #0]
}
   b454c:	e7d4      	b.n	b44f8 <_ZN8MagModel4loopEv+0xc4>
   b454e:	bf00      	nop
   b4550:	2003e654 	.word	0x2003e654
   b4554:	2003e688 	.word	0x2003e688
   b4558:	2003e640 	.word	0x2003e640
   b455c:	2003e650 	.word	0x2003e650
   b4560:	2003e664 	.word	0x2003e664
   b4564:	2003e658 	.word	0x2003e658
   b4568:	2003e668 	.word	0x2003e668
   b456c:	2003e5b8 	.word	0x2003e5b8
   b4570:	2003e638 	.word	0x2003e638
   b4574:	2003e644 	.word	0x2003e644
   b4578:	2003e63c 	.word	0x2003e63c
   b457c:	2003e648 	.word	0x2003e648
   b4580:	2003e64c 	.word	0x2003e64c
   b4584:	2003e660 	.word	0x2003e660

000b4588 <_ZN8MagModel11getPassDataEv>:

float* MagModel::getPassData(){
    if(ready == 1){
   b4588:	4b03      	ldr	r3, [pc, #12]	; (b4598 <_ZN8MagModel11getPassDataEv+0x10>)
   b458a:	681a      	ldr	r2, [r3, #0]
   b458c:	2000      	movs	r0, #0
   b458e:	2a01      	cmp	r2, #1
        ready = 0;
   b4590:	bf04      	itt	eq
   b4592:	6018      	streq	r0, [r3, #0]
        return passData;
   b4594:	4801      	ldreq	r0, [pc, #4]	; (b459c <_ZN8MagModel11getPassDataEv+0x14>)
    }
    return {};
}
   b4596:	4770      	bx	lr
   b4598:	2003e654 	.word	0x2003e654
   b459c:	2003e668 	.word	0x2003e668

000b45a0 <_ZN8MagModel11getBaselineEv>:

float MagModel::getBaseline(){
    if(baseline != 0) {
   b45a0:	4b05      	ldr	r3, [pc, #20]	; (b45b8 <_ZN8MagModel11getBaselineEv+0x18>)
   b45a2:	ed93 0a00 	vldr	s0, [r3]
   b45a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b45aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return baseline;
    }
    return -1; // error
   b45ae:	bf08      	it	eq
   b45b0:	eebf 0a00 	vmoveq.f32	s0, #240	; 0xbf800000 -1.0
}
   b45b4:	4770      	bx	lr
   b45b6:	bf00      	nop
   b45b8:	2003e664 	.word	0x2003e664

000b45bc <_ZN8MagModel19recalibrateBaselineEv>:

float MagModel::recalibrateBaseline(){
   b45bc:	b510      	push	{r4, lr}
   b45be:	4604      	mov	r4, r0
    Serial1.println("CONF:BAS");
   b45c0:	f001 fd52 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b45c4:	4904      	ldr	r1, [pc, #16]	; (b45d8 <_ZN8MagModel19recalibrateBaselineEv+0x1c>)
   b45c6:	f001 f86e 	bl	b56a6 <_ZN5Print7printlnEPKc>
    loop(); // Update the values
   b45ca:	4620      	mov	r0, r4
   b45cc:	f7ff ff32 	bl	b4434 <_ZN8MagModel4loopEv>
    return baseline;
}
   b45d0:	4b02      	ldr	r3, [pc, #8]	; (b45dc <_ZN8MagModel19recalibrateBaselineEv+0x20>)
   b45d2:	ed93 0a00 	vldr	s0, [r3]
   b45d6:	bd10      	pop	{r4, pc}
   b45d8:	000b6c8d 	.word	0x000b6c8d
   b45dc:	2003e664 	.word	0x2003e664

000b45e0 <_ZN8MagModel12getThresholdEv>:

int MagModel::getThreshold(){
    return threshold;
}
   b45e0:	4b01      	ldr	r3, [pc, #4]	; (b45e8 <_ZN8MagModel12getThresholdEv+0x8>)
   b45e2:	6818      	ldr	r0, [r3, #0]
   b45e4:	4770      	bx	lr
   b45e6:	bf00      	nop
   b45e8:	2003e688 	.word	0x2003e688

000b45ec <_ZN8MagModel17getResetThresholdEv>:
    return -1; // invalid
}

int MagModel::getResetThreshold(){
    return reset_threshold;
}
   b45ec:	4b01      	ldr	r3, [pc, #4]	; (b45f4 <_ZN8MagModel17getResetThresholdEv+0x8>)
   b45ee:	6818      	ldr	r0, [r3, #0]
   b45f0:	4770      	bx	lr
   b45f2:	bf00      	nop
   b45f4:	2003e640 	.word	0x2003e640

000b45f8 <_ZN8MagModel5setupEv>:
void MagModel::setup(){
   b45f8:	b570      	push	{r4, r5, r6, lr}
    pinMode(Light, OUTPUT);
   b45fa:	4b2b      	ldr	r3, [pc, #172]	; (b46a8 <_ZN8MagModel5setupEv+0xb0>)
   b45fc:	2101      	movs	r1, #1
   b45fe:	8818      	ldrh	r0, [r3, #0]
void MagModel::setup(){
   b4600:	b088      	sub	sp, #32
    pinMode(Light, OUTPUT);
   b4602:	f001 fcab 	bl	b5f5c <pinMode>
    Serial1.begin(115200);
   b4606:	f001 fd2f 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b460a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b460e:	f001 fafb 	bl	b5c08 <_ZN11USARTSerial5beginEm>
    while (!Serial1.available()){
   b4612:	f001 fd29 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b4616:	6803      	ldr	r3, [r0, #0]
   b4618:	691b      	ldr	r3, [r3, #16]
   b461a:	4798      	blx	r3
   b461c:	b918      	cbnz	r0, b4626 <_ZN8MagModel5setupEv+0x2e>
        delay(10); // Wait until serial connection is established
   b461e:	200a      	movs	r0, #10
   b4620:	f000 fb0c 	bl	b4c3c <delay>
    while (!Serial1.available()){
   b4624:	e7f5      	b.n	b4612 <_ZN8MagModel5setupEv+0x1a>
    delay(1000);  // Make sure the serial monitor can connect
   b4626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b462a:	f000 fb07 	bl	b4c3c <delay>
    Serial1.readStringUntil('\n'); //wait for clean line
   b462e:	f001 fd1b 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b4632:	220a      	movs	r2, #10
   b4634:	4601      	mov	r1, r0
   b4636:	a804      	add	r0, sp, #16
   b4638:	f001 f96c 	bl	b5914 <_ZN6Stream15readStringUntilEc>
   b463c:	a804      	add	r0, sp, #16
   b463e:	f001 f981 	bl	b5944 <_ZN6StringD1Ev>
    Serial1.parseInt(); //parse over vehicle_sensed
   b4642:	f001 fd11 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b4646:	f001 f900 	bl	b584a <_ZN6Stream8parseIntEv>
    threshold = Serial1.parseInt();
   b464a:	f001 fd0d 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b464e:	f001 f8fc 	bl	b584a <_ZN6Stream8parseIntEv>
   b4652:	4c16      	ldr	r4, [pc, #88]	; (b46ac <_ZN8MagModel5setupEv+0xb4>)
    reset_threshold = Serial1.parseInt();
   b4654:	4d16      	ldr	r5, [pc, #88]	; (b46b0 <_ZN8MagModel5setupEv+0xb8>)
    threshold = Serial1.parseInt();
   b4656:	6020      	str	r0, [r4, #0]
    reset_threshold = Serial1.parseInt();
   b4658:	f001 fd06 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b465c:	f001 f8f5 	bl	b584a <_ZN6Stream8parseIntEv>
   b4660:	6028      	str	r0, [r5, #0]
    baseline = Serial1.parseFloat();
   b4662:	f001 fd01 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b4666:	f001 f951 	bl	b590c <_ZN6Stream10parseFloatEv>
   b466a:	4e12      	ldr	r6, [pc, #72]	; (b46b4 <_ZN8MagModel5setupEv+0xbc>)
    delay(2000);
   b466c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    baseline = Serial1.parseFloat();
   b4670:	ed86 0a00 	vstr	s0, [r6]
    delay(2000);
   b4674:	f000 fae2 	bl	b4c3c <delay>
    Particle.publish("Initialized", String::format("Threshold: %d, Reset Threshold: %d, Baseline %f", threshold, reset_threshold, baseline));
   b4678:	6830      	ldr	r0, [r6, #0]
   b467a:	f001 fe83 	bl	b6384 <__aeabi_f2d>
   b467e:	682b      	ldr	r3, [r5, #0]
   b4680:	6822      	ldr	r2, [r4, #0]
   b4682:	e9cd 0100 	strd	r0, r1, [sp]
   b4686:	a804      	add	r0, sp, #16
   b4688:	490b      	ldr	r1, [pc, #44]	; (b46b8 <_ZN8MagModel5setupEv+0xc0>)
   b468a:	f001 fa23 	bl	b5ad4 <_ZN6String6formatEPKcz>
   b468e:	9a04      	ldr	r2, [sp, #16]
   b4690:	490a      	ldr	r1, [pc, #40]	; (b46bc <_ZN8MagModel5setupEv+0xc4>)
   b4692:	a802      	add	r0, sp, #8
   b4694:	f7ff fea0 	bl	b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4698:	a803      	add	r0, sp, #12
   b469a:	f7ff fdf1 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b469e:	a804      	add	r0, sp, #16
   b46a0:	f001 f950 	bl	b5944 <_ZN6StringD1Ev>
}
   b46a4:	b008      	add	sp, #32
   b46a6:	bd70      	pop	{r4, r5, r6, pc}
   b46a8:	2003e5b8 	.word	0x2003e5b8
   b46ac:	2003e688 	.word	0x2003e688
   b46b0:	2003e640 	.word	0x2003e640
   b46b4:	2003e664 	.word	0x2003e664
   b46b8:	000b6c96 	.word	0x000b6c96
   b46bc:	000b6cc6 	.word	0x000b6cc6

000b46c0 <_ZN8MagModel12setThresholdEi>:
int MagModel::setThreshold(int thres){
   b46c0:	b530      	push	{r4, r5, lr}
    if(thres <= MAX_THRESHOLD) {
   b46c2:	2964      	cmp	r1, #100	; 0x64
int MagModel::setThreshold(int thres){
   b46c4:	b087      	sub	sp, #28
   b46c6:	4605      	mov	r5, r0
   b46c8:	460c      	mov	r4, r1
    if(thres <= MAX_THRESHOLD) {
   b46ca:	dc1d      	bgt.n	b4708 <_ZN8MagModel12setThresholdEi+0x48>
        Serial1.printlnf("CONF:THR %d", thres);
   b46cc:	f001 fccc 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b46d0:	4622      	mov	r2, r4
   b46d2:	490f      	ldr	r1, [pc, #60]	; (b4710 <_ZN8MagModel12setThresholdEi+0x50>)
   b46d4:	f7ff fe8e 	bl	b43f4 <_ZN5Print8printlnfEPKcz>
        loop(); // Update the values
   b46d8:	4628      	mov	r0, r5
   b46da:	f7ff feab 	bl	b4434 <_ZN8MagModel4loopEv>
    return threshold;
   b46de:	4b0d      	ldr	r3, [pc, #52]	; (b4714 <_ZN8MagModel12setThresholdEi+0x54>)
   b46e0:	681c      	ldr	r4, [r3, #0]
        Particle.publish("New Threshold Set", String(thres));
   b46e2:	220a      	movs	r2, #10
   b46e4:	4621      	mov	r1, r4
   b46e6:	a802      	add	r0, sp, #8
   b46e8:	f001 f9b7 	bl	b5a5a <_ZN6StringC1Eih>
   b46ec:	9a02      	ldr	r2, [sp, #8]
   b46ee:	490a      	ldr	r1, [pc, #40]	; (b4718 <_ZN8MagModel12setThresholdEi+0x58>)
   b46f0:	4668      	mov	r0, sp
   b46f2:	f7ff fe71 	bl	b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b46f6:	a801      	add	r0, sp, #4
   b46f8:	f7ff fdc2 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b46fc:	a802      	add	r0, sp, #8
   b46fe:	f001 f921 	bl	b5944 <_ZN6StringD1Ev>
}
   b4702:	4620      	mov	r0, r4
   b4704:	b007      	add	sp, #28
   b4706:	bd30      	pop	{r4, r5, pc}
    return -1; // invalid
   b4708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b470c:	e7f9      	b.n	b4702 <_ZN8MagModel12setThresholdEi+0x42>
   b470e:	bf00      	nop
   b4710:	000b6cd2 	.word	0x000b6cd2
   b4714:	2003e688 	.word	0x2003e688
   b4718:	000b6cde 	.word	0x000b6cde

000b471c <_ZN8MagModel17setResetThresholdEi>:

int MagModel::setResetThreshold(int reset_thres){
   b471c:	b530      	push	{r4, r5, lr}
    if(reset_thres <= MAX_RESET_THRESHOLD) {
   b471e:	2964      	cmp	r1, #100	; 0x64
int MagModel::setResetThreshold(int reset_thres){
   b4720:	b087      	sub	sp, #28
   b4722:	4605      	mov	r5, r0
   b4724:	460c      	mov	r4, r1
    if(reset_thres <= MAX_RESET_THRESHOLD) {
   b4726:	dc1d      	bgt.n	b4764 <_ZN8MagModel17setResetThresholdEi+0x48>
        Serial1.printlnf("CONF:RES %d", reset_thres);
   b4728:	f001 fc9e 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b472c:	4622      	mov	r2, r4
   b472e:	490f      	ldr	r1, [pc, #60]	; (b476c <_ZN8MagModel17setResetThresholdEi+0x50>)
   b4730:	f7ff fe60 	bl	b43f4 <_ZN5Print8printlnfEPKcz>
        loop(); // Update the values.
   b4734:	4628      	mov	r0, r5
   b4736:	f7ff fe7d 	bl	b4434 <_ZN8MagModel4loopEv>
    return reset_threshold;
   b473a:	4b0d      	ldr	r3, [pc, #52]	; (b4770 <_ZN8MagModel17setResetThresholdEi+0x54>)
   b473c:	681c      	ldr	r4, [r3, #0]
        reset_thres = getResetThreshold();
        Particle.publish("New Reset Threshold Set", String(reset_thres));
   b473e:	220a      	movs	r2, #10
   b4740:	4621      	mov	r1, r4
   b4742:	a802      	add	r0, sp, #8
   b4744:	f001 f989 	bl	b5a5a <_ZN6StringC1Eih>
   b4748:	9a02      	ldr	r2, [sp, #8]
   b474a:	490a      	ldr	r1, [pc, #40]	; (b4774 <_ZN8MagModel17setResetThresholdEi+0x58>)
   b474c:	4668      	mov	r0, sp
   b474e:	f7ff fe43 	bl	b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4752:	a801      	add	r0, sp, #4
   b4754:	f7ff fd94 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4758:	a802      	add	r0, sp, #8
   b475a:	f001 f8f3 	bl	b5944 <_ZN6StringD1Ev>
        return reset_thres;
    }
    return -1; // invalid
}
   b475e:	4620      	mov	r0, r4
   b4760:	b007      	add	sp, #28
   b4762:	bd30      	pop	{r4, r5, pc}
    return -1; // invalid
   b4764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b4768:	e7f9      	b.n	b475e <_ZN8MagModel17setResetThresholdEi+0x42>
   b476a:	bf00      	nop
   b476c:	000b6cf0 	.word	0x000b6cf0
   b4770:	2003e640 	.word	0x2003e640
   b4774:	000b6cfc 	.word	0x000b6cfc

000b4778 <_ZN8MagModel20getTotalVehicleCountEv>:
    Particle.publish("Count Retrieved", String(count));
    Particle.publish("Count Reset");
    return count;
}

int MagModel::getTotalVehicleCount(){ 
   b4778:	b510      	push	{r4, lr}
    Particle.publish("Total Vehicle Count", String(totalVehicleCount));
   b477a:	4c0a      	ldr	r4, [pc, #40]	; (b47a4 <_ZN8MagModel20getTotalVehicleCountEv+0x2c>)
int MagModel::getTotalVehicleCount(){ 
   b477c:	b086      	sub	sp, #24
    Particle.publish("Total Vehicle Count", String(totalVehicleCount));
   b477e:	6821      	ldr	r1, [r4, #0]
   b4780:	220a      	movs	r2, #10
   b4782:	a802      	add	r0, sp, #8
   b4784:	f001 f969 	bl	b5a5a <_ZN6StringC1Eih>
   b4788:	9a02      	ldr	r2, [sp, #8]
   b478a:	4907      	ldr	r1, [pc, #28]	; (b47a8 <_ZN8MagModel20getTotalVehicleCountEv+0x30>)
   b478c:	4668      	mov	r0, sp
   b478e:	f7ff fe23 	bl	b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4792:	a801      	add	r0, sp, #4
   b4794:	f7ff fd74 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4798:	a802      	add	r0, sp, #8
   b479a:	f001 f8d3 	bl	b5944 <_ZN6StringD1Ev>
    return totalVehicleCount;
   b479e:	6820      	ldr	r0, [r4, #0]
   b47a0:	b006      	add	sp, #24
   b47a2:	bd10      	pop	{r4, pc}
   b47a4:	2003e644 	.word	0x2003e644
   b47a8:	000b6d14 	.word	0x000b6d14

000b47ac <_ZN8MagModel16getCountAndResetEv>:
int MagModel::getCountAndReset(){ 
   b47ac:	b530      	push	{r4, r5, lr}
    int count = vehicleCount;
   b47ae:	4b12      	ldr	r3, [pc, #72]	; (b47f8 <_ZN8MagModel16getCountAndResetEv+0x4c>)
   b47b0:	681c      	ldr	r4, [r3, #0]
int MagModel::getCountAndReset(){ 
   b47b2:	b089      	sub	sp, #36	; 0x24
    vehicleCount = 0;
   b47b4:	2500      	movs	r5, #0
    Particle.publish("Count Retrieved", String(count));
   b47b6:	4621      	mov	r1, r4
   b47b8:	220a      	movs	r2, #10
   b47ba:	a804      	add	r0, sp, #16
    vehicleCount = 0;
   b47bc:	601d      	str	r5, [r3, #0]
    Particle.publish("Count Retrieved", String(count));
   b47be:	f001 f94c 	bl	b5a5a <_ZN6StringC1Eih>
   b47c2:	9a04      	ldr	r2, [sp, #16]
   b47c4:	490d      	ldr	r1, [pc, #52]	; (b47fc <_ZN8MagModel16getCountAndResetEv+0x50>)
   b47c6:	a802      	add	r0, sp, #8
   b47c8:	f7ff fe06 	bl	b43d8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b47cc:	a803      	add	r0, sp, #12
   b47ce:	f7ff fd57 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b47d2:	a804      	add	r0, sp, #16
   b47d4:	f001 f8b6 	bl	b5944 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47d8:	4b09      	ldr	r3, [pc, #36]	; (b4800 <_ZN8MagModel16getCountAndResetEv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b47da:	490a      	ldr	r1, [pc, #40]	; (b4804 <_ZN8MagModel16getCountAndResetEv+0x58>)
   b47dc:	781b      	ldrb	r3, [r3, #0]
   b47de:	f88d 3000 	strb.w	r3, [sp]
   b47e2:	462a      	mov	r2, r5
   b47e4:	233c      	movs	r3, #60	; 0x3c
   b47e6:	a804      	add	r0, sp, #16
   b47e8:	f000 fc00 	bl	b4fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b47ec:	a805      	add	r0, sp, #20
   b47ee:	f7ff fd47 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b47f2:	4620      	mov	r0, r4
   b47f4:	b009      	add	sp, #36	; 0x24
   b47f6:	bd30      	pop	{r4, r5, pc}
   b47f8:	2003e638 	.word	0x2003e638
   b47fc:	000b6d28 	.word	0x000b6d28
   b4800:	2003e65c 	.word	0x2003e65c
   b4804:	000b6d38 	.word	0x000b6d38

000b4808 <_GLOBAL__sub_I__ZN8MagModel9_instanceE>:
        val_(val) {
   b4808:	4b01      	ldr	r3, [pc, #4]	; (b4810 <_GLOBAL__sub_I__ZN8MagModel9_instanceE+0x8>)
   b480a:	2200      	movs	r2, #0
   b480c:	701a      	strb	r2, [r3, #0]
   b480e:	4770      	bx	lr
   b4810:	2003e65c 	.word	0x2003e65c

000b4814 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <os_mutex_recursive_create+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030248 	.word	0x00030248

000b4824 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <HAL_RNG_GetRandomNumber+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	685b      	ldr	r3, [r3, #4]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030218 	.word	0x00030218

000b4834 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	695b      	ldr	r3, [r3, #20]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030218 	.word	0x00030218

000b4844 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <HAL_Pin_Mode+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	689b      	ldr	r3, [r3, #8]
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	0003022c 	.word	0x0003022c

000b4854 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <HAL_Get_Pin_Mode+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	68db      	ldr	r3, [r3, #12]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	0003022c 	.word	0x0003022c

000b4864 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <HAL_GPIO_Write+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	691b      	ldr	r3, [r3, #16]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	0003022c 	.word	0x0003022c

000b4874 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <hal_i2c_write+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	6a1b      	ldr	r3, [r3, #32]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030228 	.word	0x00030228

000b4884 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <hal_i2c_available+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030228 	.word	0x00030228

000b4894 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <hal_i2c_read+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030228 	.word	0x00030228

000b48a4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <hal_i2c_peek+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030228 	.word	0x00030228

000b48b4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <hal_i2c_flush+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030228 	.word	0x00030228

000b48c4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <hal_i2c_is_enabled+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030228 	.word	0x00030228

000b48d4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <hal_i2c_init+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030228 	.word	0x00030228

000b48e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <inet_inet_ntop+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	695b      	ldr	r3, [r3, #20]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030264 	.word	0x00030264

000b48f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <netdb_freeaddrinfo+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	689b      	ldr	r3, [r3, #8]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030268 	.word	0x00030268

000b4904 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <netdb_getaddrinfo+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	68db      	ldr	r3, [r3, #12]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030268 	.word	0x00030268

000b4914 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <hal_spi_init+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	69db      	ldr	r3, [r3, #28]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030230 	.word	0x00030230

000b4924 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <hal_spi_is_enabled+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	6a1b      	ldr	r3, [r3, #32]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030230 	.word	0x00030230

000b4934 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <hal_usart_write+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	68db      	ldr	r3, [r3, #12]
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	0003023c 	.word	0x0003023c

000b4944 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <hal_usart_available+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	691b      	ldr	r3, [r3, #16]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	0003023c 	.word	0x0003023c

000b4954 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <hal_usart_read+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	695b      	ldr	r3, [r3, #20]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	0003023c 	.word	0x0003023c

000b4964 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <hal_usart_peek+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	699b      	ldr	r3, [r3, #24]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	0003023c 	.word	0x0003023c

000b4974 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <hal_usart_flush+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	69db      	ldr	r3, [r3, #28]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	0003023c 	.word	0x0003023c

000b4984 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <hal_usart_is_enabled+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	6a1b      	ldr	r3, [r3, #32]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	0003023c 	.word	0x0003023c

000b4994 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <hal_usart_available_data_for_write+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	0003023c 	.word	0x0003023c

000b49a4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <hal_usart_begin_config+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	0003023c 	.word	0x0003023c

000b49b4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <hal_usart_init_ex+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	0003023c 	.word	0x0003023c

000b49c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <HAL_USB_USART_Init+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	681b      	ldr	r3, [r3, #0]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	0003024c 	.word	0x0003024c

000b49d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <HAL_USB_USART_Available_Data+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	691b      	ldr	r3, [r3, #16]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	0003024c 	.word	0x0003024c

000b49e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	695b      	ldr	r3, [r3, #20]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	0003024c 	.word	0x0003024c

000b49f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <HAL_USB_USART_Receive_Data+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	699b      	ldr	r3, [r3, #24]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	0003024c 	.word	0x0003024c

000b4a04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <HAL_USB_USART_Send_Data+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	69db      	ldr	r3, [r3, #28]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	0003024c 	.word	0x0003024c

000b4a14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <HAL_USB_USART_Flush_Data+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	6a1b      	ldr	r3, [r3, #32]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003024c 	.word	0x0003024c

000b4a24 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <set_system_mode+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	685b      	ldr	r3, [r3, #4]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030220 	.word	0x00030220

000b4a34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <system_delay_ms+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	695b      	ldr	r3, [r3, #20]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030220 	.word	0x00030220

000b4a44 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <system_thread_set_state+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030220 	.word	0x00030220

000b4a54 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <application_thread_current+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030220 	.word	0x00030220

000b4a64 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <application_thread_invoke+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030220 	.word	0x00030220

000b4a74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b03      	ldr	r3, [pc, #12]	; (b4a84 <system_ctrl_set_app_request_handler+0x10>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4a7e:	9301      	str	r3, [sp, #4]
   b4a80:	bd08      	pop	{r3, pc}
   b4a82:	0000      	.short	0x0000
   b4a84:	00030220 	.word	0x00030220

000b4a88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b03      	ldr	r3, [pc, #12]	; (b4a98 <system_ctrl_set_result+0x10>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a92:	9301      	str	r3, [sp, #4]
   b4a94:	bd08      	pop	{r3, pc}
   b4a96:	0000      	.short	0x0000
   b4a98:	00030220 	.word	0x00030220

000b4a9c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <spark_variable+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	681b      	ldr	r3, [r3, #0]
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	00030244 	.word	0x00030244

000b4aac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <spark_function+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	685b      	ldr	r3, [r3, #4]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	00030244 	.word	0x00030244

000b4abc <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <spark_cloud_flag_connected+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	695b      	ldr	r3, [r3, #20]
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	00030244 	.word	0x00030244

000b4acc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <spark_send_event+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	6a1b      	ldr	r3, [r3, #32]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030244 	.word	0x00030244

000b4adc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	00030244 	.word	0x00030244

000b4aec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <network_connect+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	685b      	ldr	r3, [r3, #4]
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	00030240 	.word	0x00030240

000b4afc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <network_connecting+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	689b      	ldr	r3, [r3, #8]
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	00030240 	.word	0x00030240

000b4b0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <network_disconnect+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	68db      	ldr	r3, [r3, #12]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	00030240 	.word	0x00030240

000b4b1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <network_ready+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	691b      	ldr	r3, [r3, #16]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030240 	.word	0x00030240

000b4b2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <network_on+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	695b      	ldr	r3, [r3, #20]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	00030240 	.word	0x00030240

000b4b3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <network_off+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	699b      	ldr	r3, [r3, #24]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	00030240 	.word	0x00030240

000b4b4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <network_listen+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	69db      	ldr	r3, [r3, #28]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030240 	.word	0x00030240

000b4b5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <network_listening+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	6a1b      	ldr	r3, [r3, #32]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030240 	.word	0x00030240

000b4b6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <network_set_listen_timeout+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	00030240 	.word	0x00030240

000b4b7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <network_get_listen_timeout+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	00030240 	.word	0x00030240

000b4b8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <network_is_on+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030240 	.word	0x00030240

000b4b9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <network_is_off+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030240 	.word	0x00030240

000b4bac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <malloc+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	681b      	ldr	r3, [r3, #0]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	0003021c 	.word	0x0003021c

000b4bbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <free+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	685b      	ldr	r3, [r3, #4]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003021c 	.word	0x0003021c

000b4bcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <realloc+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	689b      	ldr	r3, [r3, #8]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003021c 	.word	0x0003021c

000b4bdc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <vsnprintf+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	0003021c 	.word	0x0003021c

000b4bec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <abort+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003021c 	.word	0x0003021c

000b4bfc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <_malloc_r+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003021c 	.word	0x0003021c

000b4c0c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <__errno+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	0003021c 	.word	0x0003021c

000b4c1c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <__assert_func+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	0003021c 	.word	0x0003021c

000b4c2c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <newlib_impure_ptr_callback+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003021c 	.word	0x0003021c

000b4c3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4c3c:	2100      	movs	r1, #0
   b4c3e:	f7ff bef9 	b.w	b4a34 <system_delay_ms>

000b4c42 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4c42:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4c44:	6883      	ldr	r3, [r0, #8]
   b4c46:	4604      	mov	r4, r0
   b4c48:	b90b      	cbnz	r3, b4c4e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4c4a:	f001 fa33 	bl	b60b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c4e:	68c3      	ldr	r3, [r0, #12]
   b4c50:	4798      	blx	r3
      if (_M_manager)
   b4c52:	68a3      	ldr	r3, [r4, #8]
   b4c54:	b11b      	cbz	r3, b4c5e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c56:	2203      	movs	r2, #3
   b4c58:	4621      	mov	r1, r4
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4c5e:	4620      	mov	r0, r4
   b4c60:	2110      	movs	r1, #16
}
   b4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4c66:	f7ff ba1a 	b.w	b409e <_ZdlPvj>

000b4c6a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4c6a:	b510      	push	{r4, lr}
      if (_M_manager)
   b4c6c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4c6e:	4604      	mov	r4, r0
      if (_M_manager)
   b4c70:	b113      	cbz	r3, b4c78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c72:	2203      	movs	r2, #3
   b4c74:	4601      	mov	r1, r0
   b4c76:	4798      	blx	r3
    }
   b4c78:	4620      	mov	r0, r4
   b4c7a:	bd10      	pop	{r4, pc}

000b4c7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4c7c:	b513      	push	{r0, r1, r4, lr}
   b4c7e:	460b      	mov	r3, r1
   b4c80:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c82:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4c86:	466c      	mov	r4, sp
   b4c88:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4c8c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4c90:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c94:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4c98:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4c9c:	b002      	add	sp, #8
   b4c9e:	bd10      	pop	{r4, pc}

000b4ca0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ca0:	4802      	ldr	r0, [pc, #8]	; (b4cac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ca2:	2300      	movs	r3, #0
   b4ca4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ca6:	f7ff bdb5 	b.w	b4814 <os_mutex_recursive_create>
   b4caa:	bf00      	nop
   b4cac:	2003e690 	.word	0x2003e690

000b4cb0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4cb0:	2200      	movs	r2, #0
   b4cb2:	6840      	ldr	r0, [r0, #4]
   b4cb4:	4611      	mov	r1, r2
   b4cb6:	f7ff bf31 	b.w	b4b1c <network_ready>

000b4cba <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4cba:	2200      	movs	r2, #0
   b4cbc:	6840      	ldr	r0, [r0, #4]
   b4cbe:	4611      	mov	r1, r2
   b4cc0:	f7ff bf4c 	b.w	b4b5c <network_listening>

000b4cc4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4cc4:	2200      	movs	r2, #0
   b4cc6:	6840      	ldr	r0, [r0, #4]
   b4cc8:	4611      	mov	r1, r2
   b4cca:	f7ff bf57 	b.w	b4b7c <network_get_listen_timeout>

000b4cce <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4cce:	6840      	ldr	r0, [r0, #4]
   b4cd0:	2200      	movs	r2, #0
   b4cd2:	f7ff bf4b 	b.w	b4b6c <network_set_listen_timeout>

000b4cd6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4cd6:	6840      	ldr	r0, [r0, #4]
   b4cd8:	2200      	movs	r2, #0
   b4cda:	f081 0101 	eor.w	r1, r1, #1
   b4cde:	f7ff bf35 	b.w	b4b4c <network_listen>

000b4ce2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ce2:	2300      	movs	r3, #0
   b4ce4:	6840      	ldr	r0, [r0, #4]
   b4ce6:	461a      	mov	r2, r3
   b4ce8:	4619      	mov	r1, r3
   b4cea:	f7ff bf27 	b.w	b4b3c <network_off>

000b4cee <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4cee:	2300      	movs	r3, #0
   b4cf0:	6840      	ldr	r0, [r0, #4]
   b4cf2:	461a      	mov	r2, r3
   b4cf4:	4619      	mov	r1, r3
   b4cf6:	f7ff bf19 	b.w	b4b2c <network_on>

000b4cfa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4cfa:	2200      	movs	r2, #0
   b4cfc:	6840      	ldr	r0, [r0, #4]
   b4cfe:	4611      	mov	r1, r2
   b4d00:	f7ff befc 	b.w	b4afc <network_connecting>

000b4d04 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d04:	6840      	ldr	r0, [r0, #4]
   b4d06:	2200      	movs	r2, #0
   b4d08:	2102      	movs	r1, #2
   b4d0a:	f7ff beff 	b.w	b4b0c <network_disconnect>

000b4d0e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d0e:	2300      	movs	r3, #0
   b4d10:	6840      	ldr	r0, [r0, #4]
   b4d12:	461a      	mov	r2, r3
   b4d14:	f7ff beea 	b.w	b4aec <network_connect>

000b4d18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4d18:	4b08      	ldr	r3, [pc, #32]	; (b4d3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4d1a:	b510      	push	{r4, lr}
   b4d1c:	2428      	movs	r4, #40	; 0x28
   b4d1e:	4622      	mov	r2, r4
   b4d20:	4618      	mov	r0, r3
   b4d22:	2100      	movs	r1, #0
   b4d24:	f001 fe00 	bl	b6928 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d28:	4b05      	ldr	r3, [pc, #20]	; (b4d40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4d2a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4d30:	6042      	str	r2, [r0, #4]
   b4d32:	2204      	movs	r2, #4
   b4d34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4d36:	4a03      	ldr	r2, [pc, #12]	; (b4d44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4d38:	601a      	str	r2, [r3, #0]
   b4d3a:	bd10      	pop	{r4, pc}
   b4d3c:	2003e69c 	.word	0x2003e69c
   b4d40:	2003e694 	.word	0x2003e694
   b4d44:	000b6d5c 	.word	0x000b6d5c

000b4d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4d48:	4770      	bx	lr

000b4d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4d4a:	2000      	movs	r0, #0
   b4d4c:	4770      	bx	lr

000b4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4d4e:	b510      	push	{r4, lr}
   b4d50:	2110      	movs	r1, #16
   b4d52:	4604      	mov	r4, r0
   b4d54:	f7ff f9a3 	bl	b409e <_ZdlPvj>
   b4d58:	4620      	mov	r0, r4
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4d5c:	b508      	push	{r3, lr}
      { delete this; }
   b4d5e:	f7ff fff6 	bl	b4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4d62:	bd08      	pop	{r3, pc}

000b4d64 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4d64:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4d66:	2200      	movs	r2, #0
   b4d68:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4d6c:	6002      	str	r2, [r0, #0]
   b4d6e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d70:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d72:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d74:	680c      	ldr	r4, [r1, #0]
   b4d76:	8085      	strh	r5, [r0, #4]
   b4d78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d7a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4d7c:	bd30      	pop	{r4, r5, pc}

000b4d7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4d7e:	b510      	push	{r4, lr}
   b4d80:	4604      	mov	r4, r0
    free((void*)msg_);
   b4d82:	6800      	ldr	r0, [r0, #0]
   b4d84:	f7ff ff1a 	bl	b4bbc <free>
}
   b4d88:	4620      	mov	r0, r4
   b4d8a:	bd10      	pop	{r4, pc}

000b4d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4d8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4d8e:	68c4      	ldr	r4, [r0, #12]
   b4d90:	b1f4      	cbz	r4, b4dd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4d92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4d94:	2b02      	cmp	r3, #2
   b4d96:	d103      	bne.n	b4da0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4d98:	f104 000c 	add.w	r0, r4, #12
   b4d9c:	f7ff ffef 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4da0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4da2:	b135      	cbz	r5, b4db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4da4:	4628      	mov	r0, r5
   b4da6:	f7ff ff60 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
   b4daa:	2110      	movs	r1, #16
   b4dac:	4628      	mov	r0, r5
   b4dae:	f7ff f976 	bl	b409e <_ZdlPvj>
   b4db2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4db4:	b135      	cbz	r5, b4dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4db6:	4628      	mov	r0, r5
   b4db8:	f7ff ff57 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
   b4dbc:	2110      	movs	r1, #16
   b4dbe:	4628      	mov	r0, r5
   b4dc0:	f7ff f96d 	bl	b409e <_ZdlPvj>
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	2114      	movs	r1, #20
   b4dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4dcc:	f7ff b967 	b.w	b409e <_ZdlPvj>
   b4dd0:	bd38      	pop	{r3, r4, r5, pc}

000b4dd2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b4dd2:	b510      	push	{r4, lr}
   b4dd4:	b088      	sub	sp, #32
   b4dd6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b4dd8:	4668      	mov	r0, sp
   b4dda:	f000 fdfe 	bl	b59da <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b4dde:	4669      	mov	r1, sp
   b4de0:	a804      	add	r0, sp, #16
   b4de2:	f000 fe1d 	bl	b5a20 <_ZN6StringC1ERKS_>
   b4de6:	a804      	add	r0, sp, #16
   b4de8:	47a0      	blx	r4
   b4dea:	4604      	mov	r4, r0
   b4dec:	a804      	add	r0, sp, #16
   b4dee:	f000 fda9 	bl	b5944 <_ZN6StringD1Ev>
    String p(param);
   b4df2:	4668      	mov	r0, sp
   b4df4:	f000 fda6 	bl	b5944 <_ZN6StringD1Ev>
}
   b4df8:	4620      	mov	r0, r4
   b4dfa:	b008      	add	sp, #32
   b4dfc:	bd10      	pop	{r4, pc}

000b4dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b4dfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b4e00:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b4e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b4e06:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b4e08:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b4e0a:	461a      	mov	r2, r3
   b4e0c:	4669      	mov	r1, sp
   b4e0e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b4e10:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b4e14:	f8ad 4000 	strh.w	r4, [sp]
   b4e18:	f7ff fe48 	bl	b4aac <spark_function>
}
   b4e1c:	b004      	add	sp, #16
   b4e1e:	bd10      	pop	{r4, pc}

000b4e20 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e20:	680b      	ldr	r3, [r1, #0]
   b4e22:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4e24:	684b      	ldr	r3, [r1, #4]
   b4e26:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4e28:	b113      	cbz	r3, b4e30 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4e2a:	685a      	ldr	r2, [r3, #4]
   b4e2c:	3201      	adds	r2, #1
   b4e2e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e30:	4770      	bx	lr

000b4e32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4e32:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e34:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4e36:	4668      	mov	r0, sp
   b4e38:	460d      	mov	r5, r1
   b4e3a:	f7ff fff1 	bl	b4e20 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e3e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4e40:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e42:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4e44:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4e46:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4e48:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4e4a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4e4c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4e4e:	f7ff fa17 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4e52:	b135      	cbz	r5, b4e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4e54:	1d28      	adds	r0, r5, #4
   b4e56:	f7ff fa13 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e5a:	2108      	movs	r1, #8
   b4e5c:	4628      	mov	r0, r5
   b4e5e:	f7ff f91e 	bl	b409e <_ZdlPvj>
        return p;
    }
   b4e62:	4620      	mov	r0, r4
   b4e64:	b003      	add	sp, #12
   b4e66:	bd30      	pop	{r4, r5, pc}

000b4e68 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4e68:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4e6a:	b510      	push	{r4, lr}
      if (_M_empty())
   b4e6c:	b90a      	cbnz	r2, b4e72 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4e6e:	f001 f921 	bl	b60b4 <_ZSt25__throw_bad_function_callv>
    }
   b4e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e76:	68c3      	ldr	r3, [r0, #12]
   b4e78:	4718      	bx	r3

000b4e7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e7a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4e7c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4e7e:	f100 0110 	add.w	r1, r0, #16
   b4e82:	f7ff fff1 	bl	b4e68 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4e86:	bd08      	pop	{r3, pc}

000b4e88 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4e88:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4e8a:	b510      	push	{r4, lr}
      if (_M_empty())
   b4e8c:	b90a      	cbnz	r2, b4e92 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4e8e:	f001 f911 	bl	b60b4 <_ZSt25__throw_bad_function_callv>
    }
   b4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e96:	68c3      	ldr	r3, [r0, #12]
   b4e98:	4718      	bx	r3

000b4e9a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e9a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4e9c:	6800      	ldr	r0, [r0, #0]
   b4e9e:	f100 0110 	add.w	r1, r0, #16
   b4ea2:	f7ff fff1 	bl	b4e88 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4ea6:	bd08      	pop	{r3, pc}

000b4ea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4ea8:	b538      	push	{r3, r4, r5, lr}
   b4eaa:	2300      	movs	r3, #0
   b4eac:	4604      	mov	r4, r0
   b4eae:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4eb0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4eb2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4eb4:	f7ff f8ef 	bl	b4096 <_Znwj>
   b4eb8:	b128      	cbz	r0, b4ec6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4eba:	2301      	movs	r3, #1
   b4ebc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4ec0:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4ec2:	6003      	str	r3, [r0, #0]
   b4ec4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ec6:	6020      	str	r0, [r4, #0]
	}
   b4ec8:	4620      	mov	r0, r4
   b4eca:	bd38      	pop	{r3, r4, r5, pc}
   b4ecc:	000b6d98 	.word	0x000b6d98

000b4ed0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4ed0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4ed2:	2300      	movs	r3, #0
   b4ed4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4ed6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4ed8:	4604      	mov	r4, r0
   b4eda:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4edc:	b12b      	cbz	r3, b4eea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4ede:	2202      	movs	r2, #2
   b4ee0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4ee2:	68eb      	ldr	r3, [r5, #12]
   b4ee4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4ee6:	68ab      	ldr	r3, [r5, #8]
   b4ee8:	60a3      	str	r3, [r4, #8]
    }
   b4eea:	4620      	mov	r0, r4
   b4eec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ef2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4ef4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4ef6:	4668      	mov	r0, sp
   b4ef8:	f7ff ff34 	bl	b4d64 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4efc:	f04f 0302 	mov.w	r3, #2
   b4f00:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4f04:	2a00      	cmp	r2, #0
   b4f06:	d103      	bne.n	b4f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4f08:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4f0c:	2900      	cmp	r1, #0
   b4f0e:	d1f7      	bne.n	b4f00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4f10:	d125      	bne.n	b4f5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4f12:	f104 050c 	add.w	r5, r4, #12
   b4f16:	4669      	mov	r1, sp
   b4f18:	4628      	mov	r0, r5
   b4f1a:	f7ff ff23 	bl	b4d64 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4f1e:	f3bf 8f5b 	dmb	ish
   b4f22:	2301      	movs	r3, #1
   b4f24:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4f26:	2000      	movs	r0, #0
   b4f28:	f104 0308 	add.w	r3, r4, #8
   b4f2c:	f3bf 8f5b 	dmb	ish
   b4f30:	e853 6f00 	ldrex	r6, [r3]
   b4f34:	e843 0200 	strex	r2, r0, [r3]
   b4f38:	2a00      	cmp	r2, #0
   b4f3a:	d1f9      	bne.n	b4f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4f3c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4f40:	b16e      	cbz	r6, b4f5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4f42:	f7ff fd87 	bl	b4a54 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f46:	b178      	cbz	r0, b4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4f48:	4629      	mov	r1, r5
   b4f4a:	4630      	mov	r0, r6
   b4f4c:	f7ff ff8c 	bl	b4e68 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4f50:	4630      	mov	r0, r6
   b4f52:	f7ff fe8a 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4f56:	2110      	movs	r1, #16
   b4f58:	4630      	mov	r0, r6
   b4f5a:	f7ff f8a0 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b4f5e:	4668      	mov	r0, sp
   b4f60:	f7ff ff0d 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
    }
   b4f64:	b009      	add	sp, #36	; 0x24
   b4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4f68:	4631      	mov	r1, r6
   b4f6a:	a802      	add	r0, sp, #8
   b4f6c:	f7ff ffb0 	bl	b4ed0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4f70:	68e0      	ldr	r0, [r4, #12]
   b4f72:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4f76:	b108      	cbz	r0, b4f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4f78:	f001 fd14 	bl	b69a4 <strdup>
        type_(type) {
   b4f7c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4f7e:	2010      	movs	r0, #16
   b4f80:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4f84:	f7ff f887 	bl	b4096 <_Znwj>
   b4f88:	4605      	mov	r5, r0
   b4f8a:	b1e8      	cbz	r0, b4fc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4f8c:	2700      	movs	r7, #0
   b4f8e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f90:	2018      	movs	r0, #24
   b4f92:	f7ff f880 	bl	b4096 <_Znwj>
   b4f96:	4604      	mov	r4, r0
   b4f98:	b188      	cbz	r0, b4fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4f9a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4f9c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4f9e:	a802      	add	r0, sp, #8
   b4fa0:	f7ff fe6c 	bl	b4c7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fa4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4fa6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4fa8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4faa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4fac:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4fae:	a906      	add	r1, sp, #24
   b4fb0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4fb2:	60e3      	str	r3, [r4, #12]
   b4fb4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4fb8:	9205      	str	r2, [sp, #20]
   b4fba:	f7ff fed3 	bl	b4d64 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4fbe:	4b08      	ldr	r3, [pc, #32]	; (b4fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4fc0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4fc2:	4b08      	ldr	r3, [pc, #32]	; (b4fe4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fc4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4fc6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4fc8:	a806      	add	r0, sp, #24
   b4fca:	f7ff fed8 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4fce:	a802      	add	r0, sp, #8
   b4fd0:	f7ff fe4b 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4fd4:	2200      	movs	r2, #0
   b4fd6:	4629      	mov	r1, r5
   b4fd8:	4803      	ldr	r0, [pc, #12]	; (b4fe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4fda:	f7ff fd43 	bl	b4a64 <application_thread_invoke>
   b4fde:	e7b7      	b.n	b4f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4fe0:	000b4e7b 	.word	0x000b4e7b
   b4fe4:	000b50fd 	.word	0x000b50fd
   b4fe8:	000b4c43 	.word	0x000b4c43

000b4fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ff0:	b08b      	sub	sp, #44	; 0x2c
   b4ff2:	4605      	mov	r5, r0
   b4ff4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4ff8:	460f      	mov	r7, r1
   b4ffa:	4690      	mov	r8, r2
   b4ffc:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ffe:	f7ff fd5d 	bl	b4abc <spark_cloud_flag_connected>
   b5002:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5004:	4683      	mov	fp, r0
   b5006:	bb38      	cbnz	r0, b5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5008:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b500c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b500e:	a905      	add	r1, sp, #20
   b5010:	4630      	mov	r0, r6
   b5012:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5016:	f7ff fea5 	bl	b4d64 <_ZN8particle5ErrorC1EOS0_>
   b501a:	2014      	movs	r0, #20
   b501c:	f7ff f83b 	bl	b4096 <_Znwj>
   b5020:	4604      	mov	r4, r0
   b5022:	b148      	cbz	r0, b5038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5024:	2302      	movs	r3, #2
   b5026:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5028:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b502a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b502e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5030:	4631      	mov	r1, r6
   b5032:	300c      	adds	r0, #12
   b5034:	f7ff fe96 	bl	b4d64 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5038:	4628      	mov	r0, r5
	: __shared_count(__p)
   b503a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b503c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5040:	f7ff ff32 	bl	b4ea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5044:	4630      	mov	r0, r6
   b5046:	f7ff fe9a 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b504a:	a805      	add	r0, sp, #20
   b504c:	f7ff fe97 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5050:	4628      	mov	r0, r5
   b5052:	b00b      	add	sp, #44	; 0x2c
   b5054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5058:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b505a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b505c:	2014      	movs	r0, #20
   b505e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5062:	9307      	str	r3, [sp, #28]
   b5064:	f7ff f817 	bl	b4096 <_Znwj>
   b5068:	4601      	mov	r1, r0
   b506a:	b118      	cbz	r0, b5074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b506c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5070:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5072:	7044      	strb	r4, [r0, #1]
   b5074:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5076:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5078:	f7ff ff16 	bl	b4ea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b507c:	4b1e      	ldr	r3, [pc, #120]	; (b50f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b507e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5080:	2008      	movs	r0, #8
   b5082:	f7ff f808 	bl	b4096 <_Znwj>
   b5086:	4604      	mov	r4, r0
   b5088:	b110      	cbz	r0, b5090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b508a:	a903      	add	r1, sp, #12
   b508c:	f7ff fec8 	bl	b4e20 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5090:	9600      	str	r6, [sp, #0]
   b5092:	fa5f f38a 	uxtb.w	r3, sl
   b5096:	464a      	mov	r2, r9
   b5098:	4641      	mov	r1, r8
   b509a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b509c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b509e:	f7ff fd15 	bl	b4acc <spark_send_event>
   b50a2:	b9b8      	cbnz	r0, b50d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b50a4:	9b03      	ldr	r3, [sp, #12]
   b50a6:	785b      	ldrb	r3, [r3, #1]
   b50a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b50ac:	b993      	cbnz	r3, b50d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b50ae:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b50b2:	a905      	add	r1, sp, #20
   b50b4:	a803      	add	r0, sp, #12
   b50b6:	9205      	str	r2, [sp, #20]
   b50b8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b50bc:	f7ff ff18 	bl	b4ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b50c0:	a805      	add	r0, sp, #20
   b50c2:	f7ff fe5c 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b50c6:	a805      	add	r0, sp, #20
   b50c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b50ca:	f7ff feb2 	bl	b4e32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b50ce:	a806      	add	r0, sp, #24
   b50d0:	f7ff f8d6 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50d4:	a903      	add	r1, sp, #12
   b50d6:	a805      	add	r0, sp, #20
   b50d8:	f7ff fea2 	bl	b4e20 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50dc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b50de:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50e0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b50e2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b50e4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b50e6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b50e8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b50ea:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b50ec:	f7ff f8c8 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50f0:	a804      	add	r0, sp, #16
   b50f2:	f7ff f8c5 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b50f6:	e7ab      	b.n	b5050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b50f8:	000b5179 	.word	0x000b5179

000b50fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b50fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b50fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5100:	4605      	mov	r5, r0
	switch (__op)
   b5102:	d103      	bne.n	b510c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5104:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5106:	6003      	str	r3, [r0, #0]
      }
   b5108:	2000      	movs	r0, #0
   b510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b510c:	2a02      	cmp	r2, #2
   b510e:	d010      	beq.n	b5132 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5110:	2a03      	cmp	r2, #3
   b5112:	d1f9      	bne.n	b5108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5114:	6804      	ldr	r4, [r0, #0]
   b5116:	2c00      	cmp	r4, #0
   b5118:	d0f6      	beq.n	b5108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b511a:	f104 0010 	add.w	r0, r4, #16
   b511e:	f7ff fe2e 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5122:	4620      	mov	r0, r4
   b5124:	f7ff fda1 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5128:	2118      	movs	r1, #24
   b512a:	4620      	mov	r0, r4
   b512c:	f7fe ffb7 	bl	b409e <_ZdlPvj>
   b5130:	e7ea      	b.n	b5108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5132:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5134:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5136:	f7fe ffae 	bl	b4096 <_Znwj>
   b513a:	4604      	mov	r4, r0
   b513c:	b150      	cbz	r0, b5154 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b513e:	4631      	mov	r1, r6
   b5140:	f7ff fec6 	bl	b4ed0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5144:	6930      	ldr	r0, [r6, #16]
   b5146:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b514a:	b108      	cbz	r0, b5150 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b514c:	f001 fc2a 	bl	b69a4 <strdup>
        type_(type) {
   b5150:	6120      	str	r0, [r4, #16]
   b5152:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5154:	602c      	str	r4, [r5, #0]
	}
   b5156:	e7d7      	b.n	b5108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5158 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5158:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b515a:	2300      	movs	r3, #0
   b515c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b515e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5160:	4604      	mov	r4, r0
   b5162:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5164:	b12b      	cbz	r3, b5172 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5166:	2202      	movs	r2, #2
   b5168:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b516a:	68eb      	ldr	r3, [r5, #12]
   b516c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b516e:	68ab      	ldr	r3, [r5, #8]
   b5170:	60a3      	str	r3, [r4, #8]
    }
   b5172:	4620      	mov	r0, r4
   b5174:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5178 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5178:	b5f0      	push	{r4, r5, r6, r7, lr}
   b517a:	b089      	sub	sp, #36	; 0x24
   b517c:	4604      	mov	r4, r0
   b517e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5180:	a801      	add	r0, sp, #4
   b5182:	4611      	mov	r1, r2
   b5184:	f7ff fe55 	bl	b4e32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5188:	b1a4      	cbz	r4, b51b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b518a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b518c:	b11d      	cbz	r5, b5196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b518e:	4628      	mov	r0, r5
   b5190:	f001 fc08 	bl	b69a4 <strdup>
   b5194:	4605      	mov	r5, r0
   b5196:	a801      	add	r0, sp, #4
   b5198:	a903      	add	r1, sp, #12
        type_(type) {
   b519a:	9503      	str	r5, [sp, #12]
   b519c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b51a0:	f7ff fea6 	bl	b4ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b51a4:	a803      	add	r0, sp, #12
   b51a6:	f7ff fdea 	bl	b4d7e <_ZN8particle5ErrorD1Ev>
   b51aa:	a802      	add	r0, sp, #8
   b51ac:	f7ff f868 	bl	b4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b51b0:	b009      	add	sp, #36	; 0x24
   b51b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b51b4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b51b6:	2301      	movs	r3, #1
   b51b8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b51bc:	2a00      	cmp	r2, #0
   b51be:	d103      	bne.n	b51c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b51c0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b51c4:	2900      	cmp	r1, #0
   b51c6:	d1f7      	bne.n	b51b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b51c8:	d1ef      	bne.n	b51aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b51ca:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b51cc:	f3bf 8f5b 	dmb	ish
   b51d0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b51d2:	1d2b      	adds	r3, r5, #4
   b51d4:	f3bf 8f5b 	dmb	ish
   b51d8:	e853 6f00 	ldrex	r6, [r3]
   b51dc:	e843 4200 	strex	r2, r4, [r3]
   b51e0:	2a00      	cmp	r2, #0
   b51e2:	d1f9      	bne.n	b51d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b51e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b51e8:	2e00      	cmp	r6, #0
   b51ea:	d0de      	beq.n	b51aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b51ec:	4620      	mov	r0, r4
   b51ee:	f7ff fc31 	bl	b4a54 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b51f2:	4607      	mov	r7, r0
   b51f4:	b160      	cbz	r0, b5210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b51f6:	f105 010c 	add.w	r1, r5, #12
   b51fa:	4630      	mov	r0, r6
   b51fc:	f7ff fe44 	bl	b4e88 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5200:	4630      	mov	r0, r6
   b5202:	f7ff fd32 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5206:	2110      	movs	r1, #16
   b5208:	4630      	mov	r0, r6
   b520a:	f7fe ff48 	bl	b409e <_ZdlPvj>
   b520e:	e7cc      	b.n	b51aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5210:	4631      	mov	r1, r6
   b5212:	a803      	add	r0, sp, #12
   b5214:	f7ff ffa0 	bl	b5158 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5218:	7b2b      	ldrb	r3, [r5, #12]
   b521a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b521e:	2010      	movs	r0, #16
   b5220:	f7fe ff39 	bl	b4096 <_Znwj>
   b5224:	4605      	mov	r5, r0
   b5226:	b1d0      	cbz	r0, b525e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5228:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b522a:	2014      	movs	r0, #20
   b522c:	f7fe ff33 	bl	b4096 <_Znwj>
   b5230:	4604      	mov	r4, r0
   b5232:	b178      	cbz	r0, b5254 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5234:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5236:	4601      	mov	r1, r0
   b5238:	a803      	add	r0, sp, #12
   b523a:	f7ff fd1f 	bl	b4c7c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b523e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5240:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5242:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5244:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5246:	9205      	str	r2, [sp, #20]
   b5248:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b524a:	60e3      	str	r3, [r4, #12]
   b524c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5250:	9206      	str	r2, [sp, #24]
   b5252:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5254:	4b06      	ldr	r3, [pc, #24]	; (b5270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5256:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5258:	4b06      	ldr	r3, [pc, #24]	; (b5274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b525a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b525c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b525e:	a803      	add	r0, sp, #12
   b5260:	f7ff fd03 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5264:	2200      	movs	r2, #0
   b5266:	4629      	mov	r1, r5
   b5268:	4803      	ldr	r0, [pc, #12]	; (b5278 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b526a:	f7ff fbfb 	bl	b4a64 <application_thread_invoke>
   b526e:	e7c7      	b.n	b5200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5270:	000b4e9b 	.word	0x000b4e9b
   b5274:	000b527d 	.word	0x000b527d
   b5278:	000b4c43 	.word	0x000b4c43

000b527c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b527c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b527e:	b570      	push	{r4, r5, r6, lr}
   b5280:	4604      	mov	r4, r0
	switch (__op)
   b5282:	d103      	bne.n	b528c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5284:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5286:	6003      	str	r3, [r0, #0]
      }
   b5288:	2000      	movs	r0, #0
   b528a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b528c:	2a02      	cmp	r2, #2
   b528e:	d00c      	beq.n	b52aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5290:	2a03      	cmp	r2, #3
   b5292:	d1f9      	bne.n	b5288 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5294:	6804      	ldr	r4, [r0, #0]
   b5296:	2c00      	cmp	r4, #0
   b5298:	d0f6      	beq.n	b5288 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b529a:	4620      	mov	r0, r4
   b529c:	f7ff fce5 	bl	b4c6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b52a0:	2114      	movs	r1, #20
   b52a2:	4620      	mov	r0, r4
   b52a4:	f7fe fefb 	bl	b409e <_ZdlPvj>
   b52a8:	e7ee      	b.n	b5288 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b52aa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b52ac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b52ae:	f7fe fef2 	bl	b4096 <_Znwj>
   b52b2:	4605      	mov	r5, r0
   b52b4:	b120      	cbz	r0, b52c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b52b6:	4631      	mov	r1, r6
   b52b8:	f7ff ff4e 	bl	b5158 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b52bc:	7c33      	ldrb	r3, [r6, #16]
   b52be:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b52c0:	6025      	str	r5, [r4, #0]
	}
   b52c2:	e7e1      	b.n	b5288 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b52c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52c4:	2200      	movs	r2, #0
   b52c6:	6840      	ldr	r0, [r0, #4]
   b52c8:	4611      	mov	r1, r2
   b52ca:	f7ff bc47 	b.w	b4b5c <network_listening>

000b52ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52ce:	2200      	movs	r2, #0
   b52d0:	6840      	ldr	r0, [r0, #4]
   b52d2:	4611      	mov	r1, r2
   b52d4:	f7ff bc52 	b.w	b4b7c <network_get_listen_timeout>

000b52d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b52d8:	6840      	ldr	r0, [r0, #4]
   b52da:	2200      	movs	r2, #0
   b52dc:	f7ff bc46 	b.w	b4b6c <network_set_listen_timeout>

000b52e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b52e0:	6840      	ldr	r0, [r0, #4]
   b52e2:	2200      	movs	r2, #0
   b52e4:	f081 0101 	eor.w	r1, r1, #1
   b52e8:	f7ff bc30 	b.w	b4b4c <network_listen>

000b52ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b52ec:	2300      	movs	r3, #0
   b52ee:	6840      	ldr	r0, [r0, #4]
   b52f0:	461a      	mov	r2, r3
   b52f2:	4619      	mov	r1, r3
   b52f4:	f7ff bc22 	b.w	b4b3c <network_off>

000b52f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b52f8:	2300      	movs	r3, #0
   b52fa:	6840      	ldr	r0, [r0, #4]
   b52fc:	461a      	mov	r2, r3
   b52fe:	4619      	mov	r1, r3
   b5300:	f7ff bc14 	b.w	b4b2c <network_on>

000b5304 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5304:	2200      	movs	r2, #0
   b5306:	6840      	ldr	r0, [r0, #4]
   b5308:	4611      	mov	r1, r2
   b530a:	f7ff bc07 	b.w	b4b1c <network_ready>

000b530e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b530e:	2200      	movs	r2, #0
   b5310:	6840      	ldr	r0, [r0, #4]
   b5312:	4611      	mov	r1, r2
   b5314:	f7ff bbf2 	b.w	b4afc <network_connecting>

000b5318 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5318:	6840      	ldr	r0, [r0, #4]
   b531a:	2200      	movs	r2, #0
   b531c:	2102      	movs	r1, #2
   b531e:	f7ff bbf5 	b.w	b4b0c <network_disconnect>

000b5322 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5322:	2300      	movs	r3, #0
   b5324:	6840      	ldr	r0, [r0, #4]
   b5326:	461a      	mov	r2, r3
   b5328:	f7ff bbe0 	b.w	b4aec <network_connect>

000b532c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b532c:	4b02      	ldr	r3, [pc, #8]	; (b5338 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b532e:	2203      	movs	r2, #3
   b5330:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5332:	4a02      	ldr	r2, [pc, #8]	; (b533c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5334:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5336:	4770      	bx	lr
   b5338:	2003e6c4 	.word	0x2003e6c4
   b533c:	000b6db4 	.word	0x000b6db4

000b5340 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5340:	4770      	bx	lr

000b5342 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5344:	4606      	mov	r6, r0
   b5346:	4615      	mov	r5, r2
   b5348:	460c      	mov	r4, r1
   b534a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b534c:	42bc      	cmp	r4, r7
   b534e:	d006      	beq.n	b535e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5350:	6833      	ldr	r3, [r6, #0]
   b5352:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5356:	689b      	ldr	r3, [r3, #8]
   b5358:	4630      	mov	r0, r6
   b535a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b535c:	e7f6      	b.n	b534c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b535e:	4628      	mov	r0, r5
   b5360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5362 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5362:	7c00      	ldrb	r0, [r0, #16]
   b5364:	2200      	movs	r2, #0
   b5366:	f7ff ba85 	b.w	b4874 <hal_i2c_write>

000b536a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b536a:	7c00      	ldrb	r0, [r0, #16]
   b536c:	2100      	movs	r1, #0
   b536e:	f7ff ba89 	b.w	b4884 <hal_i2c_available>

000b5372 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5372:	7c00      	ldrb	r0, [r0, #16]
   b5374:	2100      	movs	r1, #0
   b5376:	f7ff ba8d 	b.w	b4894 <hal_i2c_read>

000b537a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b537a:	7c00      	ldrb	r0, [r0, #16]
   b537c:	2100      	movs	r1, #0
   b537e:	f7ff ba91 	b.w	b48a4 <hal_i2c_peek>

000b5382 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5382:	7c00      	ldrb	r0, [r0, #16]
   b5384:	2100      	movs	r1, #0
   b5386:	f7ff ba95 	b.w	b48b4 <hal_i2c_flush>

000b538a <_ZN7TwoWireD0Ev>:
   b538a:	b510      	push	{r4, lr}
   b538c:	2114      	movs	r1, #20
   b538e:	4604      	mov	r4, r0
   b5390:	f7fe fe85 	bl	b409e <_ZdlPvj>
   b5394:	4620      	mov	r0, r4
   b5396:	bd10      	pop	{r4, pc}

000b5398 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5398:	b538      	push	{r3, r4, r5, lr}
   b539a:	4604      	mov	r4, r0
   b539c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b539e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53a2:	2200      	movs	r2, #0
   b53a4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53a8:	4b09      	ldr	r3, [pc, #36]	; (b53d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b53aa:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53ac:	4608      	mov	r0, r1
   b53ae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b53b0:	4629      	mov	r1, r5
   b53b2:	f7ff fa8f 	bl	b48d4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53b6:	30bf      	adds	r0, #191	; 0xbf
   b53b8:	d108      	bne.n	b53cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b53ba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53bc:	07db      	lsls	r3, r3, #31
   b53be:	d505      	bpl.n	b53cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b53c0:	6868      	ldr	r0, [r5, #4]
   b53c2:	f7ff fbfb 	bl	b4bbc <free>
    free(conf.tx_buffer);
   b53c6:	68e8      	ldr	r0, [r5, #12]
   b53c8:	f7ff fbf8 	bl	b4bbc <free>
}
   b53cc:	4620      	mov	r0, r4
   b53ce:	bd38      	pop	{r3, r4, r5, pc}
   b53d0:	000b6df0 	.word	0x000b6df0

000b53d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b53d4:	4770      	bx	lr

000b53d6 <_ZN9IPAddressD0Ev>:
   b53d6:	b510      	push	{r4, lr}
   b53d8:	2118      	movs	r1, #24
   b53da:	4604      	mov	r4, r0
   b53dc:	f7fe fe5f 	bl	b409e <_ZdlPvj>
   b53e0:	4620      	mov	r0, r4
   b53e2:	bd10      	pop	{r4, pc}

000b53e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b53e6:	7d03      	ldrb	r3, [r0, #20]
   b53e8:	2b06      	cmp	r3, #6
{
   b53ea:	b08d      	sub	sp, #52	; 0x34
   b53ec:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53ee:	f100 0704 	add.w	r7, r0, #4
   b53f2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b53f6:	d012      	beq.n	b541e <_ZNK9IPAddress7printToER5Print+0x3a>
   b53f8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b53fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5400:	220a      	movs	r2, #10
   b5402:	4630      	mov	r0, r6
   b5404:	f000 f959 	bl	b56ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5408:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b540a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b540c:	d019      	beq.n	b5442 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b540e:	2c00      	cmp	r4, #0
   b5410:	d0f4      	beq.n	b53fc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5412:	212e      	movs	r1, #46	; 0x2e
   b5414:	4630      	mov	r0, r6
   b5416:	f000 f937 	bl	b5688 <_ZN5Print5printEc>
   b541a:	4404      	add	r4, r0
   b541c:	e7ee      	b.n	b53fc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b541e:	232f      	movs	r3, #47	; 0x2f
   b5420:	466a      	mov	r2, sp
   b5422:	4639      	mov	r1, r7
   b5424:	200a      	movs	r0, #10
		buf[0] = 0;
   b5426:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b542a:	f7ff fa5b 	bl	b48e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b542e:	4668      	mov	r0, sp
   b5430:	f001 fad5 	bl	b69de <strlen>
   b5434:	6833      	ldr	r3, [r6, #0]
   b5436:	4602      	mov	r2, r0
   b5438:	68db      	ldr	r3, [r3, #12]
   b543a:	4669      	mov	r1, sp
   b543c:	4630      	mov	r0, r6
   b543e:	4798      	blx	r3
   b5440:	4604      	mov	r4, r0
    }
    return n;
}
   b5442:	4620      	mov	r0, r4
   b5444:	b00d      	add	sp, #52	; 0x34
   b5446:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5448 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5448:	b510      	push	{r4, lr}
   b544a:	4b05      	ldr	r3, [pc, #20]	; (b5460 <_ZN9IPAddressC1Ev+0x18>)
   b544c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b544e:	2211      	movs	r2, #17
   b5450:	f840 3b04 	str.w	r3, [r0], #4
   b5454:	2100      	movs	r1, #0
   b5456:	f001 fa67 	bl	b6928 <memset>
}
   b545a:	4620      	mov	r0, r4
   b545c:	bd10      	pop	{r4, pc}
   b545e:	bf00      	nop
   b5460:	000b6e18 	.word	0x000b6e18

000b5464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5464:	4603      	mov	r3, r0
   b5466:	4a07      	ldr	r2, [pc, #28]	; (b5484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5468:	b510      	push	{r4, lr}
   b546a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b546e:	f101 0210 	add.w	r2, r1, #16
   b5472:	f851 4b04 	ldr.w	r4, [r1], #4
   b5476:	f843 4b04 	str.w	r4, [r3], #4
   b547a:	4291      	cmp	r1, r2
   b547c:	d1f9      	bne.n	b5472 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b547e:	780a      	ldrb	r2, [r1, #0]
   b5480:	701a      	strb	r2, [r3, #0]
}
   b5482:	bd10      	pop	{r4, pc}
   b5484:	000b6e18 	.word	0x000b6e18

000b5488 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5488:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b548a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b548e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5492:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5496:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b549a:	2304      	movs	r3, #4
   b549c:	6041      	str	r1, [r0, #4]
   b549e:	7503      	strb	r3, [r0, #20]
}
   b54a0:	bd10      	pop	{r4, pc}
	...

000b54a4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b54a4:	b507      	push	{r0, r1, r2, lr}
   b54a6:	4b06      	ldr	r3, [pc, #24]	; (b54c0 <_ZN9IPAddressC1EPKh+0x1c>)
   b54a8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b54aa:	78cb      	ldrb	r3, [r1, #3]
   b54ac:	9300      	str	r3, [sp, #0]
   b54ae:	788b      	ldrb	r3, [r1, #2]
   b54b0:	784a      	ldrb	r2, [r1, #1]
   b54b2:	7809      	ldrb	r1, [r1, #0]
   b54b4:	f7ff ffe8 	bl	b5488 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b54b8:	b003      	add	sp, #12
   b54ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b54be:	bf00      	nop
   b54c0:	000b6e18 	.word	0x000b6e18

000b54c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b54c4:	4b01      	ldr	r3, [pc, #4]	; (b54cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b54c6:	4a02      	ldr	r2, [pc, #8]	; (b54d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b54c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b54ca:	4770      	bx	lr
   b54cc:	2003e6cc 	.word	0x2003e6cc
   b54d0:	000b6e24 	.word	0x000b6e24

000b54d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b54d4:	2300      	movs	r3, #0
   b54d6:	6840      	ldr	r0, [r0, #4]
   b54d8:	461a      	mov	r2, r3
   b54da:	f7ff bb07 	b.w	b4aec <network_connect>

000b54de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b54de:	6840      	ldr	r0, [r0, #4]
   b54e0:	2200      	movs	r2, #0
   b54e2:	2102      	movs	r1, #2
   b54e4:	f7ff bb12 	b.w	b4b0c <network_disconnect>

000b54e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b54e8:	2200      	movs	r2, #0
   b54ea:	6840      	ldr	r0, [r0, #4]
   b54ec:	4611      	mov	r1, r2
   b54ee:	f7ff bb05 	b.w	b4afc <network_connecting>

000b54f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b54f2:	2200      	movs	r2, #0
   b54f4:	6840      	ldr	r0, [r0, #4]
   b54f6:	4611      	mov	r1, r2
   b54f8:	f7ff bb10 	b.w	b4b1c <network_ready>

000b54fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b54fc:	2300      	movs	r3, #0
   b54fe:	6840      	ldr	r0, [r0, #4]
   b5500:	461a      	mov	r2, r3
   b5502:	4619      	mov	r1, r3
   b5504:	f7ff bb12 	b.w	b4b2c <network_on>

000b5508 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5508:	2300      	movs	r3, #0
   b550a:	6840      	ldr	r0, [r0, #4]
   b550c:	461a      	mov	r2, r3
   b550e:	4619      	mov	r1, r3
   b5510:	f7ff bb14 	b.w	b4b3c <network_off>

000b5514 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5514:	6840      	ldr	r0, [r0, #4]
   b5516:	2100      	movs	r1, #0
   b5518:	f7ff bb38 	b.w	b4b8c <network_is_on>

000b551c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b551c:	6840      	ldr	r0, [r0, #4]
   b551e:	2100      	movs	r1, #0
   b5520:	f7ff bb3c 	b.w	b4b9c <network_is_off>

000b5524 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	2200      	movs	r2, #0
   b5528:	f081 0101 	eor.w	r1, r1, #1
   b552c:	f7ff bb0e 	b.w	b4b4c <network_listen>

000b5530 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5530:	6840      	ldr	r0, [r0, #4]
   b5532:	2200      	movs	r2, #0
   b5534:	f7ff bb1a 	b.w	b4b6c <network_set_listen_timeout>

000b5538 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5538:	2200      	movs	r2, #0
   b553a:	6840      	ldr	r0, [r0, #4]
   b553c:	4611      	mov	r1, r2
   b553e:	f7ff bb1d 	b.w	b4b7c <network_get_listen_timeout>

000b5542 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5542:	2200      	movs	r2, #0
   b5544:	6840      	ldr	r0, [r0, #4]
   b5546:	4611      	mov	r1, r2
   b5548:	f7ff bb08 	b.w	b4b5c <network_listening>

000b554c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b554c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5550:	b095      	sub	sp, #84	; 0x54
   b5552:	4614      	mov	r4, r2
   b5554:	460d      	mov	r5, r1
   b5556:	4607      	mov	r7, r0
    IPAddress addr;
   b5558:	f7ff ff76 	bl	b5448 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b555c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b555e:	221c      	movs	r2, #28
   b5560:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5562:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5564:	f001 f9e0 	bl	b6928 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5568:	2340      	movs	r3, #64	; 0x40
   b556a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b556c:	4620      	mov	r0, r4
   b556e:	466b      	mov	r3, sp
   b5570:	aa0c      	add	r2, sp, #48	; 0x30
   b5572:	2100      	movs	r1, #0
   b5574:	f7ff f9c6 	bl	b4904 <netdb_getaddrinfo>
    if (!r) {
   b5578:	4604      	mov	r4, r0
   b557a:	2800      	cmp	r0, #0
   b557c:	d14b      	bne.n	b5616 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b557e:	4602      	mov	r2, r0
   b5580:	2101      	movs	r1, #1
   b5582:	6868      	ldr	r0, [r5, #4]
   b5584:	f7ff faca 	bl	b4b1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5588:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b558a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b558c:	4622      	mov	r2, r4
   b558e:	6868      	ldr	r0, [r5, #4]
   b5590:	f7ff fac4 	bl	b4b1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5594:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5596:	4681      	mov	r9, r0
        bool ok = false;
   b5598:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b559a:	2e00      	cmp	r6, #0
   b559c:	d03b      	beq.n	b5616 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b559e:	2900      	cmp	r1, #0
   b55a0:	d139      	bne.n	b5616 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b55a2:	6873      	ldr	r3, [r6, #4]
   b55a4:	2b02      	cmp	r3, #2
   b55a6:	d003      	beq.n	b55b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b55a8:	2b0a      	cmp	r3, #10
   b55aa:	d011      	beq.n	b55d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55ac:	69f6      	ldr	r6, [r6, #28]
   b55ae:	e7f4      	b.n	b559a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b55b0:	f1b8 0f00 	cmp.w	r8, #0
   b55b4:	d0fa      	beq.n	b55ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b55b6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b55b8:	a806      	add	r0, sp, #24
   b55ba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b55bc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b55be:	f7ff ff71 	bl	b54a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55c4:	1d3c      	adds	r4, r7, #4
   b55c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55c8:	682b      	ldr	r3, [r5, #0]
   b55ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55cc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b55ce:	e7ed      	b.n	b55ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b55d0:	f1b9 0f00 	cmp.w	r9, #0
   b55d4:	d0ea      	beq.n	b55ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b55d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b55d8:	2210      	movs	r2, #16
   b55da:	a801      	add	r0, sp, #4
   b55dc:	f001 f9a4 	bl	b6928 <memset>
                    a.v = 6;
   b55e0:	2306      	movs	r3, #6
   b55e2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55e6:	ad01      	add	r5, sp, #4
   b55e8:	f104 0308 	add.w	r3, r4, #8
   b55ec:	3418      	adds	r4, #24
   b55ee:	6818      	ldr	r0, [r3, #0]
   b55f0:	6859      	ldr	r1, [r3, #4]
   b55f2:	462a      	mov	r2, r5
   b55f4:	c203      	stmia	r2!, {r0, r1}
   b55f6:	3308      	adds	r3, #8
   b55f8:	42a3      	cmp	r3, r4
   b55fa:	4615      	mov	r5, r2
   b55fc:	d1f7      	bne.n	b55ee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b55fe:	a901      	add	r1, sp, #4
   b5600:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5602:	ad07      	add	r5, sp, #28
   b5604:	f7ff ff2e 	bl	b5464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b560a:	1d3c      	adds	r4, r7, #4
   b560c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b560e:	682b      	ldr	r3, [r5, #0]
   b5610:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5612:	4649      	mov	r1, r9
   b5614:	e7ca      	b.n	b55ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5616:	9800      	ldr	r0, [sp, #0]
   b5618:	f7ff f96c 	bl	b48f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b561c:	4638      	mov	r0, r7
   b561e:	b015      	add	sp, #84	; 0x54
   b5620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5624 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5624:	4b02      	ldr	r3, [pc, #8]	; (b5630 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5626:	4a03      	ldr	r2, [pc, #12]	; (b5634 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5628:	601a      	str	r2, [r3, #0]
   b562a:	2200      	movs	r2, #0
   b562c:	605a      	str	r2, [r3, #4]

} // spark
   b562e:	4770      	bx	lr
   b5630:	2003e6d0 	.word	0x2003e6d0
   b5634:	000b6e30 	.word	0x000b6e30

000b5638 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b563a:	4606      	mov	r6, r0
   b563c:	460d      	mov	r5, r1
  size_t n = 0;
   b563e:	188f      	adds	r7, r1, r2
   b5640:	2400      	movs	r4, #0
  while (size--) {
   b5642:	42bd      	cmp	r5, r7
   b5644:	d00c      	beq.n	b5660 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5646:	6833      	ldr	r3, [r6, #0]
   b5648:	f815 1b01 	ldrb.w	r1, [r5], #1
   b564c:	689b      	ldr	r3, [r3, #8]
   b564e:	4630      	mov	r0, r6
   b5650:	4798      	blx	r3
     if (chunk>=0)
   b5652:	1e03      	subs	r3, r0, #0
   b5654:	db01      	blt.n	b565a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5656:	441c      	add	r4, r3
  while (size--) {
   b5658:	e7f3      	b.n	b5642 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b565a:	2c00      	cmp	r4, #0
   b565c:	bf08      	it	eq
   b565e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5660:	4620      	mov	r0, r4
   b5662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5664 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5664:	b513      	push	{r0, r1, r4, lr}
   b5666:	4604      	mov	r4, r0
    }
   b5668:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b566a:	b159      	cbz	r1, b5684 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b566c:	9101      	str	r1, [sp, #4]
   b566e:	f001 f9b6 	bl	b69de <strlen>
   b5672:	6823      	ldr	r3, [r4, #0]
   b5674:	9901      	ldr	r1, [sp, #4]
   b5676:	68db      	ldr	r3, [r3, #12]
   b5678:	4602      	mov	r2, r0
   b567a:	4620      	mov	r0, r4
    }
   b567c:	b002      	add	sp, #8
   b567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5682:	4718      	bx	r3
    }
   b5684:	b002      	add	sp, #8
   b5686:	bd10      	pop	{r4, pc}

000b5688 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5688:	6803      	ldr	r3, [r0, #0]
   b568a:	689b      	ldr	r3, [r3, #8]
   b568c:	4718      	bx	r3

000b568e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b568e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5690:	210d      	movs	r1, #13
{
   b5692:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5694:	f7ff fff8 	bl	b5688 <_ZN5Print5printEc>
  n += print('\n');
   b5698:	210a      	movs	r1, #10
  size_t n = print('\r');
   b569a:	4604      	mov	r4, r0
  n += print('\n');
   b569c:	4628      	mov	r0, r5
   b569e:	f7ff fff3 	bl	b5688 <_ZN5Print5printEc>
  return n;
}
   b56a2:	4420      	add	r0, r4
   b56a4:	bd38      	pop	{r3, r4, r5, pc}

000b56a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b56a6:	b538      	push	{r3, r4, r5, lr}
   b56a8:	4605      	mov	r5, r0
  return write(str);
   b56aa:	f7ff ffdb 	bl	b5664 <_ZN5Print5writeEPKc>
   b56ae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b56b0:	4628      	mov	r0, r5
   b56b2:	f7ff ffec 	bl	b568e <_ZN5Print7printlnEv>
  return n;
}
   b56b6:	4420      	add	r0, r4
   b56b8:	bd38      	pop	{r3, r4, r5, pc}

000b56ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b56ba:	b530      	push	{r4, r5, lr}
   b56bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b56be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b56c0:	2a01      	cmp	r2, #1
  *str = '\0';
   b56c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b56c6:	bf98      	it	ls
   b56c8:	220a      	movls	r2, #10
   b56ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b56cc:	460d      	mov	r5, r1
   b56ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b56d2:	fb01 5312 	mls	r3, r1, r2, r5
   b56d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56da:	2b09      	cmp	r3, #9
   b56dc:	bf94      	ite	ls
   b56de:	3330      	addls	r3, #48	; 0x30
   b56e0:	3337      	addhi	r3, #55	; 0x37
   b56e2:	b2db      	uxtb	r3, r3
  } while(n);
   b56e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b56ea:	d9ef      	bls.n	b56cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b56ec:	4621      	mov	r1, r4
   b56ee:	f7ff ffb9 	bl	b5664 <_ZN5Print5writeEPKc>
}
   b56f2:	b00b      	add	sp, #44	; 0x2c
   b56f4:	bd30      	pop	{r4, r5, pc}

000b56f6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b56f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56fa:	b086      	sub	sp, #24
   b56fc:	af00      	add	r7, sp, #0
   b56fe:	4605      	mov	r5, r0
   b5700:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5702:	1d38      	adds	r0, r7, #4
   b5704:	2114      	movs	r1, #20
{
   b5706:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5708:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b570a:	f7ff fa67 	bl	b4bdc <vsnprintf>

    if (n<bufsize)
   b570e:	2813      	cmp	r0, #19
   b5710:	d80e      	bhi.n	b5730 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5712:	1d39      	adds	r1, r7, #4
   b5714:	4628      	mov	r0, r5
   b5716:	f7ff ffa5 	bl	b5664 <_ZN5Print5writeEPKc>
   b571a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b571c:	b11e      	cbz	r6, b5726 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b571e:	4628      	mov	r0, r5
   b5720:	f7ff ffb5 	bl	b568e <_ZN5Print7printlnEv>
   b5724:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5726:	4620      	mov	r0, r4
   b5728:	3718      	adds	r7, #24
   b572a:	46bd      	mov	sp, r7
   b572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5730:	f100 0308 	add.w	r3, r0, #8
   b5734:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5738:	46e8      	mov	r8, sp
        char bigger[n+1];
   b573a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b573e:	4622      	mov	r2, r4
   b5740:	1c41      	adds	r1, r0, #1
   b5742:	683b      	ldr	r3, [r7, #0]
   b5744:	4668      	mov	r0, sp
   b5746:	f7ff fa49 	bl	b4bdc <vsnprintf>
  return write(str);
   b574a:	4669      	mov	r1, sp
   b574c:	4628      	mov	r0, r5
   b574e:	f7ff ff89 	bl	b5664 <_ZN5Print5writeEPKc>
   b5752:	4604      	mov	r4, r0
   b5754:	46c5      	mov	sp, r8
   b5756:	e7e1      	b.n	b571c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5758 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5758:	4b01      	ldr	r3, [pc, #4]	; (b5760 <_GLOBAL__sub_I_RGB+0x8>)
   b575a:	2200      	movs	r2, #0
   b575c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b575e:	4770      	bx	lr
   b5760:	2003e6d8 	.word	0x2003e6d8

000b5764 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5764:	b510      	push	{r4, lr}
   b5766:	4604      	mov	r4, r0
   b5768:	4608      	mov	r0, r1
{
    _spi = spi;
   b576a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b576c:	f7ff f8d2 	bl	b4914 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5770:	2300      	movs	r3, #0
   b5772:	6063      	str	r3, [r4, #4]
}
   b5774:	4620      	mov	r0, r4
   b5776:	bd10      	pop	{r4, pc}

000b5778 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5778:	b510      	push	{r4, lr}
   b577a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b577c:	f7ff f85a 	bl	b4834 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5780:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5782:	6823      	ldr	r3, [r4, #0]
   b5784:	4620      	mov	r0, r4
   b5786:	695b      	ldr	r3, [r3, #20]
   b5788:	4798      	blx	r3
    if (c >= 0) return c;
   b578a:	2800      	cmp	r0, #0
   b578c:	da08      	bge.n	b57a0 <_ZN6Stream9timedReadEv+0x28>
   b578e:	f7ff f851 	bl	b4834 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5792:	68e3      	ldr	r3, [r4, #12]
   b5794:	1ac0      	subs	r0, r0, r3
   b5796:	68a3      	ldr	r3, [r4, #8]
   b5798:	4298      	cmp	r0, r3
   b579a:	d3f2      	bcc.n	b5782 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b579c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b57a0:	bd10      	pop	{r4, pc}

000b57a2 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   b57a2:	b510      	push	{r4, lr}
   b57a4:	4604      	mov	r4, r0
   b57a6:	f7ff f845 	bl	b4834 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b57aa:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   b57ac:	6823      	ldr	r3, [r4, #0]
   b57ae:	4620      	mov	r0, r4
   b57b0:	699b      	ldr	r3, [r3, #24]
   b57b2:	4798      	blx	r3
    if (c >= 0) return c;
   b57b4:	2800      	cmp	r0, #0
   b57b6:	da08      	bge.n	b57ca <_ZN6Stream9timedPeekEv+0x28>
   b57b8:	f7ff f83c 	bl	b4834 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b57bc:	68e3      	ldr	r3, [r4, #12]
   b57be:	1ac0      	subs	r0, r0, r3
   b57c0:	68a3      	ldr	r3, [r4, #8]
   b57c2:	4298      	cmp	r0, r3
   b57c4:	d3f2      	bcc.n	b57ac <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   b57c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b57ca:	bd10      	pop	{r4, pc}

000b57cc <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   b57cc:	b510      	push	{r4, lr}
   b57ce:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff ffe6 	bl	b57a2 <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   b57d6:	2800      	cmp	r0, #0
   b57d8:	db0a      	blt.n	b57f0 <_ZN6Stream13peekNextDigitEv+0x24>
   b57da:	282d      	cmp	r0, #45	; 0x2d
   b57dc:	d008      	beq.n	b57f0 <_ZN6Stream13peekNextDigitEv+0x24>
   b57de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b57e2:	2b09      	cmp	r3, #9
   b57e4:	d904      	bls.n	b57f0 <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   b57e6:	6823      	ldr	r3, [r4, #0]
   b57e8:	4620      	mov	r0, r4
   b57ea:	695b      	ldr	r3, [r3, #20]
   b57ec:	4798      	blx	r3
    c = timedPeek();
   b57ee:	e7ef      	b.n	b57d0 <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   b57f0:	bd10      	pop	{r4, pc}

000b57f2 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   b57f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57f6:	4605      	mov	r5, r0
   b57f8:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   b57fa:	f7ff ffe7 	bl	b57cc <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b57fe:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   b5800:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   b5804:	db1c      	blt.n	b5840 <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   b5806:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   b5808:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   b580c:	4286      	cmp	r6, r0
   b580e:	d008      	beq.n	b5822 <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   b5810:	282d      	cmp	r0, #45	; 0x2d
   b5812:	d018      	beq.n	b5846 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   b5814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5818:	2b09      	cmp	r3, #9
   b581a:	d802      	bhi.n	b5822 <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   b581c:	fb08 0404 	mla	r4, r8, r4, r0
   b5820:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   b5822:	682b      	ldr	r3, [r5, #0]
   b5824:	4628      	mov	r0, r5
   b5826:	695b      	ldr	r3, [r3, #20]
   b5828:	4798      	blx	r3
    c = timedPeek();
   b582a:	4628      	mov	r0, r5
   b582c:	f7ff ffb9 	bl	b57a2 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   b5830:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5834:	2b09      	cmp	r3, #9
   b5836:	d9e9      	bls.n	b580c <_ZN6Stream8parseIntEc+0x1a>
   b5838:	4286      	cmp	r6, r0
   b583a:	d0f2      	beq.n	b5822 <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   b583c:	b107      	cbz	r7, b5840 <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   b583e:	4264      	negs	r4, r4
  return value;
}
   b5840:	4620      	mov	r0, r4
   b5842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   b5846:	2701      	movs	r7, #1
   b5848:	e7eb      	b.n	b5822 <_ZN6Stream8parseIntEc+0x30>

000b584a <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   b584a:	2101      	movs	r1, #1
   b584c:	f7ff bfd1 	b.w	b57f2 <_ZN6Stream8parseIntEc>

000b5850 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   b5850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5854:	ed2d 8b02 	vpush	{d8}
   b5858:	4605      	mov	r5, r0
   b585a:	460e      	mov	r6, r1
  bool isNegative = false;
  bool isFraction = false;
  long value = 0;
  float fraction = 1.0;

  int c = peekNextDigit();
   b585c:	f7ff ffb6 	bl	b57cc <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   b5860:	2800      	cmp	r0, #0
   b5862:	db47      	blt.n	b58f4 <_ZN6Stream10parseFloatEc+0xa4>
    } else if (c == '.') {
      isFraction = true;
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
   b5864:	f20f 099c 	addw	r9, pc, #156	; 0x9c
   b5868:	e9d9 8900 	ldrd	r8, r9, [r9]
  long value = 0;
   b586c:	2400      	movs	r4, #0
  float fraction = 1.0;
   b586e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  bool isFraction = false;
   b5872:	4627      	mov	r7, r4
  bool isNegative = false;
   b5874:	46a2      	mov	sl, r4
      value = value * 10 + c - '0';
   b5876:	f04f 0b0a 	mov.w	fp, #10
    if(c == skipChar) {
   b587a:	4286      	cmp	r6, r0
   b587c:	d017      	beq.n	b58ae <_ZN6Stream10parseFloatEc+0x5e>
    } else if(c == '-') {
   b587e:	282d      	cmp	r0, #45	; 0x2d
   b5880:	d033      	beq.n	b58ea <_ZN6Stream10parseFloatEc+0x9a>
    } else if (c == '.') {
   b5882:	282e      	cmp	r0, #46	; 0x2e
   b5884:	d034      	beq.n	b58f0 <_ZN6Stream10parseFloatEc+0xa0>
    } else if(c >= '0' && c <= '9')  {      // is c a digit?
   b5886:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b588a:	2b09      	cmp	r3, #9
   b588c:	d80f      	bhi.n	b58ae <_ZN6Stream10parseFloatEc+0x5e>
      value = value * 10 + c - '0';
   b588e:	fb0b 0404 	mla	r4, fp, r4, r0
   b5892:	3c30      	subs	r4, #48	; 0x30
      if(isFraction)
   b5894:	b15f      	cbz	r7, b58ae <_ZN6Stream10parseFloatEc+0x5e>
         fraction *= 0.1;
   b5896:	ee18 0a10 	vmov	r0, s16
   b589a:	f000 fd73 	bl	b6384 <__aeabi_f2d>
   b589e:	4642      	mov	r2, r8
   b58a0:	464b      	mov	r3, r9
   b58a2:	f000 fdc7 	bl	b6434 <__aeabi_dmul>
   b58a6:	f000 ffd7 	bl	b6858 <__aeabi_d2f>
   b58aa:	ee08 0a10 	vmov	s16, r0
    }
    read();  // consume the character we got with peek
   b58ae:	682b      	ldr	r3, [r5, #0]
   b58b0:	4628      	mov	r0, r5
   b58b2:	695b      	ldr	r3, [r3, #20]
   b58b4:	4798      	blx	r3
    c = timedPeek();
   b58b6:	4628      	mov	r0, r5
   b58b8:	f7ff ff73 	bl	b57a2 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
   b58bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b58c0:	2b09      	cmp	r3, #9
   b58c2:	d9da      	bls.n	b587a <_ZN6Stream10parseFloatEc+0x2a>
   b58c4:	282e      	cmp	r0, #46	; 0x2e
   b58c6:	d0d8      	beq.n	b587a <_ZN6Stream10parseFloatEc+0x2a>
   b58c8:	4286      	cmp	r6, r0
   b58ca:	d0f0      	beq.n	b58ae <_ZN6Stream10parseFloatEc+0x5e>

  if(isNegative)
   b58cc:	f1ba 0f00 	cmp.w	sl, #0
   b58d0:	d000      	beq.n	b58d4 <_ZN6Stream10parseFloatEc+0x84>
    value = -value;
   b58d2:	4264      	negs	r4, r4
  if(isFraction)
    return value * fraction;
   b58d4:	ee07 4a90 	vmov	s15, r4
   b58d8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  if(isFraction)
   b58dc:	b10f      	cbz	r7, b58e2 <_ZN6Stream10parseFloatEc+0x92>
    return value * fraction;
   b58de:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
   b58e2:	ecbd 8b02 	vpop	{d8}
   b58e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      isNegative = true;
   b58ea:	f04f 0a01 	mov.w	sl, #1
   b58ee:	e7de      	b.n	b58ae <_ZN6Stream10parseFloatEc+0x5e>
      isFraction = true;
   b58f0:	2701      	movs	r7, #1
   b58f2:	e7dc      	b.n	b58ae <_ZN6Stream10parseFloatEc+0x5e>
    return 0; // zero returned if timeout
   b58f4:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5900 <_ZN6Stream10parseFloatEc+0xb0>
   b58f8:	e7f3      	b.n	b58e2 <_ZN6Stream10parseFloatEc+0x92>
   b58fa:	bf00      	nop
   b58fc:	f3af 8000 	nop.w
   b5900:	00000000 	.word	0x00000000
   b5904:	9999999a 	.word	0x9999999a
   b5908:	3fb99999 	.word	0x3fb99999

000b590c <_ZN6Stream10parseFloatEv>:
  return parseFloat(NO_SKIP_CHAR);
   b590c:	2101      	movs	r1, #1
   b590e:	f7ff bf9f 	b.w	b5850 <_ZN6Stream10parseFloatEc>
	...

000b5914 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b5914:	b570      	push	{r4, r5, r6, lr}
   b5916:	460d      	mov	r5, r1
  String ret;
   b5918:	4909      	ldr	r1, [pc, #36]	; (b5940 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b591a:	4604      	mov	r4, r0
   b591c:	4616      	mov	r6, r2
  String ret;
   b591e:	f000 f85c 	bl	b59da <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b5922:	4628      	mov	r0, r5
   b5924:	f7ff ff28 	bl	b5778 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b5928:	2800      	cmp	r0, #0
   b592a:	db06      	blt.n	b593a <_ZN6Stream15readStringUntilEc+0x26>
   b592c:	4286      	cmp	r6, r0
   b592e:	d004      	beq.n	b593a <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b5930:	b2c1      	uxtb	r1, r0
   b5932:	4620      	mov	r0, r4
   b5934:	f000 f8bb 	bl	b5aae <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b5938:	e7f3      	b.n	b5922 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b593a:	4620      	mov	r0, r4
   b593c:	bd70      	pop	{r4, r5, r6, pc}
   b593e:	bf00      	nop
   b5940:	000b6c82 	.word	0x000b6c82

000b5944 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5944:	b510      	push	{r4, lr}
   b5946:	4604      	mov	r4, r0
{
	free(buffer);
   b5948:	6800      	ldr	r0, [r0, #0]
   b594a:	f7ff f937 	bl	b4bbc <free>
}
   b594e:	4620      	mov	r0, r4
   b5950:	bd10      	pop	{r4, pc}

000b5952 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5952:	b510      	push	{r4, lr}
   b5954:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5956:	6800      	ldr	r0, [r0, #0]
   b5958:	b108      	cbz	r0, b595e <_ZN6String10invalidateEv+0xc>
   b595a:	f7ff f92f 	bl	b4bbc <free>
	buffer = NULL;
   b595e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5960:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5964:	6023      	str	r3, [r4, #0]
}
   b5966:	bd10      	pop	{r4, pc}

000b5968 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5968:	b538      	push	{r3, r4, r5, lr}
   b596a:	4604      	mov	r4, r0
   b596c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b596e:	6800      	ldr	r0, [r0, #0]
   b5970:	3101      	adds	r1, #1
   b5972:	f7ff f92b 	bl	b4bcc <realloc>
	if (newbuffer) {
   b5976:	b110      	cbz	r0, b597e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5978:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b597c:	2001      	movs	r0, #1
	}
	return 0;
}
   b597e:	bd38      	pop	{r3, r4, r5, pc}

000b5980 <_ZN6String7reserveEj>:
{
   b5980:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5982:	6803      	ldr	r3, [r0, #0]
{
   b5984:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5986:	b123      	cbz	r3, b5992 <_ZN6String7reserveEj+0x12>
   b5988:	6843      	ldr	r3, [r0, #4]
   b598a:	428b      	cmp	r3, r1
   b598c:	d301      	bcc.n	b5992 <_ZN6String7reserveEj+0x12>
   b598e:	2001      	movs	r0, #1
}
   b5990:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff ffe8 	bl	b5968 <_ZN6String12changeBufferEj>
   b5998:	2800      	cmp	r0, #0
   b599a:	d0f9      	beq.n	b5990 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b599c:	68a3      	ldr	r3, [r4, #8]
   b599e:	2b00      	cmp	r3, #0
   b59a0:	d1f5      	bne.n	b598e <_ZN6String7reserveEj+0xe>
   b59a2:	6822      	ldr	r2, [r4, #0]
   b59a4:	7013      	strb	r3, [r2, #0]
   b59a6:	e7f2      	b.n	b598e <_ZN6String7reserveEj+0xe>

000b59a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b59a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b59ac:	4611      	mov	r1, r2
   b59ae:	9201      	str	r2, [sp, #4]
{
   b59b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b59b2:	f7ff ffe5 	bl	b5980 <_ZN6String7reserveEj>
   b59b6:	9a01      	ldr	r2, [sp, #4]
   b59b8:	b928      	cbnz	r0, b59c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b59ba:	4620      	mov	r0, r4
   b59bc:	f7ff ffc9 	bl	b5952 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b59c0:	4620      	mov	r0, r4
   b59c2:	b003      	add	sp, #12
   b59c4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b59c6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b59c8:	4629      	mov	r1, r5
   b59ca:	6820      	ldr	r0, [r4, #0]
   b59cc:	f000 ff9e 	bl	b690c <memcpy>
	buffer[len] = 0;
   b59d0:	6822      	ldr	r2, [r4, #0]
   b59d2:	68a3      	ldr	r3, [r4, #8]
   b59d4:	2100      	movs	r1, #0
   b59d6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b59d8:	e7f2      	b.n	b59c0 <_ZN6String4copyEPKcj+0x18>

000b59da <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b59da:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b59dc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b59de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b59e2:	4604      	mov	r4, r0
	len = 0;
   b59e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b59e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b59e8:	b141      	cbz	r1, b59fc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b59ea:	4608      	mov	r0, r1
   b59ec:	9101      	str	r1, [sp, #4]
   b59ee:	f000 fff6 	bl	b69de <strlen>
   b59f2:	9901      	ldr	r1, [sp, #4]
   b59f4:	4602      	mov	r2, r0
   b59f6:	4620      	mov	r0, r4
   b59f8:	f7ff ffd6 	bl	b59a8 <_ZN6String4copyEPKcj>
}
   b59fc:	4620      	mov	r0, r4
   b59fe:	b002      	add	sp, #8
   b5a00:	bd10      	pop	{r4, pc}

000b5a02 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5a02:	4288      	cmp	r0, r1
{
   b5a04:	b510      	push	{r4, lr}
   b5a06:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5a08:	d005      	beq.n	b5a16 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5a0a:	680b      	ldr	r3, [r1, #0]
   b5a0c:	b12b      	cbz	r3, b5a1a <_ZN6StringaSERKS_+0x18>
   b5a0e:	688a      	ldr	r2, [r1, #8]
   b5a10:	4619      	mov	r1, r3
   b5a12:	f7ff ffc9 	bl	b59a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a16:	4620      	mov	r0, r4
   b5a18:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a1a:	f7ff ff9a 	bl	b5952 <_ZN6String10invalidateEv>
   b5a1e:	e7fa      	b.n	b5a16 <_ZN6StringaSERKS_+0x14>

000b5a20 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5a20:	b510      	push	{r4, lr}
	buffer = NULL;
   b5a22:	2300      	movs	r3, #0
String::String(const String &value)
   b5a24:	4604      	mov	r4, r0
	capacity = 0;
   b5a26:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5a2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5a2c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5a2e:	f7ff ffe8 	bl	b5a02 <_ZN6StringaSERKS_>
}
   b5a32:	4620      	mov	r0, r4
   b5a34:	bd10      	pop	{r4, pc}

000b5a36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5a36:	b513      	push	{r0, r1, r4, lr}
   b5a38:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5a3a:	b159      	cbz	r1, b5a54 <_ZN6StringaSEPKc+0x1e>
   b5a3c:	4608      	mov	r0, r1
   b5a3e:	9101      	str	r1, [sp, #4]
   b5a40:	f000 ffcd 	bl	b69de <strlen>
   b5a44:	9901      	ldr	r1, [sp, #4]
   b5a46:	4602      	mov	r2, r0
   b5a48:	4620      	mov	r0, r4
   b5a4a:	f7ff ffad 	bl	b59a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a4e:	4620      	mov	r0, r4
   b5a50:	b002      	add	sp, #8
   b5a52:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a54:	f7ff ff7d 	bl	b5952 <_ZN6String10invalidateEv>
   b5a58:	e7f9      	b.n	b5a4e <_ZN6StringaSEPKc+0x18>

000b5a5a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5a5a:	b510      	push	{r4, lr}
   b5a5c:	4604      	mov	r4, r0
   b5a5e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5a60:	2300      	movs	r3, #0
	capacity = 0;
   b5a62:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5a66:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5a68:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5a6a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5a6c:	a901      	add	r1, sp, #4
   b5a6e:	f000 f985 	bl	b5d7c <itoa>
	*this = buf;
   b5a72:	a901      	add	r1, sp, #4
   b5a74:	4620      	mov	r0, r4
   b5a76:	f7ff ffde 	bl	b5a36 <_ZN6StringaSEPKc>
}
   b5a7a:	4620      	mov	r0, r4
   b5a7c:	b00a      	add	sp, #40	; 0x28
   b5a7e:	bd10      	pop	{r4, pc}

000b5a80 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5a80:	b570      	push	{r4, r5, r6, lr}
   b5a82:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5a84:	460e      	mov	r6, r1
   b5a86:	b909      	cbnz	r1, b5a8c <_ZN6String6concatEPKcj+0xc>
   b5a88:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5a8a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5a8c:	b16a      	cbz	r2, b5aaa <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5a8e:	6884      	ldr	r4, [r0, #8]
   b5a90:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5a92:	4621      	mov	r1, r4
   b5a94:	f7ff ff74 	bl	b5980 <_ZN6String7reserveEj>
   b5a98:	2800      	cmp	r0, #0
   b5a9a:	d0f5      	beq.n	b5a88 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5a9c:	6828      	ldr	r0, [r5, #0]
   b5a9e:	68ab      	ldr	r3, [r5, #8]
   b5aa0:	4631      	mov	r1, r6
   b5aa2:	4418      	add	r0, r3
   b5aa4:	f000 ff76 	bl	b6994 <strcpy>
	len = newlen;
   b5aa8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5aaa:	2001      	movs	r0, #1
   b5aac:	e7ed      	b.n	b5a8a <_ZN6String6concatEPKcj+0xa>

000b5aae <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5aae:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5ab0:	2300      	movs	r3, #0
	buf[0] = c;
   b5ab2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5ab6:	2201      	movs	r2, #1
   b5ab8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5aba:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5abe:	f7ff ffdf 	bl	b5a80 <_ZN6String6concatEPKcj>
}
   b5ac2:	b003      	add	sp, #12
   b5ac4:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ac8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b5ac8:	6800      	ldr	r0, [r0, #0]
   b5aca:	b108      	cbz	r0, b5ad0 <_ZNK6String5toIntEv+0x8>
   b5acc:	f000 bf1a 	b.w	b6904 <atol>
	return 0;
}
   b5ad0:	4770      	bx	lr
	...

000b5ad4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b5ad4:	b40e      	push	{r1, r2, r3}
   b5ad6:	b570      	push	{r4, r5, r6, lr}
   b5ad8:	b087      	sub	sp, #28
   b5ada:	ad0b      	add	r5, sp, #44	; 0x2c
   b5adc:	4604      	mov	r4, r0
   b5ade:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5ae2:	9201      	str	r2, [sp, #4]
   b5ae4:	462b      	mov	r3, r5
   b5ae6:	2105      	movs	r1, #5
   b5ae8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b5aea:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5aec:	f7ff f876 	bl	b4bdc <vsnprintf>
    va_end(marker);

    String result;
   b5af0:	490b      	ldr	r1, [pc, #44]	; (b5b20 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5af2:	4606      	mov	r6, r0
    String result;
   b5af4:	4620      	mov	r0, r4
   b5af6:	f7ff ff70 	bl	b59da <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b5afa:	4631      	mov	r1, r6
   b5afc:	4620      	mov	r0, r4
   b5afe:	f7ff ff3f 	bl	b5980 <_ZN6String7reserveEj>
    if (result.buffer) {
   b5b02:	6820      	ldr	r0, [r4, #0]
   b5b04:	b130      	cbz	r0, b5b14 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5b06:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5b08:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5b0a:	462b      	mov	r3, r5
   b5b0c:	1c71      	adds	r1, r6, #1
   b5b0e:	f7ff f865 	bl	b4bdc <vsnprintf>
        va_end(marker);
        result.len = n;
   b5b12:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b5b14:	4620      	mov	r0, r4
   b5b16:	b007      	add	sp, #28
   b5b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5b1c:	b003      	add	sp, #12
   b5b1e:	4770      	bx	lr
   b5b20:	000b6c82 	.word	0x000b6c82

000b5b24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b24:	4b05      	ldr	r3, [pc, #20]	; (b5b3c <_GLOBAL__sub_I_System+0x18>)
   b5b26:	2202      	movs	r2, #2
   b5b28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b2a:	4b05      	ldr	r3, [pc, #20]	; (b5b40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b2c:	4a05      	ldr	r2, [pc, #20]	; (b5b44 <_GLOBAL__sub_I_System+0x20>)
   b5b2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b30:	2000      	movs	r0, #0
   b5b32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b36:	f7fe bf75 	b.w	b4a24 <set_system_mode>
   b5b3a:	bf00      	nop
   b5b3c:	2003e6f4 	.word	0x2003e6f4
   b5b40:	2003e6e8 	.word	0x2003e6e8
   b5b44:	ffff0000 	.word	0xffff0000

000b5b48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b48:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b4a:	681a      	ldr	r2, [r3, #0]
   b5b4c:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b4e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b50:	4770      	bx	lr
   b5b52:	bf00      	nop
   b5b54:	2003e5bc 	.word	0x2003e5bc
   b5b58:	2003e6f8 	.word	0x2003e6f8

000b5b5c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5b5c:	4770      	bx	lr

000b5b5e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b5e:	7441      	strb	r1, [r0, #17]
}
   b5b60:	4770      	bx	lr

000b5b62 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5b62:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5b64:	7c00      	ldrb	r0, [r0, #16]
   b5b66:	f7fe ff15 	bl	b4994 <hal_usart_available_data_for_write>
}
   b5b6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b6e:	bd08      	pop	{r3, pc}

000b5b70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b70:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b72:	7c00      	ldrb	r0, [r0, #16]
   b5b74:	f7fe fee6 	bl	b4944 <hal_usart_available>
}
   b5b78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b7c:	bd08      	pop	{r3, pc}

000b5b7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b80:	7c00      	ldrb	r0, [r0, #16]
   b5b82:	f7fe feef 	bl	b4964 <hal_usart_peek>
}
   b5b86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b8a:	bd08      	pop	{r3, pc}

000b5b8c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5b8c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5b8e:	7c00      	ldrb	r0, [r0, #16]
   b5b90:	f7fe fee0 	bl	b4954 <hal_usart_read>
}
   b5b94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b98:	bd08      	pop	{r3, pc}

000b5b9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5b9a:	7c00      	ldrb	r0, [r0, #16]
   b5b9c:	f7fe beea 	b.w	b4974 <hal_usart_flush>

000b5ba0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ba2:	7c45      	ldrb	r5, [r0, #17]
{
   b5ba4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ba6:	b12d      	cbz	r5, b5bb4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ba8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5baa:	b003      	add	sp, #12
   b5bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5bb0:	f7fe bec0 	b.w	b4934 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bb4:	7c00      	ldrb	r0, [r0, #16]
   b5bb6:	9101      	str	r1, [sp, #4]
   b5bb8:	f7fe feec 	bl	b4994 <hal_usart_available_data_for_write>
   b5bbc:	2800      	cmp	r0, #0
   b5bbe:	9901      	ldr	r1, [sp, #4]
   b5bc0:	dcf2      	bgt.n	b5ba8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5bc2:	4628      	mov	r0, r5
   b5bc4:	b003      	add	sp, #12
   b5bc6:	bd30      	pop	{r4, r5, pc}

000b5bc8 <_ZN11USARTSerialD0Ev>:
   b5bc8:	b510      	push	{r4, lr}
   b5bca:	2114      	movs	r1, #20
   b5bcc:	4604      	mov	r4, r0
   b5bce:	f7fe fa66 	bl	b409e <_ZdlPvj>
   b5bd2:	4620      	mov	r0, r4
   b5bd4:	bd10      	pop	{r4, pc}
	...

000b5bd8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5bd8:	b510      	push	{r4, lr}
   b5bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bde:	4604      	mov	r4, r0
   b5be0:	4608      	mov	r0, r1
   b5be2:	4611      	mov	r1, r2
   b5be4:	2200      	movs	r2, #0
   b5be6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bea:	4b04      	ldr	r3, [pc, #16]	; (b5bfc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5bec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5bee:	2301      	movs	r3, #1
  _serial = serial;
   b5bf0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5bf2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5bf4:	f7fe fede 	bl	b49b4 <hal_usart_init_ex>
}
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}
   b5bfc:	000b6e88 	.word	0x000b6e88

000b5c00 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5c00:	7c00      	ldrb	r0, [r0, #16]
   b5c02:	2300      	movs	r3, #0
   b5c04:	f7fe bece 	b.w	b49a4 <hal_usart_begin_config>

000b5c08 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5c08:	2200      	movs	r2, #0
   b5c0a:	f7ff bff9 	b.w	b5c00 <_ZN11USARTSerial5beginEmm>

000b5c0e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c0e:	7441      	strb	r1, [r0, #17]
}
   b5c10:	4770      	bx	lr

000b5c12 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c12:	4770      	bx	lr

000b5c14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c14:	4770      	bx	lr

000b5c16 <_ZN9USBSerial4readEv>:
{
   b5c16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c18:	2100      	movs	r1, #0
   b5c1a:	7c00      	ldrb	r0, [r0, #16]
   b5c1c:	f7fe feea 	bl	b49f4 <HAL_USB_USART_Receive_Data>
}
   b5c20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c24:	bd08      	pop	{r3, pc}

000b5c26 <_ZN9USBSerial4peekEv>:
{
   b5c26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c28:	2101      	movs	r1, #1
   b5c2a:	7c00      	ldrb	r0, [r0, #16]
   b5c2c:	f7fe fee2 	bl	b49f4 <HAL_USB_USART_Receive_Data>
}
   b5c30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c34:	bd08      	pop	{r3, pc}

000b5c36 <_ZN9USBSerial17availableForWriteEv>:
{
   b5c36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c38:	7c00      	ldrb	r0, [r0, #16]
   b5c3a:	f7fe fed3 	bl	b49e4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c42:	bd08      	pop	{r3, pc}

000b5c44 <_ZN9USBSerial9availableEv>:
{
   b5c44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c46:	7c00      	ldrb	r0, [r0, #16]
   b5c48:	f7fe fec4 	bl	b49d4 <HAL_USB_USART_Available_Data>
}
   b5c4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c50:	bd08      	pop	{r3, pc}

000b5c52 <_ZN9USBSerial5writeEh>:
{
   b5c52:	b513      	push	{r0, r1, r4, lr}
   b5c54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c56:	7c00      	ldrb	r0, [r0, #16]
{
   b5c58:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c5a:	f7fe fec3 	bl	b49e4 <HAL_USB_USART_Available_Data_For_Write>
   b5c5e:	2800      	cmp	r0, #0
   b5c60:	9901      	ldr	r1, [sp, #4]
   b5c62:	dc01      	bgt.n	b5c68 <_ZN9USBSerial5writeEh+0x16>
   b5c64:	7c60      	ldrb	r0, [r4, #17]
   b5c66:	b120      	cbz	r0, b5c72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5c68:	7c20      	ldrb	r0, [r4, #16]
   b5c6a:	f7fe fecb 	bl	b4a04 <HAL_USB_USART_Send_Data>
   b5c6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5c72:	b002      	add	sp, #8
   b5c74:	bd10      	pop	{r4, pc}

000b5c76 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5c76:	7c00      	ldrb	r0, [r0, #16]
   b5c78:	f7fe becc 	b.w	b4a14 <HAL_USB_USART_Flush_Data>

000b5c7c <_ZN9USBSerialD0Ev>:
   b5c7c:	b510      	push	{r4, lr}
   b5c7e:	2114      	movs	r1, #20
   b5c80:	4604      	mov	r4, r0
   b5c82:	f7fe fa0c 	bl	b409e <_ZdlPvj>
   b5c86:	4620      	mov	r0, r4
   b5c88:	bd10      	pop	{r4, pc}
	...

000b5c8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c8c:	b510      	push	{r4, lr}
   b5c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c92:	4604      	mov	r4, r0
   b5c94:	4608      	mov	r0, r1
   b5c96:	2100      	movs	r1, #0
   b5c98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5c9c:	4b04      	ldr	r3, [pc, #16]	; (b5cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5c9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ca0:	2301      	movs	r3, #1
  _serial = serial;
   b5ca2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ca4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5ca6:	4611      	mov	r1, r2
   b5ca8:	f7fe fe8c 	bl	b49c4 <HAL_USB_USART_Init>
}
   b5cac:	4620      	mov	r0, r4
   b5cae:	bd10      	pop	{r4, pc}
   b5cb0:	000b6eb8 	.word	0x000b6eb8

000b5cb4 <_Z19acquireSerialBufferv>:
{
   b5cb4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5cb6:	2214      	movs	r2, #20
{
   b5cb8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5cba:	2100      	movs	r1, #0
   b5cbc:	f000 fe34 	bl	b6928 <memset>
}
   b5cc0:	4620      	mov	r0, r4
   b5cc2:	bd10      	pop	{r4, pc}

000b5cc4 <_Z16_fetch_usbserialv>:
{
   b5cc4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cc6:	4c0f      	ldr	r4, [pc, #60]	; (b5d04 <_Z16_fetch_usbserialv+0x40>)
{
   b5cc8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5cca:	a803      	add	r0, sp, #12
   b5ccc:	f7ff fff2 	bl	b5cb4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cd0:	7821      	ldrb	r1, [r4, #0]
   b5cd2:	f3bf 8f5b 	dmb	ish
   b5cd6:	f011 0101 	ands.w	r1, r1, #1
   b5cda:	d10f      	bne.n	b5cfc <_Z16_fetch_usbserialv+0x38>
   b5cdc:	4620      	mov	r0, r4
   b5cde:	9101      	str	r1, [sp, #4]
   b5ce0:	f7fe f9df 	bl	b40a2 <__cxa_guard_acquire>
   b5ce4:	9901      	ldr	r1, [sp, #4]
   b5ce6:	b148      	cbz	r0, b5cfc <_Z16_fetch_usbserialv+0x38>
   b5ce8:	aa03      	add	r2, sp, #12
   b5cea:	4807      	ldr	r0, [pc, #28]	; (b5d08 <_Z16_fetch_usbserialv+0x44>)
   b5cec:	f7ff ffce 	bl	b5c8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	f7fe f9db 	bl	b40ac <__cxa_guard_release>
   b5cf6:	4805      	ldr	r0, [pc, #20]	; (b5d0c <_Z16_fetch_usbserialv+0x48>)
   b5cf8:	f000 fdfe 	bl	b68f8 <atexit>
	return _usbserial;
}
   b5cfc:	4802      	ldr	r0, [pc, #8]	; (b5d08 <_Z16_fetch_usbserialv+0x44>)
   b5cfe:	b008      	add	sp, #32
   b5d00:	bd10      	pop	{r4, pc}
   b5d02:	bf00      	nop
   b5d04:	2003e6fc 	.word	0x2003e6fc
   b5d08:	2003e700 	.word	0x2003e700
   b5d0c:	000b5c13 	.word	0x000b5c13

000b5d10 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5d10:	b510      	push	{r4, lr}
   b5d12:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5d14:	f000 fe63 	bl	b69de <strlen>
   b5d18:	3801      	subs	r0, #1
   b5d1a:	1823      	adds	r3, r4, r0
   b5d1c:	4620      	mov	r0, r4
	while(i<j){
   b5d1e:	4283      	cmp	r3, r0
   b5d20:	d906      	bls.n	b5d30 <_Z11str_reversePc+0x20>
		c = *i;
   b5d22:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5d24:	7819      	ldrb	r1, [r3, #0]
   b5d26:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5d2a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5d2e:	e7f6      	b.n	b5d1e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5d30:	bd10      	pop	{r4, pc}

000b5d32 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5d32:	b570      	push	{r4, r5, r6, lr}
   b5d34:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5d36:	1e91      	subs	r1, r2, #2
   b5d38:	2922      	cmp	r1, #34	; 0x22
   b5d3a:	d81d      	bhi.n	b5d78 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5d3c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5d3e:	b930      	cbnz	r0, b5d4e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5d40:	4423      	add	r3, r4
            *ptr++ = '0';
   b5d42:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5d44:	429d      	cmp	r5, r3
   b5d46:	d210      	bcs.n	b5d6a <ultoa+0x38>
            *ptr++ = '0';
   b5d48:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5d4c:	e7fa      	b.n	b5d44 <ultoa+0x12>
            result.quot = a/radix;
   b5d4e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5d52:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5d56:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5d58:	2809      	cmp	r0, #9
                *ptr += '0';
   b5d5a:	bf94      	ite	ls
   b5d5c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5d5e:	3157      	addhi	r1, #87	; 0x57
   b5d60:	b2c9      	uxtb	r1, r1
   b5d62:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5d66:	4630      	mov	r0, r6
	while(a){
   b5d68:	e7e9      	b.n	b5d3e <ultoa+0xc>

	*ptr = '\0';
   b5d6a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5d6c:	4620      	mov	r0, r4
	*ptr = '\0';
   b5d6e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5d70:	f7ff ffce 	bl	b5d10 <_Z11str_reversePc>
	return buffer;
   b5d74:	4620      	mov	r0, r4
}
   b5d76:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5d78:	2000      	movs	r0, #0
   b5d7a:	e7fc      	b.n	b5d76 <ultoa+0x44>

000b5d7c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5d7c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5d7e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5d80:	460c      	mov	r4, r1
   b5d82:	4615      	mov	r5, r2
	if(a<0){
   b5d84:	da0e      	bge.n	b5da4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5d8a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5d8e:	bf14      	ite	ne
   b5d90:	4258      	negne	r0, r3
   b5d92:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5d94:	2301      	movs	r3, #1
		*buffer = '-';
   b5d96:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5d98:	462a      	mov	r2, r5
   b5d9a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5d9c:	f7ff ffc9 	bl	b5d32 <ultoa>
	}
	return buffer;
}
   b5da0:	4620      	mov	r0, r4
   b5da2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5da4:	2301      	movs	r3, #1
   b5da6:	e7f9      	b.n	b5d9c <itoa+0x20>

000b5da8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5da8:	4b01      	ldr	r3, [pc, #4]	; (b5db0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5daa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5dac:	4770      	bx	lr
   b5dae:	bf00      	nop
   b5db0:	2003e5c0 	.word	0x2003e5c0

000b5db4 <serialEventRun>:
{
   b5db4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5db6:	4b0b      	ldr	r3, [pc, #44]	; (b5de4 <serialEventRun+0x30>)
   b5db8:	b143      	cbz	r3, b5dcc <serialEventRun+0x18>
   b5dba:	f7ff ff83 	bl	b5cc4 <_Z16_fetch_usbserialv>
   b5dbe:	6803      	ldr	r3, [r0, #0]
   b5dc0:	691b      	ldr	r3, [r3, #16]
   b5dc2:	4798      	blx	r3
   b5dc4:	2800      	cmp	r0, #0
   b5dc6:	dd01      	ble.n	b5dcc <serialEventRun+0x18>
        serialEvent();
   b5dc8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5dcc:	4b06      	ldr	r3, [pc, #24]	; (b5de8 <serialEventRun+0x34>)
   b5dce:	b143      	cbz	r3, b5de2 <serialEventRun+0x2e>
   b5dd0:	f000 f94a 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b5dd4:	6803      	ldr	r3, [r0, #0]
   b5dd6:	691b      	ldr	r3, [r3, #16]
   b5dd8:	4798      	blx	r3
   b5dda:	2800      	cmp	r0, #0
   b5ddc:	dd01      	ble.n	b5de2 <serialEventRun+0x2e>
        serialEvent1();
   b5dde:	f3af 8000 	nop.w
}
   b5de2:	bd08      	pop	{r3, pc}
	...

000b5dec <_post_loop>:
{
   b5dec:	b508      	push	{r3, lr}
	serialEventRun();
   b5dee:	f7ff ffe1 	bl	b5db4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5df2:	f7fe fd1f 	bl	b4834 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5df6:	4b01      	ldr	r3, [pc, #4]	; (b5dfc <_post_loop+0x10>)
   b5df8:	6018      	str	r0, [r3, #0]
}
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	2003e728 	.word	0x2003e728

000b5e00 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e00:	4805      	ldr	r0, [pc, #20]	; (b5e18 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e02:	4a06      	ldr	r2, [pc, #24]	; (b5e1c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e04:	4906      	ldr	r1, [pc, #24]	; (b5e20 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e06:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e08:	1a12      	subs	r2, r2, r0
   b5e0a:	f000 fd7f 	bl	b690c <memcpy>
    __backup_sram_signature = signature;
   b5e0e:	4b05      	ldr	r3, [pc, #20]	; (b5e24 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e10:	4a05      	ldr	r2, [pc, #20]	; (b5e28 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e12:	601a      	str	r2, [r3, #0]
}
   b5e14:	bd08      	pop	{r3, pc}
   b5e16:	bf00      	nop
   b5e18:	2003f400 	.word	0x2003f400
   b5e1c:	2003f404 	.word	0x2003f404
   b5e20:	000b70a4 	.word	0x000b70a4
   b5e24:	2003f400 	.word	0x2003f400
   b5e28:	9a271c1e 	.word	0x9a271c1e

000b5e2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5e2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e2e:	2300      	movs	r3, #0
   b5e30:	9300      	str	r3, [sp, #0]
   b5e32:	461a      	mov	r2, r3
   b5e34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e38:	f7fe fe26 	bl	b4a88 <system_ctrl_set_result>
}
   b5e3c:	b003      	add	sp, #12
   b5e3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e44 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e46:	8843      	ldrh	r3, [r0, #2]
   b5e48:	2b0a      	cmp	r3, #10
   b5e4a:	d008      	beq.n	b5e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e4c:	2b50      	cmp	r3, #80	; 0x50
   b5e4e:	d10b      	bne.n	b5e68 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e50:	4b09      	ldr	r3, [pc, #36]	; (b5e78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e52:	681b      	ldr	r3, [r3, #0]
   b5e54:	b14b      	cbz	r3, b5e6a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e56:	b003      	add	sp, #12
   b5e58:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e5c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e5e:	f7ff ffe5 	bl	b5e2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e62:	b003      	add	sp, #12
   b5e64:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e68:	2300      	movs	r3, #0
   b5e6a:	9300      	str	r3, [sp, #0]
   b5e6c:	461a      	mov	r2, r3
   b5e6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e72:	f7fe fe09 	bl	b4a88 <system_ctrl_set_result>
}
   b5e76:	e7f4      	b.n	b5e62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5e78:	2003e718 	.word	0x2003e718

000b5e7c <module_user_init_hook>:
{
   b5e7c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5e7e:	4812      	ldr	r0, [pc, #72]	; (b5ec8 <module_user_init_hook+0x4c>)
   b5e80:	2100      	movs	r1, #0
   b5e82:	f7fe fed3 	bl	b4c2c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5e86:	4b11      	ldr	r3, [pc, #68]	; (b5ecc <module_user_init_hook+0x50>)
   b5e88:	681a      	ldr	r2, [r3, #0]
   b5e8a:	4b11      	ldr	r3, [pc, #68]	; (b5ed0 <module_user_init_hook+0x54>)
   b5e8c:	429a      	cmp	r2, r3
   b5e8e:	4b11      	ldr	r3, [pc, #68]	; (b5ed4 <module_user_init_hook+0x58>)
   b5e90:	bf0c      	ite	eq
   b5e92:	2201      	moveq	r2, #1
   b5e94:	2200      	movne	r2, #0
   b5e96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5e98:	d001      	beq.n	b5e9e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5e9a:	f7ff ffb1 	bl	b5e00 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5e9e:	f7fe fcc1 	bl	b4824 <HAL_RNG_GetRandomNumber>
   b5ea2:	4604      	mov	r4, r0
    srand(seed);
   b5ea4:	f000 fd48 	bl	b6938 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ea8:	4b0b      	ldr	r3, [pc, #44]	; (b5ed8 <module_user_init_hook+0x5c>)
   b5eaa:	b113      	cbz	r3, b5eb2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5eac:	4620      	mov	r0, r4
   b5eae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5eb2:	2100      	movs	r1, #0
   b5eb4:	4808      	ldr	r0, [pc, #32]	; (b5ed8 <module_user_init_hook+0x5c>)
   b5eb6:	f7fe fe11 	bl	b4adc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ebe:	4807      	ldr	r0, [pc, #28]	; (b5edc <module_user_init_hook+0x60>)
   b5ec0:	2100      	movs	r1, #0
   b5ec2:	f7fe bdd7 	b.w	b4a74 <system_ctrl_set_app_request_handler>
   b5ec6:	bf00      	nop
   b5ec8:	000b5da9 	.word	0x000b5da9
   b5ecc:	2003f400 	.word	0x2003f400
   b5ed0:	9a271c1e 	.word	0x9a271c1e
   b5ed4:	2003e714 	.word	0x2003e714
   b5ed8:	00000000 	.word	0x00000000
   b5edc:	000b5e45 	.word	0x000b5e45

000b5ee0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5ee0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5ee2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5ee4:	d902      	bls.n	b5eec <pinAvailable+0xc>
    return false;
   b5ee6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ee8:	b002      	add	sp, #8
   b5eea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5eec:	f1a0 030b 	sub.w	r3, r0, #11
   b5ef0:	2b02      	cmp	r3, #2
   b5ef2:	d81a      	bhi.n	b5f2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5ef4:	4c17      	ldr	r4, [pc, #92]	; (b5f54 <pinAvailable+0x74>)
   b5ef6:	7821      	ldrb	r1, [r4, #0]
   b5ef8:	f3bf 8f5b 	dmb	ish
   b5efc:	f011 0101 	ands.w	r1, r1, #1
   b5f00:	d10b      	bne.n	b5f1a <pinAvailable+0x3a>
   b5f02:	4620      	mov	r0, r4
   b5f04:	9101      	str	r1, [sp, #4]
   b5f06:	f7fe f8cc 	bl	b40a2 <__cxa_guard_acquire>
   b5f0a:	9901      	ldr	r1, [sp, #4]
   b5f0c:	b128      	cbz	r0, b5f1a <pinAvailable+0x3a>
   b5f0e:	4812      	ldr	r0, [pc, #72]	; (b5f58 <pinAvailable+0x78>)
   b5f10:	f7ff fc28 	bl	b5764 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f14:	4620      	mov	r0, r4
   b5f16:	f7fe f8c9 	bl	b40ac <__cxa_guard_release>
   b5f1a:	4b0f      	ldr	r3, [pc, #60]	; (b5f58 <pinAvailable+0x78>)
   b5f1c:	7818      	ldrb	r0, [r3, #0]
   b5f1e:	f7fe fd01 	bl	b4924 <hal_spi_is_enabled>
   b5f22:	2800      	cmp	r0, #0
   b5f24:	d1df      	bne.n	b5ee6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f26:	2001      	movs	r0, #1
   b5f28:	e7de      	b.n	b5ee8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f2a:	2801      	cmp	r0, #1
   b5f2c:	d809      	bhi.n	b5f42 <pinAvailable+0x62>
   b5f2e:	f000 f85b 	bl	b5fe8 <_Z19__fetch_global_Wirev>
   b5f32:	2100      	movs	r1, #0
   b5f34:	7c00      	ldrb	r0, [r0, #16]
   b5f36:	f7fe fcc5 	bl	b48c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5f3a:	f080 0001 	eor.w	r0, r0, #1
   b5f3e:	b2c0      	uxtb	r0, r0
   b5f40:	e7d2      	b.n	b5ee8 <pinAvailable+0x8>
   b5f42:	3809      	subs	r0, #9
   b5f44:	2801      	cmp	r0, #1
   b5f46:	d8ee      	bhi.n	b5f26 <pinAvailable+0x46>
   b5f48:	f000 f88e 	bl	b6068 <_Z22__fetch_global_Serial1v>
   b5f4c:	7c00      	ldrb	r0, [r0, #16]
   b5f4e:	f7fe fd19 	bl	b4984 <hal_usart_is_enabled>
   b5f52:	e7f2      	b.n	b5f3a <pinAvailable+0x5a>
   b5f54:	2003e71c 	.word	0x2003e71c
   b5f58:	2003e720 	.word	0x2003e720

000b5f5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f5c:	2823      	cmp	r0, #35	; 0x23
{
   b5f5e:	b538      	push	{r3, r4, r5, lr}
   b5f60:	4604      	mov	r4, r0
   b5f62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f64:	d80a      	bhi.n	b5f7c <pinMode+0x20>
   b5f66:	29ff      	cmp	r1, #255	; 0xff
   b5f68:	d008      	beq.n	b5f7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5f6a:	f7ff ffb9 	bl	b5ee0 <pinAvailable>
   b5f6e:	b128      	cbz	r0, b5f7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5f70:	4629      	mov	r1, r5
   b5f72:	4620      	mov	r0, r4
}
   b5f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5f78:	f7fe bc64 	b.w	b4844 <HAL_Pin_Mode>
}
   b5f7c:	bd38      	pop	{r3, r4, r5, pc}

000b5f7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5f7e:	b538      	push	{r3, r4, r5, lr}
   b5f80:	4604      	mov	r4, r0
   b5f82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5f84:	f7fe fc66 	bl	b4854 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5f88:	28ff      	cmp	r0, #255	; 0xff
   b5f8a:	d010      	beq.n	b5fae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5f8c:	2806      	cmp	r0, #6
   b5f8e:	d804      	bhi.n	b5f9a <digitalWrite+0x1c>
   b5f90:	234d      	movs	r3, #77	; 0x4d
   b5f92:	fa23 f000 	lsr.w	r0, r3, r0
   b5f96:	07c3      	lsls	r3, r0, #31
   b5f98:	d409      	bmi.n	b5fae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f7ff ffa0 	bl	b5ee0 <pinAvailable>
   b5fa0:	b128      	cbz	r0, b5fae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5fa2:	4629      	mov	r1, r5
   b5fa4:	4620      	mov	r0, r4
}
   b5fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5faa:	f7fe bc5b 	b.w	b4864 <HAL_GPIO_Write>
}
   b5fae:	bd38      	pop	{r3, r4, r5, pc}

000b5fb0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fb0:	4770      	bx	lr
	...

000b5fb4 <_Z17acquireWireBufferv>:
{
   b5fb4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5fb6:	4b0a      	ldr	r3, [pc, #40]	; (b5fe0 <_Z17acquireWireBufferv+0x2c>)
   b5fb8:	6003      	str	r3, [r0, #0]
   b5fba:	2301      	movs	r3, #1
{
   b5fbc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5fbe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fc0:	4908      	ldr	r1, [pc, #32]	; (b5fe4 <_Z17acquireWireBufferv+0x30>)
   b5fc2:	2020      	movs	r0, #32
   b5fc4:	f000 f874 	bl	b60b0 <_ZnajRKSt9nothrow_t>
	};
   b5fc8:	2520      	movs	r5, #32
   b5fca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fcc:	4905      	ldr	r1, [pc, #20]	; (b5fe4 <_Z17acquireWireBufferv+0x30>)
	};
   b5fce:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fd0:	4628      	mov	r0, r5
   b5fd2:	f000 f86d 	bl	b60b0 <_ZnajRKSt9nothrow_t>
	};
   b5fd6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5fda:	4620      	mov	r0, r4
   b5fdc:	bd38      	pop	{r3, r4, r5, pc}
   b5fde:	bf00      	nop
   b5fe0:	00010018 	.word	0x00010018
   b5fe4:	000b6ee0 	.word	0x000b6ee0

000b5fe8 <_Z19__fetch_global_Wirev>:
{
   b5fe8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fea:	4d0e      	ldr	r5, [pc, #56]	; (b6024 <_Z19__fetch_global_Wirev+0x3c>)
   b5fec:	7829      	ldrb	r1, [r5, #0]
   b5fee:	f3bf 8f5b 	dmb	ish
   b5ff2:	f011 0401 	ands.w	r4, r1, #1
{
   b5ff6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ff8:	d111      	bne.n	b601e <_Z19__fetch_global_Wirev+0x36>
   b5ffa:	4628      	mov	r0, r5
   b5ffc:	f7fe f851 	bl	b40a2 <__cxa_guard_acquire>
   b6000:	b168      	cbz	r0, b601e <_Z19__fetch_global_Wirev+0x36>
   b6002:	4668      	mov	r0, sp
   b6004:	f7ff ffd6 	bl	b5fb4 <_Z17acquireWireBufferv>
   b6008:	466a      	mov	r2, sp
   b600a:	4621      	mov	r1, r4
   b600c:	4806      	ldr	r0, [pc, #24]	; (b6028 <_Z19__fetch_global_Wirev+0x40>)
   b600e:	f7ff f9c3 	bl	b5398 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6012:	4628      	mov	r0, r5
   b6014:	f7fe f84a 	bl	b40ac <__cxa_guard_release>
   b6018:	4804      	ldr	r0, [pc, #16]	; (b602c <_Z19__fetch_global_Wirev+0x44>)
   b601a:	f000 fc6d 	bl	b68f8 <atexit>
	return wire;
}
   b601e:	4802      	ldr	r0, [pc, #8]	; (b6028 <_Z19__fetch_global_Wirev+0x40>)
   b6020:	b007      	add	sp, #28
   b6022:	bd30      	pop	{r4, r5, pc}
   b6024:	2003e72c 	.word	0x2003e72c
   b6028:	2003e730 	.word	0x2003e730
   b602c:	000b5fb1 	.word	0x000b5fb1

000b6030 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6030:	4770      	bx	lr
	...

000b6034 <_Z20acquireSerial1Bufferv>:
{
   b6034:	b538      	push	{r3, r4, r5, lr}
   b6036:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6038:	2514      	movs	r5, #20
   b603a:	462a      	mov	r2, r5
   b603c:	2100      	movs	r1, #0
   b603e:	f000 fc73 	bl	b6928 <memset>
   b6042:	8025      	strh	r5, [r4, #0]
   b6044:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6046:	4907      	ldr	r1, [pc, #28]	; (b6064 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6048:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b604a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b604c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b604e:	f000 f82f 	bl	b60b0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6052:	4904      	ldr	r1, [pc, #16]	; (b6064 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6054:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6056:	4628      	mov	r0, r5
   b6058:	f000 f82a 	bl	b60b0 <_ZnajRKSt9nothrow_t>
    };
   b605c:	60e0      	str	r0, [r4, #12]
}
   b605e:	4620      	mov	r0, r4
   b6060:	bd38      	pop	{r3, r4, r5, pc}
   b6062:	bf00      	nop
   b6064:	000b6ee0 	.word	0x000b6ee0

000b6068 <_Z22__fetch_global_Serial1v>:
{
   b6068:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b606a:	4d0e      	ldr	r5, [pc, #56]	; (b60a4 <_Z22__fetch_global_Serial1v+0x3c>)
   b606c:	7829      	ldrb	r1, [r5, #0]
   b606e:	f3bf 8f5b 	dmb	ish
   b6072:	f011 0401 	ands.w	r4, r1, #1
{
   b6076:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6078:	d111      	bne.n	b609e <_Z22__fetch_global_Serial1v+0x36>
   b607a:	4628      	mov	r0, r5
   b607c:	f7fe f811 	bl	b40a2 <__cxa_guard_acquire>
   b6080:	b168      	cbz	r0, b609e <_Z22__fetch_global_Serial1v+0x36>
   b6082:	a801      	add	r0, sp, #4
   b6084:	f7ff ffd6 	bl	b6034 <_Z20acquireSerial1Bufferv>
   b6088:	aa01      	add	r2, sp, #4
   b608a:	4621      	mov	r1, r4
   b608c:	4806      	ldr	r0, [pc, #24]	; (b60a8 <_Z22__fetch_global_Serial1v+0x40>)
   b608e:	f7ff fda3 	bl	b5bd8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6092:	4628      	mov	r0, r5
   b6094:	f7fe f80a 	bl	b40ac <__cxa_guard_release>
   b6098:	4804      	ldr	r0, [pc, #16]	; (b60ac <_Z22__fetch_global_Serial1v+0x44>)
   b609a:	f000 fc2d 	bl	b68f8 <atexit>
    return serial1;
}
   b609e:	4802      	ldr	r0, [pc, #8]	; (b60a8 <_Z22__fetch_global_Serial1v+0x40>)
   b60a0:	b007      	add	sp, #28
   b60a2:	bd30      	pop	{r4, r5, pc}
   b60a4:	2003e744 	.word	0x2003e744
   b60a8:	2003e748 	.word	0x2003e748
   b60ac:	000b6031 	.word	0x000b6031

000b60b0 <_ZnajRKSt9nothrow_t>:
   b60b0:	f7fd bff3 	b.w	b409a <_Znaj>

000b60b4 <_ZSt25__throw_bad_function_callv>:
   b60b4:	b508      	push	{r3, lr}
   b60b6:	f7fe fd99 	bl	b4bec <abort>
	...

000b60bc <__aeabi_drsub>:
   b60bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b60c0:	e002      	b.n	b60c8 <__adddf3>
   b60c2:	bf00      	nop

000b60c4 <__aeabi_dsub>:
   b60c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b60c8 <__adddf3>:
   b60c8:	b530      	push	{r4, r5, lr}
   b60ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b60ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b60d2:	ea94 0f05 	teq	r4, r5
   b60d6:	bf08      	it	eq
   b60d8:	ea90 0f02 	teqeq	r0, r2
   b60dc:	bf1f      	itttt	ne
   b60de:	ea54 0c00 	orrsne.w	ip, r4, r0
   b60e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b60e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b60ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b60ee:	f000 80e2 	beq.w	b62b6 <__adddf3+0x1ee>
   b60f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b60f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b60fa:	bfb8      	it	lt
   b60fc:	426d      	neglt	r5, r5
   b60fe:	dd0c      	ble.n	b611a <__adddf3+0x52>
   b6100:	442c      	add	r4, r5
   b6102:	ea80 0202 	eor.w	r2, r0, r2
   b6106:	ea81 0303 	eor.w	r3, r1, r3
   b610a:	ea82 0000 	eor.w	r0, r2, r0
   b610e:	ea83 0101 	eor.w	r1, r3, r1
   b6112:	ea80 0202 	eor.w	r2, r0, r2
   b6116:	ea81 0303 	eor.w	r3, r1, r3
   b611a:	2d36      	cmp	r5, #54	; 0x36
   b611c:	bf88      	it	hi
   b611e:	bd30      	pophi	{r4, r5, pc}
   b6120:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6124:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6128:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b612c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6130:	d002      	beq.n	b6138 <__adddf3+0x70>
   b6132:	4240      	negs	r0, r0
   b6134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6138:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b613c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6140:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6144:	d002      	beq.n	b614c <__adddf3+0x84>
   b6146:	4252      	negs	r2, r2
   b6148:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b614c:	ea94 0f05 	teq	r4, r5
   b6150:	f000 80a7 	beq.w	b62a2 <__adddf3+0x1da>
   b6154:	f1a4 0401 	sub.w	r4, r4, #1
   b6158:	f1d5 0e20 	rsbs	lr, r5, #32
   b615c:	db0d      	blt.n	b617a <__adddf3+0xb2>
   b615e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6162:	fa22 f205 	lsr.w	r2, r2, r5
   b6166:	1880      	adds	r0, r0, r2
   b6168:	f141 0100 	adc.w	r1, r1, #0
   b616c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6170:	1880      	adds	r0, r0, r2
   b6172:	fa43 f305 	asr.w	r3, r3, r5
   b6176:	4159      	adcs	r1, r3
   b6178:	e00e      	b.n	b6198 <__adddf3+0xd0>
   b617a:	f1a5 0520 	sub.w	r5, r5, #32
   b617e:	f10e 0e20 	add.w	lr, lr, #32
   b6182:	2a01      	cmp	r2, #1
   b6184:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6188:	bf28      	it	cs
   b618a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b618e:	fa43 f305 	asr.w	r3, r3, r5
   b6192:	18c0      	adds	r0, r0, r3
   b6194:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b619c:	d507      	bpl.n	b61ae <__adddf3+0xe6>
   b619e:	f04f 0e00 	mov.w	lr, #0
   b61a2:	f1dc 0c00 	rsbs	ip, ip, #0
   b61a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b61aa:	eb6e 0101 	sbc.w	r1, lr, r1
   b61ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b61b2:	d31b      	bcc.n	b61ec <__adddf3+0x124>
   b61b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b61b8:	d30c      	bcc.n	b61d4 <__adddf3+0x10c>
   b61ba:	0849      	lsrs	r1, r1, #1
   b61bc:	ea5f 0030 	movs.w	r0, r0, rrx
   b61c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b61c4:	f104 0401 	add.w	r4, r4, #1
   b61c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b61cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b61d0:	f080 809a 	bcs.w	b6308 <__adddf3+0x240>
   b61d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b61d8:	bf08      	it	eq
   b61da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b61de:	f150 0000 	adcs.w	r0, r0, #0
   b61e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b61e6:	ea41 0105 	orr.w	r1, r1, r5
   b61ea:	bd30      	pop	{r4, r5, pc}
   b61ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b61f0:	4140      	adcs	r0, r0
   b61f2:	eb41 0101 	adc.w	r1, r1, r1
   b61f6:	3c01      	subs	r4, #1
   b61f8:	bf28      	it	cs
   b61fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b61fe:	d2e9      	bcs.n	b61d4 <__adddf3+0x10c>
   b6200:	f091 0f00 	teq	r1, #0
   b6204:	bf04      	itt	eq
   b6206:	4601      	moveq	r1, r0
   b6208:	2000      	moveq	r0, #0
   b620a:	fab1 f381 	clz	r3, r1
   b620e:	bf08      	it	eq
   b6210:	3320      	addeq	r3, #32
   b6212:	f1a3 030b 	sub.w	r3, r3, #11
   b6216:	f1b3 0220 	subs.w	r2, r3, #32
   b621a:	da0c      	bge.n	b6236 <__adddf3+0x16e>
   b621c:	320c      	adds	r2, #12
   b621e:	dd08      	ble.n	b6232 <__adddf3+0x16a>
   b6220:	f102 0c14 	add.w	ip, r2, #20
   b6224:	f1c2 020c 	rsb	r2, r2, #12
   b6228:	fa01 f00c 	lsl.w	r0, r1, ip
   b622c:	fa21 f102 	lsr.w	r1, r1, r2
   b6230:	e00c      	b.n	b624c <__adddf3+0x184>
   b6232:	f102 0214 	add.w	r2, r2, #20
   b6236:	bfd8      	it	le
   b6238:	f1c2 0c20 	rsble	ip, r2, #32
   b623c:	fa01 f102 	lsl.w	r1, r1, r2
   b6240:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6244:	bfdc      	itt	le
   b6246:	ea41 010c 	orrle.w	r1, r1, ip
   b624a:	4090      	lslle	r0, r2
   b624c:	1ae4      	subs	r4, r4, r3
   b624e:	bfa2      	ittt	ge
   b6250:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6254:	4329      	orrge	r1, r5
   b6256:	bd30      	popge	{r4, r5, pc}
   b6258:	ea6f 0404 	mvn.w	r4, r4
   b625c:	3c1f      	subs	r4, #31
   b625e:	da1c      	bge.n	b629a <__adddf3+0x1d2>
   b6260:	340c      	adds	r4, #12
   b6262:	dc0e      	bgt.n	b6282 <__adddf3+0x1ba>
   b6264:	f104 0414 	add.w	r4, r4, #20
   b6268:	f1c4 0220 	rsb	r2, r4, #32
   b626c:	fa20 f004 	lsr.w	r0, r0, r4
   b6270:	fa01 f302 	lsl.w	r3, r1, r2
   b6274:	ea40 0003 	orr.w	r0, r0, r3
   b6278:	fa21 f304 	lsr.w	r3, r1, r4
   b627c:	ea45 0103 	orr.w	r1, r5, r3
   b6280:	bd30      	pop	{r4, r5, pc}
   b6282:	f1c4 040c 	rsb	r4, r4, #12
   b6286:	f1c4 0220 	rsb	r2, r4, #32
   b628a:	fa20 f002 	lsr.w	r0, r0, r2
   b628e:	fa01 f304 	lsl.w	r3, r1, r4
   b6292:	ea40 0003 	orr.w	r0, r0, r3
   b6296:	4629      	mov	r1, r5
   b6298:	bd30      	pop	{r4, r5, pc}
   b629a:	fa21 f004 	lsr.w	r0, r1, r4
   b629e:	4629      	mov	r1, r5
   b62a0:	bd30      	pop	{r4, r5, pc}
   b62a2:	f094 0f00 	teq	r4, #0
   b62a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b62aa:	bf06      	itte	eq
   b62ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b62b0:	3401      	addeq	r4, #1
   b62b2:	3d01      	subne	r5, #1
   b62b4:	e74e      	b.n	b6154 <__adddf3+0x8c>
   b62b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b62ba:	bf18      	it	ne
   b62bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b62c0:	d029      	beq.n	b6316 <__adddf3+0x24e>
   b62c2:	ea94 0f05 	teq	r4, r5
   b62c6:	bf08      	it	eq
   b62c8:	ea90 0f02 	teqeq	r0, r2
   b62cc:	d005      	beq.n	b62da <__adddf3+0x212>
   b62ce:	ea54 0c00 	orrs.w	ip, r4, r0
   b62d2:	bf04      	itt	eq
   b62d4:	4619      	moveq	r1, r3
   b62d6:	4610      	moveq	r0, r2
   b62d8:	bd30      	pop	{r4, r5, pc}
   b62da:	ea91 0f03 	teq	r1, r3
   b62de:	bf1e      	ittt	ne
   b62e0:	2100      	movne	r1, #0
   b62e2:	2000      	movne	r0, #0
   b62e4:	bd30      	popne	{r4, r5, pc}
   b62e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b62ea:	d105      	bne.n	b62f8 <__adddf3+0x230>
   b62ec:	0040      	lsls	r0, r0, #1
   b62ee:	4149      	adcs	r1, r1
   b62f0:	bf28      	it	cs
   b62f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b62f6:	bd30      	pop	{r4, r5, pc}
   b62f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b62fc:	bf3c      	itt	cc
   b62fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6302:	bd30      	popcc	{r4, r5, pc}
   b6304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6308:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b630c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6310:	f04f 0000 	mov.w	r0, #0
   b6314:	bd30      	pop	{r4, r5, pc}
   b6316:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b631a:	bf1a      	itte	ne
   b631c:	4619      	movne	r1, r3
   b631e:	4610      	movne	r0, r2
   b6320:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6324:	bf1c      	itt	ne
   b6326:	460b      	movne	r3, r1
   b6328:	4602      	movne	r2, r0
   b632a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b632e:	bf06      	itte	eq
   b6330:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6334:	ea91 0f03 	teqeq	r1, r3
   b6338:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b633c:	bd30      	pop	{r4, r5, pc}
   b633e:	bf00      	nop

000b6340 <__aeabi_ui2d>:
   b6340:	f090 0f00 	teq	r0, #0
   b6344:	bf04      	itt	eq
   b6346:	2100      	moveq	r1, #0
   b6348:	4770      	bxeq	lr
   b634a:	b530      	push	{r4, r5, lr}
   b634c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6350:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6354:	f04f 0500 	mov.w	r5, #0
   b6358:	f04f 0100 	mov.w	r1, #0
   b635c:	e750      	b.n	b6200 <__adddf3+0x138>
   b635e:	bf00      	nop

000b6360 <__aeabi_i2d>:
   b6360:	f090 0f00 	teq	r0, #0
   b6364:	bf04      	itt	eq
   b6366:	2100      	moveq	r1, #0
   b6368:	4770      	bxeq	lr
   b636a:	b530      	push	{r4, r5, lr}
   b636c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6370:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6374:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6378:	bf48      	it	mi
   b637a:	4240      	negmi	r0, r0
   b637c:	f04f 0100 	mov.w	r1, #0
   b6380:	e73e      	b.n	b6200 <__adddf3+0x138>
   b6382:	bf00      	nop

000b6384 <__aeabi_f2d>:
   b6384:	0042      	lsls	r2, r0, #1
   b6386:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b638a:	ea4f 0131 	mov.w	r1, r1, rrx
   b638e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6392:	bf1f      	itttt	ne
   b6394:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6398:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b639c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b63a0:	4770      	bxne	lr
   b63a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b63a6:	bf08      	it	eq
   b63a8:	4770      	bxeq	lr
   b63aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b63ae:	bf04      	itt	eq
   b63b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b63b4:	4770      	bxeq	lr
   b63b6:	b530      	push	{r4, r5, lr}
   b63b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b63bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b63c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b63c4:	e71c      	b.n	b6200 <__adddf3+0x138>
   b63c6:	bf00      	nop

000b63c8 <__aeabi_ul2d>:
   b63c8:	ea50 0201 	orrs.w	r2, r0, r1
   b63cc:	bf08      	it	eq
   b63ce:	4770      	bxeq	lr
   b63d0:	b530      	push	{r4, r5, lr}
   b63d2:	f04f 0500 	mov.w	r5, #0
   b63d6:	e00a      	b.n	b63ee <__aeabi_l2d+0x16>

000b63d8 <__aeabi_l2d>:
   b63d8:	ea50 0201 	orrs.w	r2, r0, r1
   b63dc:	bf08      	it	eq
   b63de:	4770      	bxeq	lr
   b63e0:	b530      	push	{r4, r5, lr}
   b63e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b63e6:	d502      	bpl.n	b63ee <__aeabi_l2d+0x16>
   b63e8:	4240      	negs	r0, r0
   b63ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b63ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b63f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b63f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b63fa:	f43f aed8 	beq.w	b61ae <__adddf3+0xe6>
   b63fe:	f04f 0203 	mov.w	r2, #3
   b6402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6406:	bf18      	it	ne
   b6408:	3203      	addne	r2, #3
   b640a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b640e:	bf18      	it	ne
   b6410:	3203      	addne	r2, #3
   b6412:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6416:	f1c2 0320 	rsb	r3, r2, #32
   b641a:	fa00 fc03 	lsl.w	ip, r0, r3
   b641e:	fa20 f002 	lsr.w	r0, r0, r2
   b6422:	fa01 fe03 	lsl.w	lr, r1, r3
   b6426:	ea40 000e 	orr.w	r0, r0, lr
   b642a:	fa21 f102 	lsr.w	r1, r1, r2
   b642e:	4414      	add	r4, r2
   b6430:	e6bd      	b.n	b61ae <__adddf3+0xe6>
   b6432:	bf00      	nop

000b6434 <__aeabi_dmul>:
   b6434:	b570      	push	{r4, r5, r6, lr}
   b6436:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b643a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b643e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6442:	bf1d      	ittte	ne
   b6444:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6448:	ea94 0f0c 	teqne	r4, ip
   b644c:	ea95 0f0c 	teqne	r5, ip
   b6450:	f000 f8de 	bleq	b6610 <__aeabi_dmul+0x1dc>
   b6454:	442c      	add	r4, r5
   b6456:	ea81 0603 	eor.w	r6, r1, r3
   b645a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b645e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6462:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6466:	bf18      	it	ne
   b6468:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b646c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6474:	d038      	beq.n	b64e8 <__aeabi_dmul+0xb4>
   b6476:	fba0 ce02 	umull	ip, lr, r0, r2
   b647a:	f04f 0500 	mov.w	r5, #0
   b647e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6482:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6486:	fbe0 e503 	umlal	lr, r5, r0, r3
   b648a:	f04f 0600 	mov.w	r6, #0
   b648e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6492:	f09c 0f00 	teq	ip, #0
   b6496:	bf18      	it	ne
   b6498:	f04e 0e01 	orrne.w	lr, lr, #1
   b649c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b64a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b64a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b64a8:	d204      	bcs.n	b64b4 <__aeabi_dmul+0x80>
   b64aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b64ae:	416d      	adcs	r5, r5
   b64b0:	eb46 0606 	adc.w	r6, r6, r6
   b64b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b64b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b64bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b64c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b64c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b64c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b64cc:	bf88      	it	hi
   b64ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b64d2:	d81e      	bhi.n	b6512 <__aeabi_dmul+0xde>
   b64d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b64d8:	bf08      	it	eq
   b64da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b64de:	f150 0000 	adcs.w	r0, r0, #0
   b64e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b64e6:	bd70      	pop	{r4, r5, r6, pc}
   b64e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b64ec:	ea46 0101 	orr.w	r1, r6, r1
   b64f0:	ea40 0002 	orr.w	r0, r0, r2
   b64f4:	ea81 0103 	eor.w	r1, r1, r3
   b64f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b64fc:	bfc2      	ittt	gt
   b64fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6502:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6506:	bd70      	popgt	{r4, r5, r6, pc}
   b6508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b650c:	f04f 0e00 	mov.w	lr, #0
   b6510:	3c01      	subs	r4, #1
   b6512:	f300 80ab 	bgt.w	b666c <__aeabi_dmul+0x238>
   b6516:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b651a:	bfde      	ittt	le
   b651c:	2000      	movle	r0, #0
   b651e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6522:	bd70      	pople	{r4, r5, r6, pc}
   b6524:	f1c4 0400 	rsb	r4, r4, #0
   b6528:	3c20      	subs	r4, #32
   b652a:	da35      	bge.n	b6598 <__aeabi_dmul+0x164>
   b652c:	340c      	adds	r4, #12
   b652e:	dc1b      	bgt.n	b6568 <__aeabi_dmul+0x134>
   b6530:	f104 0414 	add.w	r4, r4, #20
   b6534:	f1c4 0520 	rsb	r5, r4, #32
   b6538:	fa00 f305 	lsl.w	r3, r0, r5
   b653c:	fa20 f004 	lsr.w	r0, r0, r4
   b6540:	fa01 f205 	lsl.w	r2, r1, r5
   b6544:	ea40 0002 	orr.w	r0, r0, r2
   b6548:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b654c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6550:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6554:	fa21 f604 	lsr.w	r6, r1, r4
   b6558:	eb42 0106 	adc.w	r1, r2, r6
   b655c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6560:	bf08      	it	eq
   b6562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6566:	bd70      	pop	{r4, r5, r6, pc}
   b6568:	f1c4 040c 	rsb	r4, r4, #12
   b656c:	f1c4 0520 	rsb	r5, r4, #32
   b6570:	fa00 f304 	lsl.w	r3, r0, r4
   b6574:	fa20 f005 	lsr.w	r0, r0, r5
   b6578:	fa01 f204 	lsl.w	r2, r1, r4
   b657c:	ea40 0002 	orr.w	r0, r0, r2
   b6580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6588:	f141 0100 	adc.w	r1, r1, #0
   b658c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6590:	bf08      	it	eq
   b6592:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6596:	bd70      	pop	{r4, r5, r6, pc}
   b6598:	f1c4 0520 	rsb	r5, r4, #32
   b659c:	fa00 f205 	lsl.w	r2, r0, r5
   b65a0:	ea4e 0e02 	orr.w	lr, lr, r2
   b65a4:	fa20 f304 	lsr.w	r3, r0, r4
   b65a8:	fa01 f205 	lsl.w	r2, r1, r5
   b65ac:	ea43 0302 	orr.w	r3, r3, r2
   b65b0:	fa21 f004 	lsr.w	r0, r1, r4
   b65b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b65b8:	fa21 f204 	lsr.w	r2, r1, r4
   b65bc:	ea20 0002 	bic.w	r0, r0, r2
   b65c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b65c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b65c8:	bf08      	it	eq
   b65ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b65ce:	bd70      	pop	{r4, r5, r6, pc}
   b65d0:	f094 0f00 	teq	r4, #0
   b65d4:	d10f      	bne.n	b65f6 <__aeabi_dmul+0x1c2>
   b65d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b65da:	0040      	lsls	r0, r0, #1
   b65dc:	eb41 0101 	adc.w	r1, r1, r1
   b65e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b65e4:	bf08      	it	eq
   b65e6:	3c01      	subeq	r4, #1
   b65e8:	d0f7      	beq.n	b65da <__aeabi_dmul+0x1a6>
   b65ea:	ea41 0106 	orr.w	r1, r1, r6
   b65ee:	f095 0f00 	teq	r5, #0
   b65f2:	bf18      	it	ne
   b65f4:	4770      	bxne	lr
   b65f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b65fa:	0052      	lsls	r2, r2, #1
   b65fc:	eb43 0303 	adc.w	r3, r3, r3
   b6600:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6604:	bf08      	it	eq
   b6606:	3d01      	subeq	r5, #1
   b6608:	d0f7      	beq.n	b65fa <__aeabi_dmul+0x1c6>
   b660a:	ea43 0306 	orr.w	r3, r3, r6
   b660e:	4770      	bx	lr
   b6610:	ea94 0f0c 	teq	r4, ip
   b6614:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6618:	bf18      	it	ne
   b661a:	ea95 0f0c 	teqne	r5, ip
   b661e:	d00c      	beq.n	b663a <__aeabi_dmul+0x206>
   b6620:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6624:	bf18      	it	ne
   b6626:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b662a:	d1d1      	bne.n	b65d0 <__aeabi_dmul+0x19c>
   b662c:	ea81 0103 	eor.w	r1, r1, r3
   b6630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6634:	f04f 0000 	mov.w	r0, #0
   b6638:	bd70      	pop	{r4, r5, r6, pc}
   b663a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b663e:	bf06      	itte	eq
   b6640:	4610      	moveq	r0, r2
   b6642:	4619      	moveq	r1, r3
   b6644:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6648:	d019      	beq.n	b667e <__aeabi_dmul+0x24a>
   b664a:	ea94 0f0c 	teq	r4, ip
   b664e:	d102      	bne.n	b6656 <__aeabi_dmul+0x222>
   b6650:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6654:	d113      	bne.n	b667e <__aeabi_dmul+0x24a>
   b6656:	ea95 0f0c 	teq	r5, ip
   b665a:	d105      	bne.n	b6668 <__aeabi_dmul+0x234>
   b665c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6660:	bf1c      	itt	ne
   b6662:	4610      	movne	r0, r2
   b6664:	4619      	movne	r1, r3
   b6666:	d10a      	bne.n	b667e <__aeabi_dmul+0x24a>
   b6668:	ea81 0103 	eor.w	r1, r1, r3
   b666c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6670:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6678:	f04f 0000 	mov.w	r0, #0
   b667c:	bd70      	pop	{r4, r5, r6, pc}
   b667e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6682:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6686:	bd70      	pop	{r4, r5, r6, pc}

000b6688 <__aeabi_ddiv>:
   b6688:	b570      	push	{r4, r5, r6, lr}
   b668a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b668e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6696:	bf1d      	ittte	ne
   b6698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b669c:	ea94 0f0c 	teqne	r4, ip
   b66a0:	ea95 0f0c 	teqne	r5, ip
   b66a4:	f000 f8a7 	bleq	b67f6 <__aeabi_ddiv+0x16e>
   b66a8:	eba4 0405 	sub.w	r4, r4, r5
   b66ac:	ea81 0e03 	eor.w	lr, r1, r3
   b66b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b66b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b66b8:	f000 8088 	beq.w	b67cc <__aeabi_ddiv+0x144>
   b66bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b66c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b66c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b66c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b66cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b66d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b66d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b66d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b66dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b66e0:	429d      	cmp	r5, r3
   b66e2:	bf08      	it	eq
   b66e4:	4296      	cmpeq	r6, r2
   b66e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b66ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b66ee:	d202      	bcs.n	b66f6 <__aeabi_ddiv+0x6e>
   b66f0:	085b      	lsrs	r3, r3, #1
   b66f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b66f6:	1ab6      	subs	r6, r6, r2
   b66f8:	eb65 0503 	sbc.w	r5, r5, r3
   b66fc:	085b      	lsrs	r3, r3, #1
   b66fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b6702:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6706:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b670a:	ebb6 0e02 	subs.w	lr, r6, r2
   b670e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6712:	bf22      	ittt	cs
   b6714:	1ab6      	subcs	r6, r6, r2
   b6716:	4675      	movcs	r5, lr
   b6718:	ea40 000c 	orrcs.w	r0, r0, ip
   b671c:	085b      	lsrs	r3, r3, #1
   b671e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6722:	ebb6 0e02 	subs.w	lr, r6, r2
   b6726:	eb75 0e03 	sbcs.w	lr, r5, r3
   b672a:	bf22      	ittt	cs
   b672c:	1ab6      	subcs	r6, r6, r2
   b672e:	4675      	movcs	r5, lr
   b6730:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6734:	085b      	lsrs	r3, r3, #1
   b6736:	ea4f 0232 	mov.w	r2, r2, rrx
   b673a:	ebb6 0e02 	subs.w	lr, r6, r2
   b673e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6742:	bf22      	ittt	cs
   b6744:	1ab6      	subcs	r6, r6, r2
   b6746:	4675      	movcs	r5, lr
   b6748:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b674c:	085b      	lsrs	r3, r3, #1
   b674e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6752:	ebb6 0e02 	subs.w	lr, r6, r2
   b6756:	eb75 0e03 	sbcs.w	lr, r5, r3
   b675a:	bf22      	ittt	cs
   b675c:	1ab6      	subcs	r6, r6, r2
   b675e:	4675      	movcs	r5, lr
   b6760:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6764:	ea55 0e06 	orrs.w	lr, r5, r6
   b6768:	d018      	beq.n	b679c <__aeabi_ddiv+0x114>
   b676a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b676e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6772:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6776:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b677a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b677e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6782:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6786:	d1c0      	bne.n	b670a <__aeabi_ddiv+0x82>
   b6788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b678c:	d10b      	bne.n	b67a6 <__aeabi_ddiv+0x11e>
   b678e:	ea41 0100 	orr.w	r1, r1, r0
   b6792:	f04f 0000 	mov.w	r0, #0
   b6796:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b679a:	e7b6      	b.n	b670a <__aeabi_ddiv+0x82>
   b679c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b67a0:	bf04      	itt	eq
   b67a2:	4301      	orreq	r1, r0
   b67a4:	2000      	moveq	r0, #0
   b67a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b67aa:	bf88      	it	hi
   b67ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b67b0:	f63f aeaf 	bhi.w	b6512 <__aeabi_dmul+0xde>
   b67b4:	ebb5 0c03 	subs.w	ip, r5, r3
   b67b8:	bf04      	itt	eq
   b67ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   b67be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b67c2:	f150 0000 	adcs.w	r0, r0, #0
   b67c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b67ca:	bd70      	pop	{r4, r5, r6, pc}
   b67cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b67d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b67d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b67d8:	bfc2      	ittt	gt
   b67da:	ebd4 050c 	rsbsgt	r5, r4, ip
   b67de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b67e2:	bd70      	popgt	{r4, r5, r6, pc}
   b67e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b67e8:	f04f 0e00 	mov.w	lr, #0
   b67ec:	3c01      	subs	r4, #1
   b67ee:	e690      	b.n	b6512 <__aeabi_dmul+0xde>
   b67f0:	ea45 0e06 	orr.w	lr, r5, r6
   b67f4:	e68d      	b.n	b6512 <__aeabi_dmul+0xde>
   b67f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b67fa:	ea94 0f0c 	teq	r4, ip
   b67fe:	bf08      	it	eq
   b6800:	ea95 0f0c 	teqeq	r5, ip
   b6804:	f43f af3b 	beq.w	b667e <__aeabi_dmul+0x24a>
   b6808:	ea94 0f0c 	teq	r4, ip
   b680c:	d10a      	bne.n	b6824 <__aeabi_ddiv+0x19c>
   b680e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6812:	f47f af34 	bne.w	b667e <__aeabi_dmul+0x24a>
   b6816:	ea95 0f0c 	teq	r5, ip
   b681a:	f47f af25 	bne.w	b6668 <__aeabi_dmul+0x234>
   b681e:	4610      	mov	r0, r2
   b6820:	4619      	mov	r1, r3
   b6822:	e72c      	b.n	b667e <__aeabi_dmul+0x24a>
   b6824:	ea95 0f0c 	teq	r5, ip
   b6828:	d106      	bne.n	b6838 <__aeabi_ddiv+0x1b0>
   b682a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b682e:	f43f aefd 	beq.w	b662c <__aeabi_dmul+0x1f8>
   b6832:	4610      	mov	r0, r2
   b6834:	4619      	mov	r1, r3
   b6836:	e722      	b.n	b667e <__aeabi_dmul+0x24a>
   b6838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b683c:	bf18      	it	ne
   b683e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6842:	f47f aec5 	bne.w	b65d0 <__aeabi_dmul+0x19c>
   b6846:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b684a:	f47f af0d 	bne.w	b6668 <__aeabi_dmul+0x234>
   b684e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6852:	f47f aeeb 	bne.w	b662c <__aeabi_dmul+0x1f8>
   b6856:	e712      	b.n	b667e <__aeabi_dmul+0x24a>

000b6858 <__aeabi_d2f>:
   b6858:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b685c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6860:	bf24      	itt	cs
   b6862:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6866:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b686a:	d90d      	bls.n	b6888 <__aeabi_d2f+0x30>
   b686c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6870:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6874:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6878:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b687c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6880:	bf08      	it	eq
   b6882:	f020 0001 	biceq.w	r0, r0, #1
   b6886:	4770      	bx	lr
   b6888:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b688c:	d121      	bne.n	b68d2 <__aeabi_d2f+0x7a>
   b688e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6892:	bfbc      	itt	lt
   b6894:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6898:	4770      	bxlt	lr
   b689a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b689e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b68a2:	f1c2 0218 	rsb	r2, r2, #24
   b68a6:	f1c2 0c20 	rsb	ip, r2, #32
   b68aa:	fa10 f30c 	lsls.w	r3, r0, ip
   b68ae:	fa20 f002 	lsr.w	r0, r0, r2
   b68b2:	bf18      	it	ne
   b68b4:	f040 0001 	orrne.w	r0, r0, #1
   b68b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b68bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b68c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b68c4:	ea40 000c 	orr.w	r0, r0, ip
   b68c8:	fa23 f302 	lsr.w	r3, r3, r2
   b68cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b68d0:	e7cc      	b.n	b686c <__aeabi_d2f+0x14>
   b68d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b68d6:	d107      	bne.n	b68e8 <__aeabi_d2f+0x90>
   b68d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b68dc:	bf1e      	ittt	ne
   b68de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b68e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b68e6:	4770      	bxne	lr
   b68e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b68ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b68f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b68f4:	4770      	bx	lr
   b68f6:	bf00      	nop

000b68f8 <atexit>:
   b68f8:	2300      	movs	r3, #0
   b68fa:	4601      	mov	r1, r0
   b68fc:	461a      	mov	r2, r3
   b68fe:	4618      	mov	r0, r3
   b6900:	f000 b902 	b.w	b6b08 <__register_exitproc>

000b6904 <atol>:
   b6904:	220a      	movs	r2, #10
   b6906:	2100      	movs	r1, #0
   b6908:	f000 b8f4 	b.w	b6af4 <strtol>

000b690c <memcpy>:
   b690c:	440a      	add	r2, r1
   b690e:	4291      	cmp	r1, r2
   b6910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6914:	d100      	bne.n	b6918 <memcpy+0xc>
   b6916:	4770      	bx	lr
   b6918:	b510      	push	{r4, lr}
   b691a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b691e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6922:	4291      	cmp	r1, r2
   b6924:	d1f9      	bne.n	b691a <memcpy+0xe>
   b6926:	bd10      	pop	{r4, pc}

000b6928 <memset>:
   b6928:	4402      	add	r2, r0
   b692a:	4603      	mov	r3, r0
   b692c:	4293      	cmp	r3, r2
   b692e:	d100      	bne.n	b6932 <memset+0xa>
   b6930:	4770      	bx	lr
   b6932:	f803 1b01 	strb.w	r1, [r3], #1
   b6936:	e7f9      	b.n	b692c <memset+0x4>

000b6938 <srand>:
   b6938:	b538      	push	{r3, r4, r5, lr}
   b693a:	4b10      	ldr	r3, [pc, #64]	; (b697c <srand+0x44>)
   b693c:	681d      	ldr	r5, [r3, #0]
   b693e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6940:	4604      	mov	r4, r0
   b6942:	b9b3      	cbnz	r3, b6972 <srand+0x3a>
   b6944:	2018      	movs	r0, #24
   b6946:	f7fe f931 	bl	b4bac <malloc>
   b694a:	4602      	mov	r2, r0
   b694c:	63a8      	str	r0, [r5, #56]	; 0x38
   b694e:	b920      	cbnz	r0, b695a <srand+0x22>
   b6950:	4b0b      	ldr	r3, [pc, #44]	; (b6980 <srand+0x48>)
   b6952:	480c      	ldr	r0, [pc, #48]	; (b6984 <srand+0x4c>)
   b6954:	2142      	movs	r1, #66	; 0x42
   b6956:	f7fe f961 	bl	b4c1c <__assert_func>
   b695a:	490b      	ldr	r1, [pc, #44]	; (b6988 <srand+0x50>)
   b695c:	4b0b      	ldr	r3, [pc, #44]	; (b698c <srand+0x54>)
   b695e:	e9c0 1300 	strd	r1, r3, [r0]
   b6962:	4b0b      	ldr	r3, [pc, #44]	; (b6990 <srand+0x58>)
   b6964:	6083      	str	r3, [r0, #8]
   b6966:	230b      	movs	r3, #11
   b6968:	8183      	strh	r3, [r0, #12]
   b696a:	2100      	movs	r1, #0
   b696c:	2001      	movs	r0, #1
   b696e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6972:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6974:	2200      	movs	r2, #0
   b6976:	611c      	str	r4, [r3, #16]
   b6978:	615a      	str	r2, [r3, #20]
   b697a:	bd38      	pop	{r3, r4, r5, pc}
   b697c:	2003e5c0 	.word	0x2003e5c0
   b6980:	000b6ee1 	.word	0x000b6ee1
   b6984:	000b6ef8 	.word	0x000b6ef8
   b6988:	abcd330e 	.word	0xabcd330e
   b698c:	e66d1234 	.word	0xe66d1234
   b6990:	0005deec 	.word	0x0005deec

000b6994 <strcpy>:
   b6994:	4603      	mov	r3, r0
   b6996:	f811 2b01 	ldrb.w	r2, [r1], #1
   b699a:	f803 2b01 	strb.w	r2, [r3], #1
   b699e:	2a00      	cmp	r2, #0
   b69a0:	d1f9      	bne.n	b6996 <strcpy+0x2>
   b69a2:	4770      	bx	lr

000b69a4 <strdup>:
   b69a4:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <strdup+0xc>)
   b69a6:	4601      	mov	r1, r0
   b69a8:	6818      	ldr	r0, [r3, #0]
   b69aa:	f000 b803 	b.w	b69b4 <_strdup_r>
   b69ae:	bf00      	nop
   b69b0:	2003e5c0 	.word	0x2003e5c0

000b69b4 <_strdup_r>:
   b69b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b69b6:	4604      	mov	r4, r0
   b69b8:	4608      	mov	r0, r1
   b69ba:	460d      	mov	r5, r1
   b69bc:	f000 f80f 	bl	b69de <strlen>
   b69c0:	1c42      	adds	r2, r0, #1
   b69c2:	4611      	mov	r1, r2
   b69c4:	4620      	mov	r0, r4
   b69c6:	9201      	str	r2, [sp, #4]
   b69c8:	f7fe f918 	bl	b4bfc <_malloc_r>
   b69cc:	4604      	mov	r4, r0
   b69ce:	b118      	cbz	r0, b69d8 <_strdup_r+0x24>
   b69d0:	9a01      	ldr	r2, [sp, #4]
   b69d2:	4629      	mov	r1, r5
   b69d4:	f7ff ff9a 	bl	b690c <memcpy>
   b69d8:	4620      	mov	r0, r4
   b69da:	b003      	add	sp, #12
   b69dc:	bd30      	pop	{r4, r5, pc}

000b69de <strlen>:
   b69de:	4603      	mov	r3, r0
   b69e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b69e4:	2a00      	cmp	r2, #0
   b69e6:	d1fb      	bne.n	b69e0 <strlen+0x2>
   b69e8:	1a18      	subs	r0, r3, r0
   b69ea:	3801      	subs	r0, #1
   b69ec:	4770      	bx	lr
	...

000b69f0 <_strtol_l.constprop.0>:
   b69f0:	2b01      	cmp	r3, #1
   b69f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b69f6:	d001      	beq.n	b69fc <_strtol_l.constprop.0+0xc>
   b69f8:	2b24      	cmp	r3, #36	; 0x24
   b69fa:	d906      	bls.n	b6a0a <_strtol_l.constprop.0+0x1a>
   b69fc:	f7fe f906 	bl	b4c0c <__errno>
   b6a00:	2316      	movs	r3, #22
   b6a02:	6003      	str	r3, [r0, #0]
   b6a04:	2000      	movs	r0, #0
   b6a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6a0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b6af0 <_strtol_l.constprop.0+0x100>
   b6a0e:	460d      	mov	r5, r1
   b6a10:	462e      	mov	r6, r5
   b6a12:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6a16:	f814 700c 	ldrb.w	r7, [r4, ip]
   b6a1a:	f017 0708 	ands.w	r7, r7, #8
   b6a1e:	d1f7      	bne.n	b6a10 <_strtol_l.constprop.0+0x20>
   b6a20:	2c2d      	cmp	r4, #45	; 0x2d
   b6a22:	d132      	bne.n	b6a8a <_strtol_l.constprop.0+0x9a>
   b6a24:	782c      	ldrb	r4, [r5, #0]
   b6a26:	2701      	movs	r7, #1
   b6a28:	1cb5      	adds	r5, r6, #2
   b6a2a:	2b00      	cmp	r3, #0
   b6a2c:	d05b      	beq.n	b6ae6 <_strtol_l.constprop.0+0xf6>
   b6a2e:	2b10      	cmp	r3, #16
   b6a30:	d109      	bne.n	b6a46 <_strtol_l.constprop.0+0x56>
   b6a32:	2c30      	cmp	r4, #48	; 0x30
   b6a34:	d107      	bne.n	b6a46 <_strtol_l.constprop.0+0x56>
   b6a36:	782c      	ldrb	r4, [r5, #0]
   b6a38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b6a3c:	2c58      	cmp	r4, #88	; 0x58
   b6a3e:	d14d      	bne.n	b6adc <_strtol_l.constprop.0+0xec>
   b6a40:	786c      	ldrb	r4, [r5, #1]
   b6a42:	2310      	movs	r3, #16
   b6a44:	3502      	adds	r5, #2
   b6a46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b6a4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6a4e:	f04f 0c00 	mov.w	ip, #0
   b6a52:	fbb8 f9f3 	udiv	r9, r8, r3
   b6a56:	4666      	mov	r6, ip
   b6a58:	fb03 8a19 	mls	sl, r3, r9, r8
   b6a5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b6a60:	f1be 0f09 	cmp.w	lr, #9
   b6a64:	d816      	bhi.n	b6a94 <_strtol_l.constprop.0+0xa4>
   b6a66:	4674      	mov	r4, lr
   b6a68:	42a3      	cmp	r3, r4
   b6a6a:	dd24      	ble.n	b6ab6 <_strtol_l.constprop.0+0xc6>
   b6a6c:	f1bc 0f00 	cmp.w	ip, #0
   b6a70:	db1e      	blt.n	b6ab0 <_strtol_l.constprop.0+0xc0>
   b6a72:	45b1      	cmp	r9, r6
   b6a74:	d31c      	bcc.n	b6ab0 <_strtol_l.constprop.0+0xc0>
   b6a76:	d101      	bne.n	b6a7c <_strtol_l.constprop.0+0x8c>
   b6a78:	45a2      	cmp	sl, r4
   b6a7a:	db19      	blt.n	b6ab0 <_strtol_l.constprop.0+0xc0>
   b6a7c:	fb06 4603 	mla	r6, r6, r3, r4
   b6a80:	f04f 0c01 	mov.w	ip, #1
   b6a84:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6a88:	e7e8      	b.n	b6a5c <_strtol_l.constprop.0+0x6c>
   b6a8a:	2c2b      	cmp	r4, #43	; 0x2b
   b6a8c:	bf04      	itt	eq
   b6a8e:	782c      	ldrbeq	r4, [r5, #0]
   b6a90:	1cb5      	addeq	r5, r6, #2
   b6a92:	e7ca      	b.n	b6a2a <_strtol_l.constprop.0+0x3a>
   b6a94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b6a98:	f1be 0f19 	cmp.w	lr, #25
   b6a9c:	d801      	bhi.n	b6aa2 <_strtol_l.constprop.0+0xb2>
   b6a9e:	3c37      	subs	r4, #55	; 0x37
   b6aa0:	e7e2      	b.n	b6a68 <_strtol_l.constprop.0+0x78>
   b6aa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b6aa6:	f1be 0f19 	cmp.w	lr, #25
   b6aaa:	d804      	bhi.n	b6ab6 <_strtol_l.constprop.0+0xc6>
   b6aac:	3c57      	subs	r4, #87	; 0x57
   b6aae:	e7db      	b.n	b6a68 <_strtol_l.constprop.0+0x78>
   b6ab0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6ab4:	e7e6      	b.n	b6a84 <_strtol_l.constprop.0+0x94>
   b6ab6:	f1bc 0f00 	cmp.w	ip, #0
   b6aba:	da05      	bge.n	b6ac8 <_strtol_l.constprop.0+0xd8>
   b6abc:	2322      	movs	r3, #34	; 0x22
   b6abe:	6003      	str	r3, [r0, #0]
   b6ac0:	4646      	mov	r6, r8
   b6ac2:	b942      	cbnz	r2, b6ad6 <_strtol_l.constprop.0+0xe6>
   b6ac4:	4630      	mov	r0, r6
   b6ac6:	e79e      	b.n	b6a06 <_strtol_l.constprop.0+0x16>
   b6ac8:	b107      	cbz	r7, b6acc <_strtol_l.constprop.0+0xdc>
   b6aca:	4276      	negs	r6, r6
   b6acc:	2a00      	cmp	r2, #0
   b6ace:	d0f9      	beq.n	b6ac4 <_strtol_l.constprop.0+0xd4>
   b6ad0:	f1bc 0f00 	cmp.w	ip, #0
   b6ad4:	d000      	beq.n	b6ad8 <_strtol_l.constprop.0+0xe8>
   b6ad6:	1e69      	subs	r1, r5, #1
   b6ad8:	6011      	str	r1, [r2, #0]
   b6ada:	e7f3      	b.n	b6ac4 <_strtol_l.constprop.0+0xd4>
   b6adc:	2430      	movs	r4, #48	; 0x30
   b6ade:	2b00      	cmp	r3, #0
   b6ae0:	d1b1      	bne.n	b6a46 <_strtol_l.constprop.0+0x56>
   b6ae2:	2308      	movs	r3, #8
   b6ae4:	e7af      	b.n	b6a46 <_strtol_l.constprop.0+0x56>
   b6ae6:	2c30      	cmp	r4, #48	; 0x30
   b6ae8:	d0a5      	beq.n	b6a36 <_strtol_l.constprop.0+0x46>
   b6aea:	230a      	movs	r3, #10
   b6aec:	e7ab      	b.n	b6a46 <_strtol_l.constprop.0+0x56>
   b6aee:	bf00      	nop
   b6af0:	000b6f52 	.word	0x000b6f52

000b6af4 <strtol>:
   b6af4:	4613      	mov	r3, r2
   b6af6:	460a      	mov	r2, r1
   b6af8:	4601      	mov	r1, r0
   b6afa:	4802      	ldr	r0, [pc, #8]	; (b6b04 <strtol+0x10>)
   b6afc:	6800      	ldr	r0, [r0, #0]
   b6afe:	f7ff bf77 	b.w	b69f0 <_strtol_l.constprop.0>
   b6b02:	bf00      	nop
   b6b04:	2003e5c0 	.word	0x2003e5c0

000b6b08 <__register_exitproc>:
   b6b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6bc8 <__register_exitproc+0xc0>
   b6b10:	4606      	mov	r6, r0
   b6b12:	f8d8 0000 	ldr.w	r0, [r8]
   b6b16:	461f      	mov	r7, r3
   b6b18:	460d      	mov	r5, r1
   b6b1a:	4691      	mov	r9, r2
   b6b1c:	f000 f856 	bl	b6bcc <__retarget_lock_acquire_recursive>
   b6b20:	4b25      	ldr	r3, [pc, #148]	; (b6bb8 <__register_exitproc+0xb0>)
   b6b22:	681c      	ldr	r4, [r3, #0]
   b6b24:	b934      	cbnz	r4, b6b34 <__register_exitproc+0x2c>
   b6b26:	4c25      	ldr	r4, [pc, #148]	; (b6bbc <__register_exitproc+0xb4>)
   b6b28:	601c      	str	r4, [r3, #0]
   b6b2a:	4b25      	ldr	r3, [pc, #148]	; (b6bc0 <__register_exitproc+0xb8>)
   b6b2c:	b113      	cbz	r3, b6b34 <__register_exitproc+0x2c>
   b6b2e:	681b      	ldr	r3, [r3, #0]
   b6b30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6b34:	6863      	ldr	r3, [r4, #4]
   b6b36:	2b1f      	cmp	r3, #31
   b6b38:	dd07      	ble.n	b6b4a <__register_exitproc+0x42>
   b6b3a:	f8d8 0000 	ldr.w	r0, [r8]
   b6b3e:	f000 f847 	bl	b6bd0 <__retarget_lock_release_recursive>
   b6b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6b4a:	b34e      	cbz	r6, b6ba0 <__register_exitproc+0x98>
   b6b4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6b50:	b988      	cbnz	r0, b6b76 <__register_exitproc+0x6e>
   b6b52:	4b1c      	ldr	r3, [pc, #112]	; (b6bc4 <__register_exitproc+0xbc>)
   b6b54:	b923      	cbnz	r3, b6b60 <__register_exitproc+0x58>
   b6b56:	f8d8 0000 	ldr.w	r0, [r8]
   b6b5a:	f000 f838 	bl	b6bce <__retarget_lock_release>
   b6b5e:	e7f0      	b.n	b6b42 <__register_exitproc+0x3a>
   b6b60:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6b64:	f7fe f822 	bl	b4bac <malloc>
   b6b68:	2800      	cmp	r0, #0
   b6b6a:	d0f4      	beq.n	b6b56 <__register_exitproc+0x4e>
   b6b6c:	2300      	movs	r3, #0
   b6b6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6b72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6b76:	6863      	ldr	r3, [r4, #4]
   b6b78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6b7c:	2201      	movs	r2, #1
   b6b7e:	409a      	lsls	r2, r3
   b6b80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6b84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6b88:	4313      	orrs	r3, r2
   b6b8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6b8e:	2e02      	cmp	r6, #2
   b6b90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6b94:	bf02      	ittt	eq
   b6b96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6b9a:	4313      	orreq	r3, r2
   b6b9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6ba0:	6863      	ldr	r3, [r4, #4]
   b6ba2:	f8d8 0000 	ldr.w	r0, [r8]
   b6ba6:	1c5a      	adds	r2, r3, #1
   b6ba8:	3302      	adds	r3, #2
   b6baa:	6062      	str	r2, [r4, #4]
   b6bac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6bb0:	f000 f80e 	bl	b6bd0 <__retarget_lock_release_recursive>
   b6bb4:	2000      	movs	r0, #0
   b6bb6:	e7c6      	b.n	b6b46 <__register_exitproc+0x3e>
   b6bb8:	2003e7e8 	.word	0x2003e7e8
   b6bbc:	2003e75c 	.word	0x2003e75c
   b6bc0:	00000000 	.word	0x00000000
   b6bc4:	000b4bad 	.word	0x000b4bad
   b6bc8:	2003e624 	.word	0x2003e624

000b6bcc <__retarget_lock_acquire_recursive>:
   b6bcc:	4770      	bx	lr

000b6bce <__retarget_lock_release>:
   b6bce:	4770      	bx	lr

000b6bd0 <__retarget_lock_release_recursive>:
   b6bd0:	4770      	bx	lr

000b6bd2 <link_code_end>:
	...

000b6bd4 <dynalib_user>:
   b6bd4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6be4:	0000 0000 614c 7473 4320 756f 746e 5400     ....Last Count.T
   b6bf4:	746f 6c61 5620 6865 6369 656c 0073 6552     otal Vehicles.Re
   b6c04:	6163 696c 7262 7461 2065 6142 6573 696c     calibrate Baseli
   b6c14:	656e 5300 7465 7420 6568 5420 7268 7365     ne.Set the Thres
   b6c24:	6f68 646c 5300 7465 7420 6568 5220 7365     hold.Set the Res
   b6c34:	7465 5420 7268 7365 6f68 646c 5b00 616d     et Threshold.[ma
   b6c44:	5f67 4d52 3a53 2520 2c66 6d20 6761 785f     g_RMS: %f, mag_x
   b6c54:	203a 6625 202c 616d 5f67 3a79 2520 2c66     : %f, mag_y: %f,
   b6c64:	6d20 6761 7a5f 203a 6625 005d 6544 6574      mag_z: %f].Dete
   b6c74:	7463 6e69 2067 6556 6968 6c63 2165 5200     cting Vehicle!.R
   b6c84:	6c65 6165 6573 2e64 4300 4e4f 3a46 4142     eleased..CONF:BA
   b6c94:	0053 6854 6572 6873 6c6f 3a64 2520 2c64     S.Threshold: %d,
   b6ca4:	5220 7365 7465 5420 7268 7365 6f68 646c      Reset Threshold
   b6cb4:	203a 6425 202c 6142 6573 696c 656e 2520     : %d, Baseline %
   b6cc4:	0066 6e49 7469 6169 696c 657a 0064 4f43     f.Initialized.CO
   b6cd4:	464e 543a 5248 2520 0064 654e 2077 6854     NF:THR %d.New Th
   b6ce4:	6572 6873 6c6f 2064 6553 0074 4f43 464e     reshold Set.CONF
   b6cf4:	523a 5345 2520 0064 654e 2077 6552 6573     :RES %d.New Rese
   b6d04:	2074 6854 6572 6873 6c6f 2064 6553 0074     t Threshold Set.
   b6d14:	6f54 6174 206c 6556 6968 6c63 2065 6f43     Total Vehicle Co
   b6d24:	6e75 0074 6f43 6e75 2074 6552 7274 6569     unt.Count Retrie
   b6d34:	6576 0064 6f43 6e75 2074 6552 6573 0074     ved.Count Reset.

000b6d44 <_ZTV8MagModel>:
	...
   b6d4c:	43c9 000b 43cb 000b                         .C...C..

000b6d54 <_ZTVN5spark13CellularClassE>:
	...
   b6d5c:	4d0f 000b 4d05 000b 4cfb 000b 4cb1 000b     .M...M...L...L..
   b6d6c:	4cef 000b 4ce3 000b 5515 000b 551d 000b     .L...L...U...U..
   b6d7c:	4cd7 000b 4ccf 000b 4cc5 000b 4cbb 000b     .L...L...L...L..
   b6d8c:	554d 000b                                   MU..

000b6d90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6d98:	4d49 000b 4d4f 000b 4d8d 000b 4d5d 000b     IM..OM...M..]M..
   b6da8:	4d4b 000b                                   KM..

000b6dac <_ZTVN5spark13EthernetClassE>:
	...
   b6db4:	5323 000b 5319 000b 530f 000b 5305 000b     #S...S...S...S..
   b6dc4:	52f9 000b 52ed 000b 5515 000b 551d 000b     .R...R...U...U..
   b6dd4:	52e1 000b 52d9 000b 52cf 000b 52c5 000b     .R...R...R...R..
   b6de4:	554d 000b                                   MU..

000b6de8 <_ZTV7TwoWire>:
	...
   b6df0:	5341 000b 538b 000b 5363 000b 5343 000b     AS...S..cS..CS..
   b6e00:	536b 000b 5373 000b 537b 000b 5383 000b     kS..sS..{S...S..

000b6e10 <_ZTV9IPAddress>:
	...
   b6e18:	53e5 000b 53d5 000b 53d7 000b 7061 0070     .S...S...S..app.

000b6e28 <_ZTVN5spark12NetworkClassE>:
	...
   b6e30:	54d5 000b 54df 000b 54e9 000b 54f3 000b     .T...T...T...T..
   b6e40:	54fd 000b 5509 000b 5515 000b 551d 000b     .T...U...U...U..
   b6e50:	5525 000b 5531 000b 5539 000b 5543 000b     %U..1U..9U..CU..
   b6e60:	554d 000b 5925 252d 2d6d 6425 2554 3a48     MU..%Y-%m-%dT%H:
   b6e70:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6e80 <_ZTV11USARTSerial>:
	...
   b6e88:	5b5d 000b 5bc9 000b 5ba1 000b 5639 000b     ][...[...[..9V..
   b6e98:	5b71 000b 5b8d 000b 5b7f 000b 5b9b 000b     q[...[...[...[..
   b6ea8:	5b5f 000b 5b63 000b                         _[..c[..

000b6eb0 <_ZTV9USBSerial>:
	...
   b6eb8:	5c15 000b 5c7d 000b 5c53 000b 5639 000b     .\..}\..S\..9V..
   b6ec8:	5c45 000b 5c17 000b 5c27 000b 5c77 000b     E\...\..'\..w\..
   b6ed8:	5c37 000b 5c0f 000b                         7\...\..

000b6ee0 <_ZSt7nothrow>:
   b6ee0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6ef0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6f00:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6f10:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6f20:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6f30:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6f40:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6f51 <_ctype_>:
   b6f51:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b6f61:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b6f71:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b6f81:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b6f91:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b6fa1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b6fb1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b6fc1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b6fd1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7052 <link_const_variable_data_end>:
	...

000b7054 <link_constructors_location>:
   b7054:	000b4399 	.word	0x000b4399
   b7058:	000b4809 	.word	0x000b4809
   b705c:	000b4ca1 	.word	0x000b4ca1
   b7060:	000b4d19 	.word	0x000b4d19
   b7064:	000b532d 	.word	0x000b532d
   b7068:	000b54c5 	.word	0x000b54c5
   b706c:	000b5625 	.word	0x000b5625
   b7070:	000b5759 	.word	0x000b5759
   b7074:	000b5b25 	.word	0x000b5b25
   b7078:	000b5b49 	.word	0x000b5b49

000b707c <link_constructors_end>:
   b707c:	00000000 	.word	0x00000000
